[
    {
        "date": 1415780040000,
        "repository": "norch-document-processor",
        "title": "Process JSON?",
        "text": "<p>We should have a way of process JSON in addition to HTML since a lot of services offer JSON straight out of the box. </p>\n\n<p>Use case for this is that I&#39;m trying to index my online life and make it searchable. I got the idea on one way to solve it from this blog: http://ift.tt/1p3mrO2 That&#39;s giving me JSON directly from Google Spreadsheet, but I still need to remove a lot of noise: http://ift.tt/1yxXC2R </p>\n\n<p>Basically, I want to remove everything before &quot;entry&quot; and massage/adjust in the rest of the file.</p>",
        "issuetype": "enhancement",
        "url": "http://ift.tt/1yxXC2T",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-11-12T09:14:00+01:00",
        "teasertext": "We should have a way of process JSON in addition to HTML since a lot of services offer JSON straight out of the box. \n\nUse case for this is that I'm trying to index my online life and make it searchable. I got the idea on one way to solve it from this blog: http://ift.tt/1p3mrO2 That's giving me JSON directly from Google Spreadsheet, but I still need to remove a lot of noise: http://ift.tt/1yxXC2R \n\nBasically, I want to remove everything before &quot;entry&quot; and massage/adjust in the rest of the file.",
        "tags": [
            "json",
            "process"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3UqUi1"
    },
    {
        "date": 1415887440000,
        "repository": "norch",
        "title": "Searching for an absent nth word results in woe.",
        "text": "<p>For the test dataset: </p>\n\n<p>&quot;New&quot; works </p>\n\n<p>&quot;York&quot; works </p>\n\n<p>&quot;Yorksdad&quot; works (and returns no results, since it is absent from the index) </p>\n\n<p>&quot;New York&quot; works </p>\n\n<p>&quot;New Yorksdad&quot; results in a catastrophic crash</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/49",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-11-13T15:04:00+01:00",
        "teasertext": "For the test dataset: \n\n&quot;New&quot; works \n\n&quot;York&quot; works \n\n&quot;Yorksdad&quot; works (and returns no results, since it is absent from the index) \n\n&quot;New York&quot; works \n\n&quot;New Yorksdad&quot; results in a catastrophic crash",
        "tags": [
            "word",
            "woe",
            "absent",
            "results"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2VZsBu"
    },
    {
        "date": 1416050220000,
        "repository": "search-index",
        "title": "Add logSilent option to suppress logs",
        "text": "<p>This is a simple modification to allow a new option <code>logSilent</code> to suppress log messages. </p>\n\n<p>How to use: \n<code> \nvar si = require(&#39;search-index&#39;)({ logSilent: true }); \n// si will not log anything from now on \n</code> \nSince the logger is global, there is no way to use different <code>logSilent</code> values when using multiple search-index instances (is this really supported anyway?). I strongly recommend modifying this lib to make it object-friendly, so that we can use multiple search indexes in the same process!</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/55",
        "user": [
            "nlaplante"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-11-15T12:17:00+01:00",
        "teasertext": "This is a simple modification to allow a new option logSilent to suppress log messages. \n\nHow to use: \n \nvar si = require('search-index')({ logSilent: true }); \n// si will not log anything from now on \n \nSince the logger is global, there is no way to use different logSilent values when using multiple search-index instances (is this really supported anyway?). I strongly recommend modifying this lib to make it object-friendly, so that we can use multiple search indexes in the same process!",
        "tags": [
            "logsilent",
            "logs",
            "option",
            "suppress"
        ],
        "type": [
            "GitHub"
        ],
        "id": "C3VYE"
    },
    {
        "date": 1416063720000,
        "repository": "norch",
        "title": "cannot install norch on windows 64bit",
        "text": "<p>cannot install norch \nC:\\projects\\sideLoad&gt;node --version \nv0.10.29 </p>\n\n<p>C:\\projects\\sideLoad&gt;npm --version \n1.4.14 </p>\n\n<p>npm ERR! including the npm and node versions, at: \nnpm ERR!     <a href=\"http://github.com/npm/npm/issues\">http://github.com/npm/npm/issues</a> </p>\n\n<p>npm ERR! System Windows<em>NT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\node</em>modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\request\\node<em> \nmodules\\hawk\\node</em>modules\\cryptiles\\Makefile \nnpm ERR! fstream<em>path C:\\projects\\sideLoad\\node</em>modules\\norch\\node<em>modules\\reque \nst\\node</em>modules\\hawk\\node<em>modules\\cryptiles\\Makefile \nnpm ERR! fstream</em>type File \nnpm ERR! fstream<em>class FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstream</em>stack C:\\Program Files\\nodejs\\node<em>modules\\npm\\node</em>modules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstream<em>stack Object.oncomplete (fs.js:107:15) \nnpm ERR! Error: ENOENT, lstat &#39;C:\\projects\\sideLoad\\node</em>modules\\norch\\node<em>modu \nles\\request\\node</em>modules\\hawk\\node_modules\\boom\\images\\boom.png&#39; \nnpm ERR! If you need help, you may report this <em>entire</em> log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     <a href=\"http://github.com/npm/npm/issues\">http://github.com/npm/npm/issues</a> </p>\n\n<p>npm ERR! System Windows<em>NT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\node</em>modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\request\\node<em> \nmodules\\hawk\\node</em>modules\\boom\\images\\boom.png \nnpm ERR! fstream<em>path C:\\projects\\sideLoad\\node</em>modules\\norch\\node<em>modules\\reque \nst\\node</em>modules\\hawk\\node<em>modules\\boom\\images\\boom.png \nnpm ERR! fstream</em>type File \nnpm ERR! fstream<em>class FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstream</em>stack C:\\Program Files\\nodejs\\node<em>modules\\npm\\node</em>modules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstream<em>stack Object.oncomplete (fs.js:107:15) \nnpm ERR! Error: ENOENT, lstat &#39;C:\\projects\\sideLoad\\node</em>modules\\norch\\node<em>modu \nles\\request\\node</em>modules\\hawk\\node_modules\\hoek\\images\\hoek.png&#39; \nnpm ERR! If you need help, you may report this <em>entire</em> log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     <a href=\"http://github.com/npm/npm/issues\">http://github.com/npm/npm/issues</a> </p>\n\n<p>npm ERR! System Windows<em>NT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\node</em>modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\request\\node<em> \nmodules\\hawk\\node</em>modules\\hoek\\images\\hoek.png \nnpm ERR! fstream<em>path C:\\projects\\sideLoad\\node</em>modules\\norch\\node<em>modules\\reque \nst\\node</em>modules\\hawk\\node<em>modules\\hoek\\images\\hoek.png \nnpm ERR! fstream</em>type File \nnpm ERR! fstream<em>class FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstream</em>stack C:\\Program Files\\nodejs\\node<em>modules\\npm\\node</em>modules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstream<em>stack Object.oncomplete (fs.js:107:15) \nnpm ERR! error rolling back Error: EPERM, unlink &#39;C:\\projects\\sideLoad\\node</em>modu \nles\\norch\\node<em>modules\\cheerio\\node</em>modules\\cheerio-select\\node_modules\\CSSselec \nt\\test\\tools\\bench.js&#39; \nnpm ERR! error rolling back  norch@0.4.3 { [Error: EPERM, unlink &#39;C:\\projects\\si \ndeLoad\\node<em>modules\\norch\\node</em>modules\\cheerio\\node<em>modules\\cheerio-select\\node</em> \nmodules\\CSSselect\\test\\tools\\bench.js&#39;] \nnpm ERR! error rolling back   errno: 50, \nnpm ERR! error rolling back   code: &#39;EPERM&#39;, \nnpm ERR! error rolling back   path: &#39;C:\\projects\\sideLoad\\node<em>modules\\norch \n\\node</em>modules\\cheerio\\node<em>modules\\cheerio-select\\node</em>modules\\CSSselect\\ \ntest\\tools\\bench.js&#39; } \nnpm ERR! Error: ENOENT, open &#39;C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modul \nes\\request\\node<em>modules\\form-data\\node</em>modules\\combined-stream\\node_modules\\dela \nyed-stream\\package.json&#39; \nnpm ERR! If you need help, you may report this <em>entire</em> log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     <a href=\"http://github.com/npm/npm/issues\">http://github.com/npm/npm/issues</a> </p>\n\n<p>npm ERR! System Windows<em>NT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\node</em>modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\request\\node<em> \nmodules\\form-data\\node</em>modules\\combined-stream\\node<em>modules\\delayed-stream\\packa \nge.json \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! Error: ENOENT, lstat &#39;C:\\projects\\sideLoad\\node</em>modules\\norch\\node<em>modu \nles\\multer\\node</em>modules\\busboy\\node<em>modules\\readable-stream\\node</em>modules\\string_ \ndecoder\\README.md&#39; \nnpm ERR! If you need help, you may report this <em>entire</em> log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     <a href=\"http://github.com/npm/npm/issues\">http://github.com/npm/npm/issues</a> </p>\n\n<p>npm ERR! System Windows<em>NT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\node</em>modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\multer\\node<em>m \nodules\\busboy\\node</em>modules\\readable-stream\\node<em>modules\\string</em>decoder\\README.md </p>\n\n<p>npm ERR! fstream<em>path C:\\projects\\sideLoad\\node</em>modules\\norch\\node<em>modules\\multe \nr\\node</em>modules\\busboy\\node<em>modules\\readable-stream\\node</em>modules\\string<em>decoder\\R \nEADME.md \nnpm ERR! fstream</em>type File \nnpm ERR! fstream<em>class FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstream</em>stack C:\\Program Files\\nodejs\\node<em>modules\\npm\\node</em>modules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstream<em>stack Object.oncomplete (fs.js:107:15) \nnpm ERR! Error: ENOENT, lstat &#39;C:\\projects\\sideLoad\\node</em>modules\\norch\\node<em>modu \nles\\cheerio\\node</em>modules\\htmlparser2\\node<em>modules\\readable-stream\\lib_stream</em>wr \nitable.js&#39; \nnpm ERR! If you need help, you may report this <em>entire</em> log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     <a href=\"http://github.com/npm/npm/issues\">http://github.com/npm/npm/issues</a> </p>\n\n<p>npm ERR! System Windows<em>NT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\node</em>modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\cheerio\\node<em> \nmodules\\htmlparser2\\node</em>modules\\readable-stream\\lib_stream<em>writable.js \nnpm ERR! fstream</em>path C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\cheer \nio\\node<em>modules\\htmlparser2\\node</em>modules\\readable-stream\\lib_stream_writable.js </p>\n\n<p>npm ERR! fstream<em>type File \nnpm ERR! fstream</em>class FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstream<em>stack C:\\Program Files\\nodejs\\node</em>modules\\npm\\node<em>modules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstream</em>stack Object.oncomplete (fs.js:107:15) \nnpm ERR! Error: ENOENT, lstat &#39;C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modu \nles\\multer\\node<em>modules\\busboy\\node</em>modules\\readable-stream\\node_modules\\inherit \ns\\LICENSE&#39; \nnpm ERR! If you need help, you may report this <em>entire</em> log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     <a href=\"http://github.com/npm/npm/issues\">http://github.com/npm/npm/issues</a> </p>\n\n<p>npm ERR! System Windows<em>NT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\node</em>modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\multer\\node<em>m \nodules\\busboy\\node</em>modules\\readable-stream\\node<em>modules\\inherits\\LICENSE \nnpm ERR! fstream</em>path C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\multe \nr\\node<em>modules\\busboy\\node</em>modules\\readable-stream\\node_modules\\inherits\\LICENSE </p>\n\n<p>npm ERR! fstream<em>type File \nnpm ERR! fstream</em>class FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstream<em>stack C:\\Program Files\\nodejs\\node</em>modules\\npm\\node<em>modules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstream</em>stack Object.oncomplete (fs.js:107:15) \nnpm ERR! Error: ENOENT, lstat &#39;C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modu \nles\\cheerio\\node<em>modules\\cheerio-select\\node</em>modules\\CSSselect\\test\\tools\\bench. \njs&#39; \nnpm ERR! If you need help, you may report this <em>entire</em> log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     <a href=\"http://github.com/npm/npm/issues\">http://github.com/npm/npm/issues</a> </p>\n\n<p>npm ERR! System Windows<em>NT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\node</em>modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\cheerio\\node<em> \nmodules\\cheerio-select\\node</em>modules\\CSSselect\\test\\tools\\bench.js \nnpm ERR! fstream<em>path C:\\projects\\sideLoad\\node</em>modules\\norch\\node<em>modules\\cheer \nio\\node</em>modules\\cheerio-select\\node<em>modules\\CSSselect\\test\\tools\\bench.js \nnpm ERR! fstream</em>type File \nnpm ERR! fstream<em>class FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstream</em>stack C:\\Program Files\\nodejs\\node<em>modules\\npm\\node</em>modules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstream<em>stack Object.oncomplete (fs.js:107:15) \nnpm ERR! Error: ENOENT, lstat &#39;C:\\projects\\sideLoad\\node</em>modules\\norch\\node<em>modu \nles\\cheerio\\node</em>modules\\htmlparser2\\node<em>modules\\domhandler\\tests\\13-comment</em>in \n_text.json&#39; \nnpm ERR! If you need help, you may report this <em>entire</em> log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     <a href=\"http://github.com/npm/npm/issues\">http://github.com/npm/npm/issues</a> </p>\n\n<p>npm ERR! System Windows<em>NT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\node</em>modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\cheerio\\node<em> \nmodules\\htmlparser2\\node</em>modules\\domhandler\\tests\\13-comment<em>in</em>text.json \nnpm ERR! fstream<em>path C:\\projects\\sideLoad\\node</em>modules\\norch\\node<em>modules\\cheer \nio\\node</em>modules\\htmlparser2\\node<em>modules\\domhandler\\tests\\13-comment</em>in<em>text.jso \nn \nnpm ERR! fstream</em>type File \nnpm ERR! fstream<em>class FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstream</em>stack C:\\Program Files\\nodejs\\node<em>modules\\npm\\node</em>modules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstream<em>stack Object.oncomplete (fs.js:107:15) \nnpm ERR! Error: ENOENT, lstat &#39;C:\\projects\\sideLoad\\node</em>modules\\norch\\node<em>modu \nles\\multer\\node</em>modules\\busboy\\node<em>modules\\readable-stream\\node</em>modules\\core-ut \nil-is\\README.md&#39; \nnpm ERR! If you need help, you may report this <em>entire</em> log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     <a href=\"http://github.com/npm/npm/issues\">http://github.com/npm/npm/issues</a> </p>\n\n<p>npm ERR! System Windows<em>NT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\node</em>modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\multer\\node<em>m \nodules\\busboy\\node</em>modules\\readable-stream\\node<em>modules\\core-util-is\\README.md \nnpm ERR! fstream</em>path C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\multe \nr\\node<em>modules\\busboy\\node</em>modules\\readable-stream\\node<em>modules\\core-util-is\\REA \nDME.md \nnpm ERR! fstream</em>type File \nnpm ERR! fstream<em>class FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstream</em>stack C:\\Program Files\\nodejs\\node<em>modules\\npm\\node</em>modules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstream<em>stack Object.oncomplete (fs.js:107:15) \nnpm ERR! Error: ENOENT, lstat &#39;C:\\projects\\sideLoad\\node</em>modules\\norch\\node<em>modu \nles\\multer\\node</em>modules\\busboy\\node_modules\\dicer\\test\\fixtures\\many-noend\\part7 \n.header&#39; \nnpm ERR! If you need help, you may report this <em>entire</em> log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     <a href=\"http://github.com/npm/npm/issues\">http://github.com/npm/npm/issues</a> </p>\n\n<p>npm ERR! System Windows<em>NT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\node</em>modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\multer\\node<em>m \nodules\\busboy\\node</em>modules\\dicer\\test\\fixtures\\many-noend\\part7.header \nnpm ERR! fstream<em>path C:\\projects\\sideLoad\\node</em>modules\\norch\\node<em>modules\\multe \nr\\node</em>modules\\busboy\\node<em>modules\\dicer\\test\\fixtures\\many-noend\\part7.header \nnpm ERR! fstream</em>type File \nnpm ERR! fstream<em>class FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstream</em>stack C:\\Program Files\\nodejs\\node<em>modules\\npm\\node</em>modules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstream<em>stack Object.oncomplete (fs.js:107:15) \nnpm ERR! Error: ENOENT, lstat &#39;C:\\projects\\sideLoad\\node</em>modules\\norch\\node<em>modu \nles\\search-index\\node</em>modules\\natural\\lib\\natural\\phonetics\\phonetic.js&#39; \nnpm ERR! If you need help, you may report this <em>entire</em> log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     <a href=\"http://github.com/npm/npm/issues\">http://github.com/npm/npm/issues</a> </p>\n\n<p>npm ERR! System Windows<em>NT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\node</em>modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\search-index\\ \nnode<em>modules\\natural\\lib\\natural\\phonetics\\phonetic.js \nnpm ERR! fstream</em>path C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\searc \nh-index\\node<em>modules\\natural\\lib\\natural\\phonetics\\phonetic.js \nnpm ERR! fstream</em>type File \nnpm ERR! fstream<em>class FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstream</em>stack C:\\Program Files\\nodejs\\node<em>modules\\npm\\node</em>modules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstream_stack Object.oncomplete (fs.js:107:15) \n| </p>\n\n<blockquote><p>leveldown@0.10.2 install C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\ \nsearch-index\\node<em>modules\\level\\node</em>modules\\leveldown \nnode-gyp rebuild \nC:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\search-index\\node<em>modules\\l \nevel\\node</em>modules\\leveldown&gt;node &quot;C:\\Program Files\\nodejs\\node<em>modules\\npm\\bin\\n \node-gyp-bin\\....\\node</em>modules\\node-gyp\\bin\\node-gyp.js&quot; rebuild \ngyp ERR! configure error \ngyp ERR! stack Error: Python executable &quot;python&quot; is v3.4.2, which is not support \ned by gyp. \ngyp ERR! stack You can pass the --python switch to point to Python &gt;= v2.5.0 &amp; &lt; \n 3.0.0. \ngyp ERR! stack     at failPythonVersion (C:\\Program Files\\nodejs\\node<em>modules\\np \nm\\node</em>modules\\node-gyp\\lib\\configure.js:108:14) \ngyp ERR! stack     at C:\\Program Files\\nodejs\\node<em>modules\\npm\\node</em>modules\\node \n-gyp\\lib\\configure.js:97:9 \ngyp ERR! stack     at ChildProcess.exithandler (child<em>process.js:645:7) \ngyp ERR! stack     at ChildProcess.emit (events.js:98:17) \ngyp ERR! stack     at maybeClose (child</em>process.js:755:16) \ngyp ERR! stack     at Socket.&lt;anonymous&gt; (child<em>process.js:968:11) \ngyp ERR! stack     at Socket.emit (events.js:95:17) \ngyp ERR! stack     at Pipe.close (net.js:465:12) \ngyp ERR! System Windows</em>NT 6.1.7601 \ngyp ERR! command &quot;node&quot; &quot;C:\\Program Files\\nodejs\\node<em>modules\\npm\\node</em>modu \nles\\node-gyp\\bin\\node-gyp.js&quot; &quot;rebuild&quot; \ngyp ERR! cwd C:\\projects\\sideLoad\\node<em>modules\\norch\\node</em>modules\\search-index\\n \node<em>modules\\level\\node</em>modules\\leveldown \ngyp ERR! node -v v0.10.29 \ngyp ERR! node-gyp -v v0.13.1 \ngyp ERR! not ok \nnpm ERR! \nnpm ERR! Additional logging details can be found in: \nnpm ERR!     C:\\projects\\sideLoad\\npm-debug.log \nnpm ERR! not ok code 0</p></blockquote>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/50",
        "user": [
            "benag"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-11-15T16:02:00+01:00",
        "teasertext": "cannot install norch \nC:\\projects\\sideLoad&gt;node --version \nv0.10.29 \n\nC:\\projects\\sideLoad&gt;npm --version \n1.4.14 \n\nnpm ERR! including the npm and node versions, at: \nnpm ERR!     http://github.com/npm/npm/issues \n\nnpm ERR! System WindowsNT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\nodemodules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\request\\node \nmodules\\hawk\\nodemodules\\cryptiles\\Makefile \nnpm ERR! fstreampath C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\reque \nst\\nodemodules\\hawk\\nodemodules\\cryptiles\\Makefile \nnpm ERR! fstreamtype File \nnpm ERR! fstreamclass FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstreamstack C:\\Program Files\\nodejs\\nodemodules\\npm\\nodemodules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstreamstack Object.oncomplete (fs.js:107:15) \nnpm ERR! Error: ENOENT, lstat 'C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodu \nles\\request\\nodemodules\\hawk\\node_modules\\boom\\images\\boom.png' \nnpm ERR! If you need help, you may report this entire log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     http://github.com/npm/npm/issues \n\nnpm ERR! System WindowsNT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\nodemodules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\request\\node \nmodules\\hawk\\nodemodules\\boom\\images\\boom.png \nnpm ERR! fstreampath C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\reque \nst\\nodemodules\\hawk\\nodemodules\\boom\\images\\boom.png \nnpm ERR! fstreamtype File \nnpm ERR! fstreamclass FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstreamstack C:\\Program Files\\nodejs\\nodemodules\\npm\\nodemodules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstreamstack Object.oncomplete (fs.js:107:15) \nnpm ERR! Error: ENOENT, lstat 'C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodu \nles\\request\\nodemodules\\hawk\\node_modules\\hoek\\images\\hoek.png' \nnpm ERR! If you need help, you may report this entire log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     http://github.com/npm/npm/issues \n\nnpm ERR! System WindowsNT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\nodemodules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\request\\node \nmodules\\hawk\\nodemodules\\hoek\\images\\hoek.png \nnpm ERR! fstreampath C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\reque \nst\\nodemodules\\hawk\\nodemodules\\hoek\\images\\hoek.png \nnpm ERR! fstreamtype File \nnpm ERR! fstreamclass FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstreamstack C:\\Program Files\\nodejs\\nodemodules\\npm\\nodemodules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstreamstack Object.oncomplete (fs.js:107:15) \nnpm ERR! error rolling back Error: EPERM, unlink 'C:\\projects\\sideLoad\\nodemodu \nles\\norch\\nodemodules\\cheerio\\nodemodules\\cheerio-select\\node_modules\\CSSselec \nt\\test\\tools\\bench.js' \nnpm ERR! error rolling back  norch@0.4.3 { [Error: EPERM, unlink 'C:\\projects\\si \ndeLoad\\nodemodules\\norch\\nodemodules\\cheerio\\nodemodules\\cheerio-select\\node \nmodules\\CSSselect\\test\\tools\\bench.js'] \nnpm ERR! error rolling back   errno: 50, \nnpm ERR! error rolling back   code: 'EPERM', \nnpm ERR! error rolling back   path: 'C:\\projects\\sideLoad\\nodemodules\\norch \n\\nodemodules\\cheerio\\nodemodules\\cheerio-select\\nodemodules\\CSSselect\\ \ntest\\tools\\bench.js' } \nnpm ERR! Error: ENOENT, open 'C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodul \nes\\request\\nodemodules\\form-data\\nodemodules\\combined-stream\\node_modules\\dela \nyed-stream\\package.json' \nnpm ERR! If you need help, you may report this entire log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     http://github.com/npm/npm/issues \n\nnpm ERR! System WindowsNT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\nodemodules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\request\\node \nmodules\\form-data\\nodemodules\\combined-stream\\nodemodules\\delayed-stream\\packa \nge.json \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! Error: ENOENT, lstat 'C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodu \nles\\multer\\nodemodules\\busboy\\nodemodules\\readable-stream\\nodemodules\\string_ \ndecoder\\README.md' \nnpm ERR! If you need help, you may report this entire log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     http://github.com/npm/npm/issues \n\nnpm ERR! System WindowsNT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\nodemodules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\multer\\nodem \nodules\\busboy\\nodemodules\\readable-stream\\nodemodules\\stringdecoder\\README.md \n\nnpm ERR! fstreampath C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\multe \nr\\nodemodules\\busboy\\nodemodules\\readable-stream\\nodemodules\\stringdecoder\\R \nEADME.md \nnpm ERR! fstreamtype File \nnpm ERR! fstreamclass FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstreamstack C:\\Program Files\\nodejs\\nodemodules\\npm\\nodemodules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstreamstack Object.oncomplete (fs.js:107:15) \nnpm ERR! Error: ENOENT, lstat 'C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodu \nles\\cheerio\\nodemodules\\htmlparser2\\nodemodules\\readable-stream\\lib_streamwr \nitable.js' \nnpm ERR! If you need help, you may report this entire log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     http://github.com/npm/npm/issues \n\nnpm ERR! System WindowsNT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\nodemodules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\cheerio\\node \nmodules\\htmlparser2\\nodemodules\\readable-stream\\lib_streamwritable.js \nnpm ERR! fstreampath C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\cheer \nio\\nodemodules\\htmlparser2\\nodemodules\\readable-stream\\lib_stream_writable.js \n\nnpm ERR! fstreamtype File \nnpm ERR! fstreamclass FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstreamstack C:\\Program Files\\nodejs\\nodemodules\\npm\\nodemodules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstreamstack Object.oncomplete (fs.js:107:15) \nnpm ERR! Error: ENOENT, lstat 'C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodu \nles\\multer\\nodemodules\\busboy\\nodemodules\\readable-stream\\node_modules\\inherit \ns\\LICENSE' \nnpm ERR! If you need help, you may report this entire log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     http://github.com/npm/npm/issues \n\nnpm ERR! System WindowsNT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\nodemodules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\multer\\nodem \nodules\\busboy\\nodemodules\\readable-stream\\nodemodules\\inherits\\LICENSE \nnpm ERR! fstreampath C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\multe \nr\\nodemodules\\busboy\\nodemodules\\readable-stream\\node_modules\\inherits\\LICENSE \n\nnpm ERR! fstreamtype File \nnpm ERR! fstreamclass FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstreamstack C:\\Program Files\\nodejs\\nodemodules\\npm\\nodemodules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstreamstack Object.oncomplete (fs.js:107:15) \nnpm ERR! Error: ENOENT, lstat 'C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodu \nles\\cheerio\\nodemodules\\cheerio-select\\nodemodules\\CSSselect\\test\\tools\\bench. \njs' \nnpm ERR! If you need help, you may report this entire log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     http://github.com/npm/npm/issues \n\nnpm ERR! System WindowsNT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\nodemodules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\cheerio\\node \nmodules\\cheerio-select\\nodemodules\\CSSselect\\test\\tools\\bench.js \nnpm ERR! fstreampath C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\cheer \nio\\nodemodules\\cheerio-select\\nodemodules\\CSSselect\\test\\tools\\bench.js \nnpm ERR! fstreamtype File \nnpm ERR! fstreamclass FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstreamstack C:\\Program Files\\nodejs\\nodemodules\\npm\\nodemodules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstreamstack Object.oncomplete (fs.js:107:15) \nnpm ERR! Error: ENOENT, lstat 'C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodu \nles\\cheerio\\nodemodules\\htmlparser2\\nodemodules\\domhandler\\tests\\13-commentin \n_text.json' \nnpm ERR! If you need help, you may report this entire log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     http://github.com/npm/npm/issues \n\nnpm ERR! System WindowsNT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\nodemodules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\cheerio\\node \nmodules\\htmlparser2\\nodemodules\\domhandler\\tests\\13-commentintext.json \nnpm ERR! fstreampath C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\cheer \nio\\nodemodules\\htmlparser2\\nodemodules\\domhandler\\tests\\13-commentintext.jso \nn \nnpm ERR! fstreamtype File \nnpm ERR! fstreamclass FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstreamstack C:\\Program Files\\nodejs\\nodemodules\\npm\\nodemodules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstreamstack Object.oncomplete (fs.js:107:15) \nnpm ERR! Error: ENOENT, lstat 'C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodu \nles\\multer\\nodemodules\\busboy\\nodemodules\\readable-stream\\nodemodules\\core-ut \nil-is\\README.md' \nnpm ERR! If you need help, you may report this entire log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     http://github.com/npm/npm/issues \n\nnpm ERR! System WindowsNT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\nodemodules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\multer\\nodem \nodules\\busboy\\nodemodules\\readable-stream\\nodemodules\\core-util-is\\README.md \nnpm ERR! fstreampath C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\multe \nr\\nodemodules\\busboy\\nodemodules\\readable-stream\\nodemodules\\core-util-is\\REA \nDME.md \nnpm ERR! fstreamtype File \nnpm ERR! fstreamclass FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstreamstack C:\\Program Files\\nodejs\\nodemodules\\npm\\nodemodules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstreamstack Object.oncomplete (fs.js:107:15) \nnpm ERR! Error: ENOENT, lstat 'C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodu \nles\\multer\\nodemodules\\busboy\\node_modules\\dicer\\test\\fixtures\\many-noend\\part7 \n.header' \nnpm ERR! If you need help, you may report this entire log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     http://github.com/npm/npm/issues \n\nnpm ERR! System WindowsNT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\nodemodules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\multer\\nodem \nodules\\busboy\\nodemodules\\dicer\\test\\fixtures\\many-noend\\part7.header \nnpm ERR! fstreampath C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\multe \nr\\nodemodules\\busboy\\nodemodules\\dicer\\test\\fixtures\\many-noend\\part7.header \nnpm ERR! fstreamtype File \nnpm ERR! fstreamclass FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstreamstack C:\\Program Files\\nodejs\\nodemodules\\npm\\nodemodules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstreamstack Object.oncomplete (fs.js:107:15) \nnpm ERR! Error: ENOENT, lstat 'C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodu \nles\\search-index\\nodemodules\\natural\\lib\\natural\\phonetics\\phonetic.js' \nnpm ERR! If you need help, you may report this entire log, \nnpm ERR! including the npm and node versions, at: \nnpm ERR!     http://github.com/npm/npm/issues \n\nnpm ERR! System WindowsNT 6.1.7601 \nnpm ERR! command &quot;C:\\Program Files\\nodejs\\\\node.exe&quot; &quot;C:\\Program Files\\nod \nejs\\nodemodules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! cwd C:\\projects\\sideLoad \nnpm ERR! node -v v0.10.29 \nnpm ERR! npm -v 1.4.14 \nnpm ERR! path C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\search-index\\ \nnodemodules\\natural\\lib\\natural\\phonetics\\phonetic.js \nnpm ERR! fstreampath C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\searc \nh-index\\nodemodules\\natural\\lib\\natural\\phonetics\\phonetic.js \nnpm ERR! fstreamtype File \nnpm ERR! fstreamclass FileWriter \nnpm ERR! code ENOENT \nnpm ERR! errno 34 \nnpm ERR! fstreamstack C:\\Program Files\\nodejs\\nodemodules\\npm\\nodemodules\\fst \nream\\lib\\writer.js:284:26 \nnpm ERR! fstream_stack Object.oncomplete (fs.js:107:15) \n| \n\nleveldown@0.10.2 install C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\ \nsearch-index\\nodemodules\\level\\nodemodules\\leveldown \nnode-gyp rebuild \nC:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\search-index\\nodemodules\\l \nevel\\nodemodules\\leveldown&gt;node &quot;C:\\Program Files\\nodejs\\nodemodules\\npm\\bin\\n \node-gyp-bin\\....\\nodemodules\\node-gyp\\bin\\node-gyp.js&quot; rebuild \ngyp ERR! configure error \ngyp ERR! stack Error: Python executable &quot;python&quot; is v3.4.2, which is not support \ned by gyp. \ngyp ERR! stack You can pass the --python switch to point to Python &gt;= v2.5.0 &amp; &lt; \n 3.0.0. \ngyp ERR! stack     at failPythonVersion (C:\\Program Files\\nodejs\\nodemodules\\np \nm\\nodemodules\\node-gyp\\lib\\configure.js:108:14) \ngyp ERR! stack     at C:\\Program Files\\nodejs\\nodemodules\\npm\\nodemodules\\node \n-gyp\\lib\\configure.js:97:9 \ngyp ERR! stack     at ChildProcess.exithandler (childprocess.js:645:7) \ngyp ERR! stack     at ChildProcess.emit (events.js:98:17) \ngyp ERR! stack     at maybeClose (childprocess.js:755:16) \ngyp ERR! stack     at Socket.&lt;anonymous&gt; (childprocess.js:968:11) \ngyp ERR! stack     at Socket.emit (events.js:95:17) \ngyp ERR! stack     at Pipe.close (net.js:465:12) \ngyp ERR! System WindowsNT 6.1.7601 \ngyp ERR! command &quot;node&quot; &quot;C:\\Program Files\\nodejs\\nodemodules\\npm\\nodemodu \nles\\node-gyp\\bin\\node-gyp.js&quot; &quot;rebuild&quot; \ngyp ERR! cwd C:\\projects\\sideLoad\\nodemodules\\norch\\nodemodules\\search-index\\n \nodemodules\\level\\nodemodules\\leveldown \ngyp ERR! node -v v0.10.29 \ngyp ERR! node-gyp -v v0.13.1 \ngyp ERR! not ok \nnpm ERR! \nnpm ERR! Additional logging details can be found in: \nnpm ERR!     C:\\projects\\sideLoad\\npm-debug.log \nnpm ERR! not ok code 0",
        "tags": [
            "windows",
            "64bit",
            "norch",
            "install"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4C4LiZ"
    },
    {
        "date": 1416325620000,
        "repository": "search-index",
        "title": "Add documentation for logSilent",
        "text": null,
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/56",
        "user": [
            "nlaplante"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-11-18T16:47:00+01:00",
        "teasertext": "null",
        "tags": [
            "add",
            "documentation",
            "logsilent"
        ],
        "type": [
            "GitHub"
        ],
        "id": "42zcau"
    },
    {
        "date": 1416831300000,
        "repository": "norch-bootstrap",
        "title": "Embed the actual document instead of preview",
        "text": "<p>A lot of search engines talk about how good they are at previewing documents in the search result. But if your &quot;documents&quot; are web pages with embed-capabilities, there&#39;s no more need for a preview, you could just show the actual embed-view of the content. </p>\n\n<p>I know this is most probably just about developing the template, but could be a nice feature to include. Why? Because it&#39;ll showcase a really good aspect of the web centric search engine Norch really is.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/1",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-11-24T13:15:00+01:00",
        "teasertext": "A lot of search engines talk about how good they are at previewing documents in the search result. But if your &quot;documents&quot; are web pages with embed-capabilities, there's no more need for a preview, you could just show the actual embed-view of the content. \n\nI know this is most probably just about developing the template, but could be a nice feature to include. Why? Because it'll showcase a really good aspect of the web centric search engine Norch really is.",
        "tags": [
            "embed",
            "document",
            "preview",
            "actual"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3TbS8a"
    },
    {
        "date": 1416838320000,
        "repository": "norch-bootstrap",
        "title": "Allow posting of raw JSON from the HTML add interface.",
        "text": "<p>Would be nice to simply write a JSON inline and post it.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/2",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-11-24T15:12:00+01:00",
        "teasertext": "Would be nice to simply write a JSON inline and post it.",
        "tags": [
            "posting",
            "raw",
            "json",
            "html",
            "add",
            "interface"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3FB1DV"
    },
    {
        "date": 1417385760000,
        "repository": "search-index",
        "title": "Error thrown when searching using multiple words",
        "text": "<p>I know that example from documentation uses different notation (<code>[&#39;a, b&#39;]</code>) but this is the only way the multiple-word search works for me: \n<code>javascript \n var request = { \n  &quot;query&quot;: { \n    &quot;slug&quot;: [&#39;a&#39;, &#39;b&#39;] \n  }, \n               ... \n   }; \n</code> </p>\n\n<p>Everything works fine if there are some results, in case there is no results found &quot;Cannot get length property of null&quot; error is thrown </p>\n\n<pre><code>      if (RIKeySet.length == 1) seekCutOff = (q.pageSize + q.offset);</code></pre>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/57",
        "user": [
            "wgrabias"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-11-30T23:16:00+01:00",
        "teasertext": "I know that example from documentation uses different notation (['a, b']) but this is the only way the multiple-word search works for me: \njavascript \n var request = { \n  &quot;query&quot;: { \n    &quot;slug&quot;: ['a', 'b'] \n  }, \n               ... \n   }; \n \n\nEverything works fine if there are some results, in case there is no results found &quot;Cannot get length property of null&quot; error is thrown \n\n      if (RIKeySet.length == 1) seekCutOff = (q.pageSize + q.offset);",
        "tags": [
            "multiple",
            "words",
            "error",
            "thrown"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2NdIU4"
    },
    {
        "date": 1417425540000,
        "repository": "norch",
        "title": "Search index and search engine as webtorrents",
        "text": "<p>A similar idea to the search engine as a bookmarklet. But since the bookmarklet thingy is not the first to happen, it&#39;s good to describe some of the ideas more likely to happen. </p>\n\n<p>If the &quot;search engine running in your browser&quot; works, how about the index, and maybe the search engine it self, as torrents/webtorrents. Then, the one making a webapp or webservice will almost need no server/hardware power at all. You only need a seeder of the app/search engine and search index.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/51",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-12-01T10:19:00+01:00",
        "teasertext": "A similar idea to the search engine as a bookmarklet. But since the bookmarklet thingy is not the first to happen, it's good to describe some of the ideas more likely to happen. \n\nIf the &quot;search engine running in your browser&quot; works, how about the index, and maybe the search engine it self, as torrents/webtorrents. Then, the one making a webapp or webservice will almost need no server/hardware power at all. You only need a seeder of the app/search engine and search index.",
        "tags": [
            "index",
            "webtorrents",
            "search",
            "engine"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1GcaZr"
    },
    {
        "date": 1417504380000,
        "repository": "search-index",
        "title": "Incredibly slow indexing after 200 or so documents",
        "text": "<p>I have about 900 documents that has been created by reading from my sqlite database. </p>\n\n<p>When I loop through the 900 docs and do <code>si.add</code>, it takes forever. The process slows down at around 200 and then indexes really slowly. Is this desired? or am I missing something?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/58",
        "user": [
            "praveev"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-12-02T08:13:00+01:00",
        "teasertext": "I have about 900 documents that has been created by reading from my sqlite database. \n\nWhen I loop through the 900 docs and do si.add, it takes forever. The process slows down at around 200 and then indexes really slowly. Is this desired? or am I missing something?",
        "tags": [
            "incredibly",
            "slow",
            "indexing",
            "documents"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3pqELR"
    },
    {
        "date": 1417548720000,
        "repository": "norch-bootstrap",
        "title": "Refactor",
        "text": "<p>Huge refactoring. But, the filters part of the Norch-thing should be taken a look at, that is line 121 to 129 in js/norch-app.js. I don&#39;t have the proper data to test that part.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/pull/3",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": "fergiemcdowall",
        "datehuman": "2014-12-02T20:32:00+01:00",
        "teasertext": "Huge refactoring. But, the filters part of the Norch-thing should be taken a look at, that is line 121 to 129 in js/norch-app.js. I don't have the proper data to test that part.",
        "tags": [
            "refactor"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3PAdE6"
    },
    {
        "date": 1417548840000,
        "repository": "norch",
        "title": "Allow posting data formatted differently than multipart/form-data",
        "text": "<p>Title says it all. Sorry I touched all your code. Feel free to test, change it back, or modify this PR as you wish @fergiemcdowall. It should work though :+1:</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/pull/52",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-12-02T20:34:00+01:00",
        "teasertext": "Title says it all. Sorry I touched all your code. Feel free to test, change it back, or modify this PR as you wish @fergiemcdowall. It should work though :+1:",
        "tags": [
            "posting",
            "data",
            "formatted",
            "differently",
            "multipart/form-data"
        ],
        "type": [
            "GitHub"
        ],
        "id": "qOzah"
    },
    {
        "date": 1417555320000,
        "repository": "norch-bootstrap",
        "title": "Cannot read property 'reduce' of undefined",
        "text": "<p>Im getting quite a lot of fail- is it working for you @mewwts ?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/4",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": "mewwts",
        "datehuman": "2014-12-02T22:22:00+01:00",
        "teasertext": "Im getting quite a lot of fail- is it working for you @mewwts ?",
        "tags": [
            "read",
            "property",
            "reduce",
            "undefined"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1vdTR8"
    },
    {
        "date": 1417599780000,
        "repository": "norch",
        "title": "Documents are there.... but not?",
        "text": "<p>So, Norch tells me there&#39;s a document matching places: uruguay </p>\n\n<p><img alt=\"screen shot 2014-12-03 at 10 35 12\" src=\"https://cloud.githubusercontent.com/assets/1848670/5278336/7f0cfb08-7ad8-11e4-85a2-ecba614da58b.png\"/> </p>\n\n<p>But when I click it, I get nothing! </p>\n\n<p><img alt=\"screen shot 2014-12-03 at 10 35 17\" src=\"https://cloud.githubusercontent.com/assets/1848670/5278337/83bc62a6-7ad8-11e4-9ea8-eb402b796f25.png\"/></p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/53",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-12-03T10:43:00+01:00",
        "teasertext": "So, Norch tells me there's a document matching places: uruguay \n\n \n\nBut when I click it, I get nothing! \n\n",
        "tags": [
            "documents"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3nui2g"
    },
    {
        "date": 1417600560000,
        "repository": "norch",
        "title": "Need to add documentation about creating and replicating from snapshots",
        "text": "<p>Norch now has quite nice, yet undocumented, replication and snapshot functionality</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/54",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-12-03T10:56:00+01:00",
        "teasertext": "Norch now has quite nice, yet undocumented, replication and snapshot functionality",
        "tags": [
            "add",
            "documentation",
            "creating",
            "replicating",
            "snapshots"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2uPVGg"
    },
    {
        "date": 1417692180000,
        "repository": "norch-indexer",
        "title": "export functions",
        "text": "<p>I think that it could be useful to export the functions. I see that some user scenarios I&#39;ll have something different than the norch-indexer as the end point, and it would be nice to access the functions from another javascript and not just the commandline. </p>\n\n<p>This goes for norch-fetch also: \nhttps://github.com/fergiemcdowall/norch-fetch/issues/14 </p>\n\n<p>What do you think @fergiemcdowall and @mewwts ?</p>",
        "issuetype": "enhancement,question",
        "url": "https://github.com/fergiemcdowall/norch-indexer/issues/2",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-12-04T12:23:00+01:00",
        "teasertext": "I think that it could be useful to export the functions. I see that some user scenarios I'll have something different than the norch-indexer as the end point, and it would be nice to access the functions from another javascript and not just the commandline. \n\nThis goes for norch-fetch also: \nhttps://github.com/fergiemcdowall/norch-fetch/issues/14 \n\nWhat do you think @fergiemcdowall and @mewwts ?",
        "tags": [
            "export",
            "functions"
        ],
        "type": [
            "GitHub"
        ],
        "id": "ldBZZ"
    },
    {
        "date": 1417696200000,
        "repository": "norch-bootstrap",
        "title": "autosuggest doesn't handle \"ø\" that well",
        "text": "<p>Seems &quot;ø&quot; breaks up the word indexing. &quot;overfl&quot; and &quot;dig&quot; is what&#39;s indexed. </p>\n\n<p><img alt=\"screen shot 2014-12-04 at 13 28 19\" src=\"https://cloud.githubusercontent.com/assets/236656/5298270/8c23d2bc-7bb9-11e4-9be9-6309abde3d74.png\"/> \nAutosuggest on &quot;overfl&quot; even if there&#39;s no &quot;overfl&quot;-words in the index only one &quot;overflødig&quot;. </p>\n\n<p><img alt=\"screen shot 2014-12-04 at 13 31 54\" src=\"https://cloud.githubusercontent.com/assets/236656/5298293/ee8193fe-7bb9-11e4-8723-c2df31fa7c46.png\"/> </p>\n\n<p><img alt=\"screen shot 2014-12-04 at 13 31 18\" src=\"https://cloud.githubusercontent.com/assets/236656/5298287/d896f660-7bb9-11e4-88eb-e8df186efe44.png\"/></p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/7",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-12-04T13:30:00+01:00",
        "teasertext": "Seems &quot;ø&quot; breaks up the word indexing. &quot;overfl&quot; and &quot;dig&quot; is what's indexed. \n\n \nAutosuggest on &quot;overfl&quot; even if there's no &quot;overfl&quot;-words in the index only one &quot;overflødig&quot;. \n\n \n\n",
        "tags": [
            "autosuggest",
            "handle",
            "ø"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2bqphC"
    },
    {
        "date": 1417773120000,
        "repository": "norch-bootstrap",
        "title": "Autoscrolling weirdness",
        "text": "<p>Sometimes autoscrolling seems to load in a lot (100s) of documents, when the default should be 20 or something.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/8",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-12-05T10:52:00+01:00",
        "teasertext": "Sometimes autoscrolling seems to load in a lot (100s) of documents, when the default should be 20 or something.",
        "tags": [
            "weirdness",
            "autoscrolling"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2HCuOl"
    },
    {
        "date": 1417852620000,
        "repository": "norch",
        "title": "Test suite",
        "text": "<p>Norch really needs a proper test suite. I like the look of this: http://thewayofcode.wordpress.com/2013/04/21/how-to-build-and-test-rest-api-with-nodejs-express-mocha/</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch/issues/55",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-12-06T08:57:00+01:00",
        "teasertext": "Norch really needs a proper test suite. I like the look of this: http://thewayofcode.wordpress.com/2013/04/21/how-to-build-and-test-rest-api-with-nodejs-express-mocha/",
        "tags": [
            "suite",
            "test"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2dtvuY"
    },
    {
        "date": 1417894560000,
        "repository": "norch",
        "title": "getDoc doesnt seem to be working on the latest build",
        "text": "<p><code>/getDoc?docID=0</code> doesnt seem to be working at the moment</p>",
        "issuetype": "bug",
        "url": "https://github.com/fergiemcdowall/norch/issues/56",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-12-06T20:36:00+01:00",
        "teasertext": "/getDoc?docID=0 doesnt seem to be working at the moment",
        "tags": [
            "latest",
            "build",
            "doesnt",
            "working"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1TUgPZ"
    },
    {
        "date": 1418134500000,
        "repository": "norch",
        "title": "Fix concurrent batch indexing",
        "text": "<p>There are reports of documents disappearing when two or more batches are indexed concurrently (thanks @praveev) </p>\n\n<p>The solution to this is probably to implement queuing functionality in Norch with https://github.com/learnboost/kue or similar.</p>",
        "issuetype": "bug",
        "url": "https://github.com/fergiemcdowall/norch/issues/57",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-12-09T15:15:00+01:00",
        "teasertext": "There are reports of documents disappearing when two or more batches are indexed concurrently (thanks @praveev) \n\nThe solution to this is probably to implement queuing functionality in Norch with https://github.com/learnboost/kue or similar.",
        "tags": [
            "fix",
            "concurrent",
            "batch",
            "indexing"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1lbqKw"
    },
    {
        "date": 1418650920000,
        "repository": "norch-bootstrap",
        "title": "Documentation tab should contain norch-documentation instead of norch-bootstrap?",
        "text": "<p>http://localhost:3030/#/docs \nToday it only says: \n[...] \nnorch-bootstrap \nA pluggable front-end for Norch based on Angular and Bootstrap \n[...] </p>\n\n<p>I would like https://github.com/fergiemcdowall/norch/blob/master/README.md</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/9",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-12-15T14:42:00+01:00",
        "teasertext": "http://localhost:3030/#/docs \nToday it only says: \n[...] \nnorch-bootstrap \nA pluggable front-end for Norch based on Angular and Bootstrap \n[...] \n\nI would like https://github.com/fergiemcdowall/norch/blob/master/README.md",
        "tags": [
            "documentation",
            "tab",
            "norch-documentation",
            "norch-bootstrap"
        ],
        "type": [
            "GitHub"
        ],
        "id": "TG2uZ"
    },
    {
        "date": 1418909640000,
        "repository": "norch",
        "title": "Singlequotes not correct JSON?",
        "text": "<p>A small error in the documentation? Got error on singlequotes in JSON, it should be double-quotes, shouldn&#39;t it? \n<code></code>`javascript \n[ \n  { \n    &#39;id&#39;:&#39;1&#39;, \n    &#39;title&#39;:&#39;A really interesting document&#39;, \n    &#39;body&#39;:&#39;This is a really interesting document&#39;, \n    &#39;metadata&#39;:[&#39;red&#39;, &#39;potato&#39;] \n  }, \n  { \n    &#39;id&#39;:&#39;2&#39;, \n    &#39;title&#39;:&#39;Another interesting document&#39;, \n    &#39;body&#39;:&#39;This is another really interesting document that is a bit different&#39;, \n    &#39;metadata&#39;:[&#39;yellow&#39;, &#39;potato&#39;] \n  } \n]</p>",
        "issuetype": "question",
        "url": "https://github.com/fergiemcdowall/norch/issues/59",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-12-18T14:34:00+01:00",
        "teasertext": "A small error in the documentation? Got error on singlequotes in JSON, it should be double-quotes, shouldn't it? \n`javascript \n[ \n  { \n    'id':'1', \n    'title':'A really interesting document', \n    'body':'This is a really interesting document', \n    'metadata':['red', 'potato'] \n  }, \n  { \n    'id':'2', \n    'title':'Another interesting document', \n    'body':'This is another really interesting document that is a bit different', \n    'metadata':['yellow', 'potato'] \n  } \n]",
        "tags": [
            "correct",
            "json",
            "singlequotes"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2xnhis"
    },
    {
        "date": 1418909760000,
        "repository": "norch",
        "title": "Make documentation match example data",
        "text": "<p>This is a big job, but it would be really nice with documentation matching at least one sample set of data. That means it&#39;s much easier to test all the functionality and figure out how stuff is working.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch/issues/60",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-12-18T14:36:00+01:00",
        "teasertext": "This is a big job, but it would be really nice with documentation matching at least one sample set of data. That means it's much easier to test all the functionality and figure out how stuff is working.",
        "tags": [
            "make",
            "match",
            "data",
            "documentation"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1BoRDF"
    },
    {
        "date": 1418916840000,
        "repository": "norch-fetch",
        "title": "RSS fetcher",
        "text": "<p>One that checks which pages are new since last time, if any.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch-fetch/issues/15",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-12-18T16:34:00+01:00",
        "teasertext": "One that checks which pages are new since last time, if any.",
        "tags": [
            "rss",
            "fetcher"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1lZISQ"
    },
    {
        "date": 1418983980000,
        "repository": "norch-indexer",
        "title": "When using field as facet, transform string to an array of one value",
        "text": "<p>When your JSON looks like this: \n<code>javascript \n[ \n  { \n    &quot;title&quot;:&quot;A really interesting document&quot;, \n    &quot;metadata&quot;:&quot;red&quot; \n  } \n] \n</code> \nTreat it as: \n<code>javascript \n[ \n  { \n    &quot;title&quot;:&quot;A really interesting document&quot;, \n    &quot;metadata&quot;:[&quot;red&quot;] \n  } \n] \n</code></p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch-indexer/issues/3",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-12-19T11:13:00+01:00",
        "teasertext": "When your JSON looks like this: \njavascript \n[ \n  { \n    &quot;title&quot;:&quot;A really interesting document&quot;, \n    &quot;metadata&quot;:&quot;red&quot; \n  } \n] \n \nTreat it as: \njavascript \n[ \n  { \n    &quot;title&quot;:&quot;A really interesting document&quot;, \n    &quot;metadata&quot;:[&quot;red&quot;] \n  } \n] \n",
        "tags": [
            "field",
            "facet",
            "transform",
            "string",
            "array"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1IjXfM"
    },
    {
        "date": 1419439140000,
        "repository": "search-index",
        "title": "work-in-progress: make search-index module browserifiable",
        "text": "<p>Plan: \n- [x] switch dependency on <code>level</code> to <code>levelup</code> and <code>leveldown</code>. \n- [ ] add <a href=\"https://www.npmjs.com/package/level-js\"><code>level.js</code></a> for use in browser \n- [ ] accept a <code>db</code> property in the <code>SearchIndex</code> options. \n- [ ] add <code>search-index-browser.js</code> that exports same API as <code>search-index</code>, but creating and passing in a <code>level.js</code> db. \n- [ ] set up the test suite to be runnable in the browser (don&#39;t know if PhantomJS has IndexedDB, or if Travis can handle other browser tests...)</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/59",
        "user": [
            "anandthakker"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2014-12-24T17:39:00+01:00",
        "teasertext": "Plan: \n- [x] switch dependency on level to levelup and leveldown. \n- [ ] add level.js for use in browser \n- [ ] accept a db property in the SearchIndex options. \n- [ ] add search-index-browser.js that exports same API as search-index, but creating and passing in a level.js db. \n- [ ] set up the test suite to be runnable in the browser (don't know if PhantomJS has IndexedDB, or if Travis can handle other browser tests...)",
        "tags": [
            "work-in-progress",
            "make",
            "search-index",
            "module",
            "browserifiable"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4lWWeR"
    },
    {
        "date": 1420147860000,
        "repository": "search-index",
        "title": "A browserify demo of search-index",
        "text": "<p>A demo of  a search with search index that doesn&#39;t run any place else than the browser.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/60",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-01T22:31:00+01:00",
        "teasertext": "A demo of  a search with search index that doesn't run any place else than the browser.",
        "tags": [
            "browserify",
            "search-index",
            "demo"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1LeyHb"
    },
    {
        "date": 1421230200000,
        "repository": "search-index",
        "title": "si.del callback err is true ?",
        "text": "<p>Why err param from si.del callback is at true when all is ok ? </p>\n\n<p>In deleteDoc it isn&#39;t better to return callback(null, true) instead of return callback(true);</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/61",
        "user": [
            "sbiaudet"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-14T11:10:00+01:00",
        "teasertext": "Why err param from si.del callback is at true when all is ok ? \n\nIn deleteDoc it isn't better to return callback(null, true) instead of return callback(true);",
        "tags": [
            "sidel",
            "callback",
            "err",
            "true"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1jvaX"
    },
    {
        "date": 1421233020000,
        "repository": "search-index",
        "title": "empty function do not use indexPath",
        "text": "<p>If you define an indexPath in options, the empty function rm &#39;si&#39; folder and recreate a new db with &#39;si&#39; as name. The database defined in options is never emptied.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/62",
        "user": [
            "sbiaudet"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-14T11:57:00+01:00",
        "teasertext": "If you define an indexPath in options, the empty function rm 'si' folder and recreate a new db with 'si' as name. The database defined in options is never emptied.",
        "tags": [
            "indexpath",
            "empty",
            "function"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3as1ch"
    },
    {
        "date": 1421285400000,
        "repository": "norch",
        "title": "http://www.norchjs.net/ not reacable",
        "text": "<p>url from readme. </p>\n\n<p>Was considering integrating into Etherpad, doable?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/61",
        "user": [
            "JohnMcLear"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-15T02:30:00+01:00",
        "teasertext": "url from readme. \n\nWas considering integrating into Etherpad, doable?",
        "tags": [
            "http://www.norchjs.net/",
            "reacable"
        ],
        "type": [
            "GitHub"
        ],
        "id": "KpYJ5"
    },
    {
        "date": 1421358240000,
        "repository": "search-index",
        "title": "Using more async statement",
        "text": "<p>In nodes it&#39;s important to have async and non blocking code. In the project lot of loops can block code. Having a function with a callback is not really async if you do not use process.nextTick. http://howtonode.org/understanding-process-next-tick explain this, see asyncFake and asyncReal example. </p>\n\n<p>I propose to improve your code with more async and parallel statements. You can found a first iteration in this pull request. Check and give me your feelings.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/64",
        "user": [
            "sbiaudet"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-15T22:44:00+01:00",
        "teasertext": "In nodes it's important to have async and non blocking code. In the project lot of loops can block code. Having a function with a callback is not really async if you do not use process.nextTick. http://howtonode.org/understanding-process-next-tick explain this, see asyncFake and asyncReal example. \n\nI propose to improve your code with more async and parallel statements. You can found a first iteration in this pull request. Check and give me your feelings.",
        "tags": [
            "statement",
            "async"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3XbV0f"
    },
    {
        "date": 1421412300000,
        "repository": "norch",
        "title": "Error when trying to install",
        "text": "<p>While running <br/>sudo npm install -g norch \non ubuntu trusty </p>\n\n<blockquote><p>leveldown@0.10.2 install /usr/local/lib/node<em>modules/norch/node</em>modules/search-index/node<em>modules/level/node</em>modules/leveldown \nnode-gyp rebuild </p></blockquote>\n\n<p>npm http 304 https://registry.npmjs.org/apparatus \n/bin/sh: 1: node: not found \ngyp: Call to &#39;node -e &quot;require(&#39;nan&#39;)&quot;&#39; returned exit status 127. while trying to load binding.gyp</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/62",
        "user": [
            "Enemico"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-16T13:45:00+01:00",
        "teasertext": "While running sudo npm install -g norch \non ubuntu trusty \n\nleveldown@0.10.2 install /usr/local/lib/nodemodules/norch/nodemodules/search-index/nodemodules/level/nodemodules/leveldown \nnode-gyp rebuild \n\nnpm http 304 https://registry.npmjs.org/apparatus \n/bin/sh: 1: node: not found \ngyp: Call to 'node -e &quot;require('nan')&quot;' returned exit status 127. while trying to load binding.gyp",
        "tags": [
            "error",
            "install"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4D3PXC"
    },
    {
        "date": 1421441460000,
        "repository": "search-index",
        "title": "Optimize reduceTF function",
        "text": "<p>Using lodash map/reduce for a gain about 20% of performance</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/65",
        "user": [
            "sbiaudet"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-16T21:51:00+01:00",
        "teasertext": "Using lodash map/reduce for a gain about 20% of performance",
        "tags": [
            "optimize",
            "reducetf",
            "function"
        ],
        "type": [
            "GitHub"
        ],
        "id": "212w9t"
    },
    {
        "date": 1421913960000,
        "repository": "norch",
        "title": "Make it possible to send a JSON query object with parameters",
        "text": "<p>and document how it would work. </p>\n\n<p>Is it possible to do this with a GET? Is it necessary to implement this as a POST?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/63",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": "mewwts",
        "datehuman": "2015-01-22T09:06:00+01:00",
        "teasertext": "and document how it would work. \n\nIs it possible to do this with a GET? Is it necessary to implement this as a POST?",
        "tags": [
            "make",
            "send",
            "json",
            "query",
            "object",
            "parameters"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4xU407"
    },
    {
        "date": 1421952780000,
        "repository": "norch",
        "title": "Use a utility lib. like Lo-dash or Underscore",
        "text": "<p>What does the great @fergiemcdowall think of introducing another dependency that will make life just a tad more easy for us? I vote yay! :+1:</p>",
        "issuetype": "question",
        "url": "https://github.com/fergiemcdowall/norch/issues/64",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-22T19:53:00+01:00",
        "teasertext": "What does the great @fergiemcdowall think of introducing another dependency that will make life just a tad more easy for us? I vote yay! :+1:",
        "tags": [
            "utility",
            "lib",
            "lo-dash",
            "underscore"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3kGu9n"
    },
    {
        "date": 1421960460000,
        "repository": "norch",
        "title": "Time/date navigators",
        "text": "<p>To be able to set a time range (from time/date to time/date) as a filter/navigator would be great! You said Norch had something like this earlier? Or maybe this is an issue for <code>search-index</code>?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/65",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-22T22:01:00+01:00",
        "teasertext": "To be able to set a time range (from time/date to time/date) as a filter/navigator would be great! You said Norch had something like this earlier? Or maybe this is an issue for search-index?",
        "tags": [
            "navigators",
            "time/date"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1PfVqZ"
    },
    {
        "date": 1422005280000,
        "repository": "search-index",
        "title": "Ability to facet and filter on a _range_ of values",
        "text": "<p>At the moment you can facet and filter on single values, but not value &#39;buckets&#39; or ranges. This functionality was present in earlier builds, but has fallen our of the most recent build because of lazy documentation (my bad) and gaps in the test coverage (also my bad).</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/67",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-23T10:28:00+01:00",
        "teasertext": "At the moment you can facet and filter on single values, but not value 'buckets' or ranges. This functionality was present in earlier builds, but has fallen our of the most recent build because of lazy documentation (my bad) and gaps in the test coverage (also my bad).",
        "tags": [
            "_range_",
            "values",
            "facet",
            "filter"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3lwqze"
    },
    {
        "date": 1422004500000,
        "repository": "search-index",
        "title": "Time/date navigators",
        "text": "<p>To be able to set a time range (from time/date to time/date) as a filter/navigator would be great! This is the upstream version of this issue, over at <code>Norch</code>: \nhttps://github.com/fergiemcdowall/norch/issues/65</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/search-index/issues/66",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-23T10:15:00+01:00",
        "teasertext": "To be able to set a time range (from time/date to time/date) as a filter/navigator would be great! This is the upstream version of this issue, over at Norch: \nhttps://github.com/fergiemcdowall/norch/issues/65",
        "tags": [
            "navigators",
            "time/date"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2KRkVv"
    },
    {
        "date": 1422007620000,
        "repository": "norch",
        "title": "Make Norch run on a Mirage unikernel",
        "text": "<p>Part of the fun with <code>Norch</code> is something as rear as a lightweight search engine. Still, you need a full OS, like OSX or Linux that Norch can run on top of. Now, the <code>search-index</code> can run in a browser, but to create a good user experience you need a server as well. </p>\n\n<p>Maybe Mirage OS could help us creating a really small, snappy and cloud-ready unikernel? We need to figure out if Mirage will actually do this and make a howto description. \nhttps://github.com/mirage/mirage</p>",
        "issuetype": "enhancement,question",
        "url": "https://github.com/fergiemcdowall/norch/issues/66",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-23T11:07:00+01:00",
        "teasertext": "Part of the fun with Norch is something as rear as a lightweight search engine. Still, you need a full OS, like OSX or Linux that Norch can run on top of. Now, the search-index can run in a browser, but to create a good user experience you need a server as well. \n\nMaybe Mirage OS could help us creating a really small, snappy and cloud-ready unikernel? We need to figure out if Mirage will actually do this and make a howto description. \nhttps://github.com/mirage/mirage",
        "tags": [
            "mirage",
            "unikernel",
            "make",
            "run"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1IPakn"
    },
    {
        "date": 1422026640000,
        "repository": "norch",
        "title": "Norch seems to be totally broken in git",
        "text": "<p>The version in the git repo seems to be broken. The version in npm seems to be ok. </p>\n\n<p>I cant run the cloned version on my mac.</p>",
        "issuetype": "bug",
        "url": "https://github.com/fergiemcdowall/norch/issues/67",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-23T16:24:00+01:00",
        "teasertext": "The version in the git repo seems to be broken. The version in npm seems to be ok. \n\nI cant run the cloned version on my mac.",
        "tags": [
            "norch",
            "totally",
            "broken",
            "git"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3YmdsN"
    },
    {
        "date": 1422053580000,
        "repository": "norch",
        "title": "Norch needs proper constructors so that it is possible to trivially run many instances in one machine/process",
        "text": "<p>Often when testing its necessary to have more than one norch up in the same process. There are probably other scenarios where this would be nice as well. </p>\n\n<p>Norch needs a proper constructor so that you can do </p>\n\n<p><code>javascript \nvar norch = require(&#39;norch&#39;); \nnorchA = new norch(norchAOptions); \nnorchB = new norch(norchBOptions); \n</code> </p>\n\n<p>Theres a nice walk through of constructors in the <code>require</code> universe here (especially maček&#39;s answer): http://stackoverflow.com/questions/20534702/node-js-use-of-module-exports-as-a-constructor</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/68",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-23T23:53:00+01:00",
        "teasertext": "Often when testing its necessary to have more than one norch up in the same process. There are probably other scenarios where this would be nice as well. \n\nNorch needs a proper constructor so that you can do \n\njavascript \nvar norch = require('norch'); \nnorchA = new norch(norchAOptions); \nnorchB = new norch(norchBOptions); \n \n\nTheres a nice walk through of constructors in the require universe here (especially maček's answer): http://stackoverflow.com/questions/20534702/node-js-use-of-module-exports-as-a-constructor",
        "tags": [
            "machine/process",
            "proper",
            "constructors",
            "norch"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2gdqTw"
    },
    {
        "date": 1422216900000,
        "repository": "search-index",
        "title": "Proper object instantiation",
        "text": "<p>It should be possible to make totally distinct search engine objects. </p>\n\n<p>At the moment, instantiating two or more <code>search-index</code>s in the same program is problematic </p>\n\n<p>Do instantiation like this: </p>\n\n<p><code>javascript \nvar SearchIndex = require(&quot;search-index&quot;); \nvar si1 = new SearchIndex(options1); \nvar si2 = new SearchIndex(options2); \n</code></p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/search-index/issues/68",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-25T21:15:00+01:00",
        "teasertext": "It should be possible to make totally distinct search engine objects. \n\nAt the moment, instantiating two or more search-indexs in the same program is problematic \n\nDo instantiation like this: \n\njavascript \nvar SearchIndex = require(&quot;search-index&quot;); \nvar si1 = new SearchIndex(options1); \nvar si2 = new SearchIndex(options2); \n",
        "tags": [
            "proper",
            "object",
            "instantiation"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4fTaLH"
    },
    {
        "date": 1422286260000,
        "repository": "norch-bootstrap",
        "title": "teaser=body deprecated?",
        "text": "<p>After @mewwts last changes on <code>norch-bootstrap</code>, I think <code>teaser=body</code> doesn&#39;t have any useful application anymore. At least not out of the box.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/10",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-26T16:31:00+01:00",
        "teasertext": "After @mewwts last changes on norch-bootstrap, I think teaser=body doesn't have any useful application anymore. At least not out of the box.",
        "tags": [
            "deprecated",
            "teaser=body"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4C7MVf"
    },
    {
        "date": 1422286680000,
        "repository": "norch-bootstrap",
        "title": "filters not working?",
        "text": "<p>I get to display the facets, but they don&#39;t do anything when I click them (no filter action). Here I&#39;ve filtered on the facet <code>tag=search</code>, but I still get 8 results. </p>\n\n<p><img alt=\"screen shot 2015-01-26 at 16 36 14\" src=\"https://cloud.githubusercontent.com/assets/236656/5902300/b4ec1cc4-a579-11e4-98ad-da499fd3fec6.png\"/> </p>\n\n<p>JSON example: \n<code> \n  { \n    &quot;date&quot;:&quot;2014-11-10T22:20:00+01:00&quot;, \n    &quot;user&quot;:[ \n      &quot;eklem&quot; \n    ], \n    &quot;text&quot;:&quot;What in your online life would be interesting for you to have #searchable ? #search #events #sites&quot;, \n    &quot;link&quot;:&quot;http://ift.tt/1uUH33u&quot;, \n    &quot;tags&quot;:[ \n      &quot;searchable&quot;, \n      &quot;search&quot;, \n      &quot;events&quot;, \n      &quot;sites&quot; \n    ], \n    &quot;type&quot;:[ \n      &quot;Twitter&quot; \n    ], \n    &quot;id&quot;:&quot;TEWP&quot; \n  }, \n  { \n    &quot;date&quot;:&quot;2014-11-13T10:22:00+01:00&quot;, \n    &quot;user&quot;:[ \n      &quot;eklem&quot;, \n      &quot;labs_finn_no&quot;, \n      &quot;IFTTT&quot; \n    ], \n    &quot;text&quot;:&quot;@labs_finn_no På tide å utvikle triggere for @IFTTT ? https://t.co/n9OAv49fXS Tenk på all moroa folk kan gjøre da!&quot;, \n    &quot;link&quot;:&quot;http://twitter.com/eklem/status/532825696486563840&quot;, \n    &quot;tags&quot;:null, \n    &quot;type&quot;:[ \n      &quot;Twitter&quot; \n    ], \n    &quot;id&quot;:&quot;2DIjQj&quot; \n  }, \n  { \n    &quot;date&quot;:&quot;2014-11-13T10:39:00+01:00&quot;, \n    &quot;user&quot;:[ \n      &quot;eklem&quot;, \n      &quot;labs_finn_no&quot;, \n      &quot;SchibstedGroup&quot;, \n      &quot;SchibstedGrowth&quot; \n    ], \n    &quot;text&quot;:&quot;@labs_finn_no Eller få @SchibstedGroup / @SchibstedGrowth til å utvikle eller investere i noe tilsvarende?&quot;, \n    &quot;link&quot;:&quot;http://twitter.com/eklem/status/532830002002546689&quot;, \n    &quot;tags&quot;:null, \n    &quot;type&quot;:[ \n      &quot;Twitter&quot; \n    ], \n    &quot;id&quot;:&quot;QQjZg&quot; \n  }, \n  { \n    &quot;date&quot;:&quot;2014-11-13T10:55:00+01:00&quot;, \n    &quot;user&quot;:[ \n      &quot;eklem&quot;, \n      &quot;ramyo:&quot;, \n      &quot;Yggdrasil2015:&quot; \n    ], \n    &quot;text&quot;:&quot;RT @ramyo: Har akkurat foreslått et foredrag til @Yggdrasil2015: “Hvordan få til god designkritikk”. Håper det blir antatt – Yggdrasil er alltid moro!&quot;, \n    &quot;link&quot;:&quot;http://twitter.com/eklem/status/532834125749948416&quot;, \n    &quot;tags&quot;:null, \n    &quot;type&quot;:[ \n      &quot;Twitter&quot; \n    ], \n    &quot;id&quot;:&quot;3XADXj&quot; \n  }, \n  { \n    &quot;date&quot;:&quot;2014-11-15T09:34:00+01:00&quot;, \n    &quot;user&quot;:[ \n      &quot;eklem&quot;, \n      &quot;hildecs:&quot; \n    ], \n    &quot;text&quot;:&quot;RT @hildecs: Nå har det kokt over for Aftenposten. \\&quot;Fikk kroppen full av tungmetaller og parasitter\\&quot; http://t.co/RD46U3MPgv #kvakksalverspråk&quot;, \n    &quot;link&quot;:&quot;http://twitter.com/eklem/status/533538592912850944&quot;, \n    &quot;tags&quot;:[ \n      &quot;kvakksalverspråk&quot; \n    ], \n    &quot;type&quot;:[ \n      &quot;Twitter&quot; \n    ], \n    &quot;id&quot;:&quot;dVjBP&quot; \n  }, \n</code></p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/11",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-26T16:38:00+01:00",
        "teasertext": "I get to display the facets, but they don't do anything when I click them (no filter action). Here I've filtered on the facet tag=search, but I still get 8 results. \n\n \n\nJSON example: \n \n  { \n    &quot;date&quot;:&quot;2014-11-10T22:20:00+01:00&quot;, \n    &quot;user&quot;:[ \n      &quot;eklem&quot; \n    ], \n    &quot;text&quot;:&quot;What in your online life would be interesting for you to have #searchable ? #search #events #sites&quot;, \n    &quot;link&quot;:&quot;http://ift.tt/1uUH33u&quot;, \n    &quot;tags&quot;:[ \n      &quot;searchable&quot;, \n      &quot;search&quot;, \n      &quot;events&quot;, \n      &quot;sites&quot; \n    ], \n    &quot;type&quot;:[ \n      &quot;Twitter&quot; \n    ], \n    &quot;id&quot;:&quot;TEWP&quot; \n  }, \n  { \n    &quot;date&quot;:&quot;2014-11-13T10:22:00+01:00&quot;, \n    &quot;user&quot;:[ \n      &quot;eklem&quot;, \n      &quot;labs_finn_no&quot;, \n      &quot;IFTTT&quot; \n    ], \n    &quot;text&quot;:&quot;@labs_finn_no På tide å utvikle triggere for @IFTTT ? https://t.co/n9OAv49fXS Tenk på all moroa folk kan gjøre da!&quot;, \n    &quot;link&quot;:&quot;http://twitter.com/eklem/status/532825696486563840&quot;, \n    &quot;tags&quot;:null, \n    &quot;type&quot;:[ \n      &quot;Twitter&quot; \n    ], \n    &quot;id&quot;:&quot;2DIjQj&quot; \n  }, \n  { \n    &quot;date&quot;:&quot;2014-11-13T10:39:00+01:00&quot;, \n    &quot;user&quot;:[ \n      &quot;eklem&quot;, \n      &quot;labs_finn_no&quot;, \n      &quot;SchibstedGroup&quot;, \n      &quot;SchibstedGrowth&quot; \n    ], \n    &quot;text&quot;:&quot;@labs_finn_no Eller få @SchibstedGroup / @SchibstedGrowth til å utvikle eller investere i noe tilsvarende?&quot;, \n    &quot;link&quot;:&quot;http://twitter.com/eklem/status/532830002002546689&quot;, \n    &quot;tags&quot;:null, \n    &quot;type&quot;:[ \n      &quot;Twitter&quot; \n    ], \n    &quot;id&quot;:&quot;QQjZg&quot; \n  }, \n  { \n    &quot;date&quot;:&quot;2014-11-13T10:55:00+01:00&quot;, \n    &quot;user&quot;:[ \n      &quot;eklem&quot;, \n      &quot;ramyo:&quot;, \n      &quot;Yggdrasil2015:&quot; \n    ], \n    &quot;text&quot;:&quot;RT @ramyo: Har akkurat foreslått et foredrag til @Yggdrasil2015: “Hvordan få til god designkritikk”. Håper det blir antatt – Yggdrasil er alltid moro!&quot;, \n    &quot;link&quot;:&quot;http://twitter.com/eklem/status/532834125749948416&quot;, \n    &quot;tags&quot;:null, \n    &quot;type&quot;:[ \n      &quot;Twitter&quot; \n    ], \n    &quot;id&quot;:&quot;3XADXj&quot; \n  }, \n  { \n    &quot;date&quot;:&quot;2014-11-15T09:34:00+01:00&quot;, \n    &quot;user&quot;:[ \n      &quot;eklem&quot;, \n      &quot;hildecs:&quot; \n    ], \n    &quot;text&quot;:&quot;RT @hildecs: Nå har det kokt over for Aftenposten. \\&quot;Fikk kroppen full av tungmetaller og parasitter\\&quot; http://t.co/RD46U3MPgv #kvakksalverspråk&quot;, \n    &quot;link&quot;:&quot;http://twitter.com/eklem/status/533538592912850944&quot;, \n    &quot;tags&quot;:[ \n      &quot;kvakksalverspråk&quot; \n    ], \n    &quot;type&quot;:[ \n      &quot;Twitter&quot; \n    ], \n    &quot;id&quot;:&quot;dVjBP&quot; \n  }, \n",
        "tags": [
            "filters",
            "working"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3Pgqoh"
    },
    {
        "date": 1422303120000,
        "repository": "norch",
        "title": "Posting data encoded as \"application/json\"",
        "text": "<p>For the time being, I think the only requests that are allowed are those that are form encoded. While working with #63 I began thinking that there is not much reason not to allow <code>application/json</code>. However, I understand if it initally, for simplicity or some other reason I am unaware of, was chosen to stick with one?</p>",
        "issuetype": "question",
        "url": "https://github.com/fergiemcdowall/norch/issues/69",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-26T21:12:00+01:00",
        "teasertext": "For the time being, I think the only requests that are allowed are those that are form encoded. While working with #63 I began thinking that there is not much reason not to allow application/json. However, I understand if it initally, for simplicity or some other reason I am unaware of, was chosen to stick with one?",
        "tags": [
            "posting",
            "data",
            "encoded",
            "application/json"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1Dk22a"
    },
    {
        "date": 1422474900000,
        "repository": "search-index",
        "title": "Logging in seems to be broken for indexing",
        "text": "<p>There is no longer a pretty indexing log. Winston not playing nice for some reason</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/69",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-28T20:55:00+01:00",
        "teasertext": "There is no longer a pretty indexing log. Winston not playing nice for some reason",
        "tags": [
            "logging",
            "broken",
            "indexing"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3m27n7"
    },
    {
        "date": 1422550800000,
        "repository": "norch-bootstrap",
        "title": "Search-box shouldn't be hidden when small screen size",
        "text": "<p>The bootstrap responsive CSS hides the search-box when screen/browser is small. We need to figure out another way of displaying the search box when small screen real estate. </p>\n\n<p><strong>Small screen:</strong> \n<img alt=\"screen shot 2015-01-29 at 17 57 31\" src=\"https://cloud.githubusercontent.com/assets/236656/5961974/9fe765cc-a7e0-11e4-8651-345d18ab2688.png\"/> </p>\n\n<p><strong>A bit bigger:</strong> \n<img alt=\"screen shot 2015-01-29 at 18 00 17\" src=\"https://cloud.githubusercontent.com/assets/236656/5961988/b9efb76c-a7e0-11e4-8fe5-f269dc89a64c.png\"/></p>",
        "issuetype": "bug",
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/12",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-29T18:00:00+01:00",
        "teasertext": "The bootstrap responsive CSS hides the search-box when screen/browser is small. We need to figure out another way of displaying the search box when small screen real estate. \n\nSmall screen: \n \n\nA bit bigger: \n",
        "tags": [
            "size",
            "search-box",
            "small",
            "screen"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2yzvwR"
    },
    {
        "date": 1422607860000,
        "repository": "norch-indexer",
        "title": "\"norch-indexer -V\" uses hardcoded variable?",
        "text": "<p><code>$ ./norch-indexer/bin/norch-indexer -V</code> \nWill respond <code>0.0.1</code> </p>\n\n<p>but  package.json says <code>0.0.2</code>: \nhttps://github.com/fergiemcdowall/norch-indexer/blob/master/package.json#L3 </p>\n\n<p>Not a biggie, but okay to have working when debugging issues.</p>",
        "issuetype": "bug",
        "url": "https://github.com/fergiemcdowall/norch-indexer/issues/4",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-30T09:51:00+01:00",
        "teasertext": "$ ./norch-indexer/bin/norch-indexer -V \nWill respond 0.0.1 \n\nbut  package.json says 0.0.2: \nhttps://github.com/fergiemcdowall/norch-indexer/blob/master/package.json#L3 \n\nNot a biggie, but okay to have working when debugging issues.",
        "tags": [
            "norch-indexer",
            "-v",
            "hardcoded",
            "variable"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2QjJYw"
    },
    {
        "date": 1422612360000,
        "repository": "norch",
        "title": "norch stopped working after \"npm update\"",
        "text": "<p>Symlink missing for <code>leveldown</code>? Get error message trying to start norch, install suggested package (leveldown) and get same message. Running norch-stuff globally since I&#39;m not tinkering with that part of the search solution. \n<code></code>` \n$ norch </p>\n\n<p>/usr/local/lib/node<em>modules/norch/node</em>modules/search-index/node<em>modules/levelup/lib/util.js:71 \n    throw new LevelUPError(missingLevelDOWNError) \n          ^ \nLevelUPError: Could not locate LevelDOWN, try <code>npm install leveldown</code> \n    at getLevelDOWN (/usr/local/lib/node</em>modules/norch/node<em>modules/search-index/node</em>modules/levelup/lib/util.js:71:11) \n    at LevelUP.open (/usr/local/lib/node<em>modules/norch/node</em>modules/search-index/node<em>modules/levelup/lib/levelup.js:113:37) \n    at new LevelUP (/usr/local/lib/node</em>modules/norch/node<em>modules/search-index/node</em>modules/levelup/lib/levelup.js:86:8) \n    at LevelUP <a href=\"/usr/local/lib/node_modules/norch/node_modules/search-index/node_modules/levelup/lib/levelup.js:46:12\">as level</a> \n    at new module.exports (/usr/local/lib/node<em>modules/norch/node</em>modules/search-index/lib/search-index.js:42:12) \n    at new module.exports (/usr/local/lib/node<em>modules/norch/lib/norch.js:37:13) \n    at module.exports (/usr/local/lib/node</em>modules/norch/lib/norch.js:7:12) \n    at Object.&lt;anonymous&gt; (/usr/local/lib/node<em>modules/norch/bin/norch:3:27) \n    at Module.</em>compile (module.js:456:26) \n    at Object.Module._extensions..js (module.js:474:10) \n$ sudo npm install -g leveldown \nPassword: \n| </p>\n\n<blockquote><p>leveldown@1.0.1 install /usr/local/lib/node_modules/leveldown \nnode-gyp rebuild </p></blockquote>\n\n<p>  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/builder.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/db<em>impl.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/db</em>iter.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/filename.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/dbformat.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/log<em>reader.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/log</em>writer.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/memtable.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/repair.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/table<em>cache.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/version</em>edit.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/version<em>set.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/write</em>batch.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/helpers/memenv/memenv.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/table/block.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/table/block<em>builder.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/table/filter</em>block.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/table/format.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/table/iterator.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/table/merger.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/table/table.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/table/table<em>builder.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/table/two</em>level<em>iterator.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/arena.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/bloom.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/cache.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/coding.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/comparator.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/crc32c.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/env.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/filter</em>policy.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/hash.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/logging.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/options.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/status.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/port/port<em>posix.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/env</em>posix.o \n  LIBTOOL-STATIC Release/leveldb.a \n  CXX(target) Release/obj.target/snappy/deps/snappy/snappy-1.1.1/snappy-sinksource.o \n  CXX(target) Release/obj.target/snappy/deps/snappy/snappy-1.1.1/snappy-stubs-internal.o \n  CXX(target) Release/obj.target/snappy/deps/snappy/snappy-1.1.1/snappy.o \n  LIBTOOL-STATIC Release/snappy.a \n  CXX(target) Release/obj.target/leveldown/src/batch.o \n  CXX(target) Release/obj.target/leveldown/src/batch<em>async.o \n  CXX(target) Release/obj.target/leveldown/src/database.o \n  CXX(target) Release/obj.target/leveldown/src/database</em>async.o \n  CXX(target) Release/obj.target/leveldown/src/iterator.o \n  CXX(target) Release/obj.target/leveldown/src/iterator<em>async.o \n  CXX(target) Release/obj.target/leveldown/src/leveldown.o \n  CXX(target) Release/obj.target/leveldown/src/leveldown</em>async.o \n  SOLINK<em>MODULE(target) Release/leveldown.node \n  SOLINK</em>MODULE(target) Release/leveldown.node: Finished \nleveldown@1.0.1 /usr/local/lib/node_modules/leveldown \n├── bindings@1.2.1 \n├── fast-future@1.0.1 \n├── nan@1.5.3 \n└── abstract-leveldown@2.0.3 (xtend@3.0.0) \n$ norch </p>\n\n<p>/usr/local/lib/node<em>modules/norch/node</em>modules/search-index/node<em>modules/levelup/lib/util.js:71 \n    throw new LevelUPError(missingLevelDOWNError) \n          ^ \nLevelUPError: Could not locate LevelDOWN, try <code>npm install leveldown</code> \n    at getLevelDOWN (/usr/local/lib/node</em>modules/norch/node<em>modules/search-index/node</em>modules/levelup/lib/util.js:71:11) \n    at LevelUP.open (/usr/local/lib/node<em>modules/norch/node</em>modules/search-index/node<em>modules/levelup/lib/levelup.js:113:37) \n    at new LevelUP (/usr/local/lib/node</em>modules/norch/node<em>modules/search-index/node</em>modules/levelup/lib/levelup.js:86:8) \n    at LevelUP <a href=\"/usr/local/lib/node_modules/norch/node_modules/search-index/node_modules/levelup/lib/levelup.js:46:12\">as level</a> \n    at new module.exports (/usr/local/lib/node<em>modules/norch/node</em>modules/search-index/lib/search-index.js:42:12) \n    at new module.exports (/usr/local/lib/node<em>modules/norch/lib/norch.js:37:13) \n    at module.exports (/usr/local/lib/node</em>modules/norch/lib/norch.js:7:12) \n    at Object.&lt;anonymous&gt; (/usr/local/lib/node<em>modules/norch/bin/norch:3:27) \n    at Module.</em>compile (module.js:456:26) \n    at Object.Module._extensions..js (module.js:474:10) \n<code></code>`</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/70",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-01-30T11:06:00+01:00",
        "teasertext": "Symlink missing for leveldown? Get error message trying to start norch, install suggested package (leveldown) and get same message. Running norch-stuff globally since I'm not tinkering with that part of the search solution. \n` \n$ norch \n\n/usr/local/lib/nodemodules/norch/nodemodules/search-index/nodemodules/levelup/lib/util.js:71 \n    throw new LevelUPError(missingLevelDOWNError) \n          ^ \nLevelUPError: Could not locate LevelDOWN, try npm install leveldown \n    at getLevelDOWN (/usr/local/lib/nodemodules/norch/nodemodules/search-index/nodemodules/levelup/lib/util.js:71:11) \n    at LevelUP.open (/usr/local/lib/nodemodules/norch/nodemodules/search-index/nodemodules/levelup/lib/levelup.js:113:37) \n    at new LevelUP (/usr/local/lib/nodemodules/norch/nodemodules/search-index/nodemodules/levelup/lib/levelup.js:86:8) \n    at LevelUP as level \n    at new module.exports (/usr/local/lib/nodemodules/norch/nodemodules/search-index/lib/search-index.js:42:12) \n    at new module.exports (/usr/local/lib/nodemodules/norch/lib/norch.js:37:13) \n    at module.exports (/usr/local/lib/nodemodules/norch/lib/norch.js:7:12) \n    at Object.&lt;anonymous&gt; (/usr/local/lib/nodemodules/norch/bin/norch:3:27) \n    at Module.compile (module.js:456:26) \n    at Object.Module._extensions..js (module.js:474:10) \n$ sudo npm install -g leveldown \nPassword: \n| \n\nleveldown@1.0.1 install /usr/local/lib/node_modules/leveldown \nnode-gyp rebuild \n\n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/builder.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/dbimpl.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/dbiter.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/filename.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/dbformat.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/logreader.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/logwriter.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/memtable.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/repair.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/tablecache.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/versionedit.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/versionset.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/db/writebatch.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/helpers/memenv/memenv.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/table/block.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/table/blockbuilder.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/table/filterblock.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/table/format.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/table/iterator.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/table/merger.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/table/table.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/table/tablebuilder.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/table/twoleveliterator.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/arena.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/bloom.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/cache.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/coding.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/comparator.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/crc32c.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/env.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/filterpolicy.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/hash.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/logging.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/options.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/status.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/port/portposix.o \n  CXX(target) Release/obj.target/leveldb/deps/leveldb/leveldb-1.17.0/util/envposix.o \n  LIBTOOL-STATIC Release/leveldb.a \n  CXX(target) Release/obj.target/snappy/deps/snappy/snappy-1.1.1/snappy-sinksource.o \n  CXX(target) Release/obj.target/snappy/deps/snappy/snappy-1.1.1/snappy-stubs-internal.o \n  CXX(target) Release/obj.target/snappy/deps/snappy/snappy-1.1.1/snappy.o \n  LIBTOOL-STATIC Release/snappy.a \n  CXX(target) Release/obj.target/leveldown/src/batch.o \n  CXX(target) Release/obj.target/leveldown/src/batchasync.o \n  CXX(target) Release/obj.target/leveldown/src/database.o \n  CXX(target) Release/obj.target/leveldown/src/databaseasync.o \n  CXX(target) Release/obj.target/leveldown/src/iterator.o \n  CXX(target) Release/obj.target/leveldown/src/iteratorasync.o \n  CXX(target) Release/obj.target/leveldown/src/leveldown.o \n  CXX(target) Release/obj.target/leveldown/src/leveldownasync.o \n  SOLINKMODULE(target) Release/leveldown.node \n  SOLINKMODULE(target) Release/leveldown.node: Finished \nleveldown@1.0.1 /usr/local/lib/node_modules/leveldown \n├── bindings@1.2.1 \n├── fast-future@1.0.1 \n├── nan@1.5.3 \n└── abstract-leveldown@2.0.3 (xtend@3.0.0) \n$ norch \n\n/usr/local/lib/nodemodules/norch/nodemodules/search-index/nodemodules/levelup/lib/util.js:71 \n    throw new LevelUPError(missingLevelDOWNError) \n          ^ \nLevelUPError: Could not locate LevelDOWN, try npm install leveldown \n    at getLevelDOWN (/usr/local/lib/nodemodules/norch/nodemodules/search-index/nodemodules/levelup/lib/util.js:71:11) \n    at LevelUP.open (/usr/local/lib/nodemodules/norch/nodemodules/search-index/nodemodules/levelup/lib/levelup.js:113:37) \n    at new LevelUP (/usr/local/lib/nodemodules/norch/nodemodules/search-index/nodemodules/levelup/lib/levelup.js:86:8) \n    at LevelUP as level \n    at new module.exports (/usr/local/lib/nodemodules/norch/nodemodules/search-index/lib/search-index.js:42:12) \n    at new module.exports (/usr/local/lib/nodemodules/norch/lib/norch.js:37:13) \n    at module.exports (/usr/local/lib/nodemodules/norch/lib/norch.js:7:12) \n    at Object.&lt;anonymous&gt; (/usr/local/lib/nodemodules/norch/bin/norch:3:27) \n    at Module.compile (module.js:456:26) \n    at Object.Module._extensions..js (module.js:474:10) \n`",
        "tags": [
            "working",
            "update",
            "norch",
            "npm"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3dm64Z"
    },
    {
        "date": 1422805680000,
        "repository": "norch",
        "title": "Delete the entire index",
        "text": "<p>I&#39;m thinking on using norch as my primary data storage. I would simply drop the index and re-import new data on a daily basis. Is it possible to do this?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/71",
        "user": [
            "jwhscholten"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-01T16:48:00+01:00",
        "teasertext": "I'm thinking on using norch as my primary data storage. I would simply drop the index and re-import new data on a daily basis. Is it possible to do this?",
        "tags": [
            "delete",
            "entire",
            "index"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1SZuk"
    },
    {
        "date": 1422906300000,
        "repository": "norch-bootstrap",
        "title": "limiting on which fields to search in not working?",
        "text": "<p>I can&#39;t get <code>&amp;searchFields[]=text</code> to work, so I search all fields, with some unwanted results.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/13",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-02T20:45:00+01:00",
        "teasertext": "I can't get &amp;searchFields[]=text to work, so I search all fields, with some unwanted results.",
        "tags": [
            "limiting",
            "fields",
            "working",
            "search"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2QXCMA"
    },
    {
        "date": 1422953340000,
        "repository": "norch",
        "title": "Acknowledge third party modules?",
        "text": "<p>Norch consists of a lot of modules, and others create new modules that will fit into the Norch ecosystem. Maybe we should have a section in the readme for thrid-party modules, not vouching for them, but both aknowledging the effort, and help the users of Norch solving their problems?</p>",
        "issuetype": "question",
        "url": "https://github.com/fergiemcdowall/norch/issues/72",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-03T09:49:00+01:00",
        "teasertext": "Norch consists of a lot of modules, and others create new modules that will fit into the Norch ecosystem. Maybe we should have a section in the readme for thrid-party modules, not vouching for them, but both aknowledging the effort, and help the users of Norch solving their problems?",
        "tags": [
            "acknowledge",
            "party",
            "modules"
        ],
        "type": [
            "GitHub"
        ],
        "id": "R3ijm"
    },
    {
        "date": 1423071540000,
        "repository": "norch",
        "title": "Make it possible to bring up facets without specifying a search term",
        "text": "<p>In other words, facets on the whole set</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch/issues/73",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-04T18:39:00+01:00",
        "teasertext": "In other words, facets on the whole set",
        "tags": [
            "bring",
            "search",
            "term",
            "facets"
        ],
        "type": [
            "GitHub"
        ],
        "id": "puP7H"
    },
    {
        "date": 1423073580000,
        "repository": "search-index",
        "title": "Index should be smaller",
        "text": "<p>It should be possible to make the index much smaller. Try to do this.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/70",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-04T19:13:00+01:00",
        "teasertext": "It should be possible to make the index much smaller. Try to do this.",
        "tags": [
            "smaller",
            "index"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3Ce6Vb"
    },
    {
        "date": 1423234260000,
        "repository": "norch",
        "title": "There should be an \"npm start\" option",
        "text": "<p>There should be an &quot;npm start&quot; option defined in package.json -&gt; scripts</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch/issues/74",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-06T15:51:00+01:00",
        "teasertext": "There should be an &quot;npm start&quot; option defined in package.json -&gt; scripts",
        "tags": [
            "npm",
            "start",
            "option"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1EzyfJ"
    },
    {
        "date": 1423655280000,
        "repository": "norch",
        "title": "How to make it possible for Norch to listen in same port as another main application?",
        "text": "<p>This is not an issue, per se, but I&#39;m currently working with KeystoneJS, on port 3000, and I want to know how I can make Norch available for it. I&#39;m afraid I will just do something wrong if I try to move all of Norch to the main app. \nCurrently, I moved the client side of Norch (norch-app.js and norch-app-jquery.js) and I can query, but obviously there is no real server logic involved. \nThis is my Keystone index.js file. \n<code></code>`javascript \nvar fs = require(&#39;fs&#39;), \n path = require(&#39;path&#39;), \n _ = require(&#39;underscore&#39;), \n express = require(&#39;express&#39;), \n app = express(), \n http = require(&#39;http&#39;).Server(app), \n async = require(&#39;async&#39;), \n io = require(&#39;socket.io&#39;)(http), \n norch = require(&#39;norch&#39;), // This is where I require Norch. I tried to use some of the main Norch methods inside this file, but it didn&#39;t work as expected \n jade = require(&#39;jade&#39;), \n moment = require(&#39;moment&#39;), \n numeral = require(&#39;numeral&#39;), \n cloudinary = require(&#39;cloudinary&#39;), \n utils = require(&#39;keystone-utils&#39;); </p>\n\n<p>var templateCache = {}; </p>\n\n<p>/** \n <em> Don&#39;t use process.cwd() as it breaks module encapsulation \n </em> Instead, let&#39;s use module.parent if it&#39;s present, or the module itself if there is no parent (probably testing keystone directly if that&#39;s the case) \n * This way, the consuming app/module can be an embedded node<em>module and path resolutions will still work \n * (process.cwd() breaks module encapsulation if the consuming app/module is itself a node</em>module) \n */ \nvar moduleRoot = (function(<em>rootPath) { \n var parts = </em>rootPath.split(path.sep); \n parts.pop(); //get rid of /node_modules from the end of the path \n return parts.join(path.sep); \n})(module.parent ? module.parent.paths[0] : module.paths[0]); </p>\n\n<p>/** \n <em> Keystone Class \n </em> \n <em> @api public \n </em>/ </p>\n\n<p>var Keystone = function() { </p>\n\n<p> this.lists = {}; \n this.paths = {}; \n this.<em>options = { \n  &#39;name&#39;: &#39;Keystone&#39;, \n  &#39;brand&#39;: &#39;Keystone&#39;, \n  &#39;compress&#39;: true, \n  &#39;headless&#39;: false, \n  &#39;logger&#39;: &#39;:method :url :status :response-time ms&#39;, \n  &#39;auto update&#39;: false, \n  &#39;model prefix&#39;: null, \n  &#39;module root&#39;: moduleRoot \n }; \n this.</em>pre = { \n  routes: [], \n  render: [] \n }; \n this._redirects = {}; </p>\n\n<p> // expose express </p>\n\n<p> this.express = express; </p>\n\n<p> // init environment defaults </p>\n\n<p> this.set(&#39;env&#39;, process.env.NODE_ENV || &#39;development&#39;); </p>\n\n<p> this.set(&#39;port&#39;, process.env.PORT || process.env.OPENSHIFT<em>NODEJS</em>PORT); \n this.set(&#39;host&#39;, process.env.HOST || process.env.IP || process.env.OPENSHIFT<em>NODEJS</em>IP); \n this.set(&#39;listen&#39;, process.env.LISTEN); </p>\n\n<p> this.set(&#39;ssl&#39;, process.env.SSL); \n this.set(&#39;ssl port&#39;, process.env.SSL<em>PORT); \n this.set(&#39;ssl host&#39;, process.env.SSL</em>HOST || process.env.SSL<em>IP); \n this.set(&#39;ssl key&#39;, process.env.SSL</em>KEY); \n this.set(&#39;ssl cert&#39;, process.env.SSL_CERT); </p>\n\n<p> this.set(&#39;cookie secret&#39;, process.env.COOKIE_SECRET); \n this.set(&#39;cookie signin&#39;, (this.get(&#39;env&#39;) === &#39;development&#39;) ? true : false); </p>\n\n<p> this.set(&#39;embedly api key&#39;, process.env.EMBEDLY<em>API</em>KEY || process.env.EMBEDLY<em>APIKEY); \n this.set(&#39;mandrill api key&#39;, process.env.MANDRILL</em>API<em>KEY || process.env.MANDRILL</em>APIKEY); \n this.set(&#39;mandrill username&#39;, process.env.MANDRILL<em>USERNAME); \n this.set(&#39;google api key&#39;, process.env.GOOGLE</em>BROWSER<em>KEY); \n this.set(&#39;google server api key&#39;, process.env.GOOGLE</em>SERVER<em>KEY); \n this.set(&#39;ga property&#39;, process.env.GA</em>PROPERTY); \n this.set(&#39;ga domain&#39;, process.env.GA<em>DOMAIN); \n this.set(&#39;chartbeat property&#39;, process.env.CHARTBEAT</em>PROPERTY); \n this.set(&#39;chartbeat domain&#39;, process.env.CHARTBEAT<em>DOMAIN); \n this.set(&#39;allowed ip ranges&#39;, process.env.ALLOWED</em>IP_RANGES); </p>\n\n<p> if (process.env.S3<em>BUCKET &amp;&amp; process.env.S3</em>KEY &amp;&amp; process.env.S3<em>SECRET) { \n  this.set(&#39;s3 config&#39;, { bucket: process.env.S3</em>BUCKET, key: process.env.S3<em>KEY, secret: process.env.S3</em>SECRET, region: process.env.S3_REGION }); \n } </p>\n\n<p> if (process.env.AZURE<em>STORAGE</em>ACCOUNT &amp;&amp; process.env.AZURE<em>STORAGE</em>ACCESS<em>KEY) { \n  this.set(&#39;azurefile config&#39;, { account: process.env.AZURE</em>STORAGE<em>ACCOUNT, key: process.env.AZURE</em>STORAGE<em>ACCESS</em>KEY }); \n } </p>\n\n<p> if (process.env.CLOUDINARY<em>URL) { \n  // process.env.CLOUDINARY</em>URL is processed by the cloudinary package when this is set \n  this.set(&#39;cloudinary config&#39;, true); \n } </p>\n\n<p> // Attach middleware packages, bound to this instance \n this.middleware = { \n  api: require(&#39;./lib/middleware/api&#39;)(this), \n  cors: require(&#39;./lib/middleware/cors&#39;)(this) \n }; </p>\n\n<p>}; </p>\n\n<p>_.extend(Keystone.prototype, require(&#39;./lib/core/options&#39;)()); </p>\n\n<p>io.on(&#39;connection&#39;, function(socket){ \n  socket.on(&#39;chat message&#39;, function(msg){ \n    console.log(&#39;message: &#39; + msg); \n  }); \n}); </p>\n\n<p>/** \n <em> Registers a pre-event handler. \n </em> \n <em> Valid events include: \n </em> - <code>routes</code> - calls the function before any routes are matched, after all other middleware \n <em> \n </em> @param {String} event \n <em> @param {Function} function to call \n </em> @api public \n */ </p>\n\n<p>Keystone.prototype.pre = function(event, fn) { \n if (!this.<em>pre[event]) { \n  throw new Error(&#39;keystone.pre() Error: event &#39; + event + &#39; does not exist.&#39;); \n } \n this.</em>pre[event].push(fn); \n return this; \n}; </p>\n\n<p>Keystone.prototype.prefixModel = function (key) { \n var modelPrefix = this.get(&#39;model prefix&#39;); </p>\n\n<p> if (modelPrefix) \n  key = modelPrefix + &#39;_&#39; + key; </p>\n\n<p> return require(&#39;mongoose/lib/utils&#39;).toCollectionName(key); \n}; </p>\n\n<p>/<em> Attach core functionality to Keystone.prototype </em>/ \nKeystone.prototype.init = require(&#39;./lib/core/init&#39;); \nKeystone.prototype.initNav = require(&#39;./lib/core/initNav&#39;); \nKeystone.prototype.connect = require(&#39;./lib/core/connect&#39;); \nKeystone.prototype.start = require(&#39;./lib/core/start&#39;); \nKeystone.prototype.mount = require(&#39;./lib/core/mount&#39;); \nKeystone.prototype.routes = require(&#39;./lib/core/routes&#39;); \nKeystone.prototype.static = require(&#39;./lib/core/static&#39;); \nKeystone.prototype.render = require(&#39;./lib/core/render&#39;); \nKeystone.prototype.importer = require(&#39;./lib/core/importer&#39;); \nKeystone.prototype.createItems = require(&#39;./lib/core/createItems&#39;); \nKeystone.prototype.populateRelated = require(&#39;./lib/core/populateRelated&#39;); \nKeystone.prototype.redirect = require(&#39;./lib/core/redirect&#39;); \nKeystone.prototype.list = require(&#39;./lib/core/list&#39;); \nKeystone.prototype.getOrphanedLists = require(&#39;./lib/core/getOrphanedLists&#39;); \nKeystone.prototype.bindEmailTestRoutes = require(&#39;./lib/core/bindEmailTestRoutes&#39;); \nKeystone.prototype.wrapHTMLError = require(&#39;./lib/core/wrapHTMLError&#39;); </p>\n\n<p>/** \n <em> The exports object is an instance of Keystone. \n </em> \n <em> @api public \n </em>/ </p>\n\n<p>var keystone = module.exports = exports = new Keystone(); </p>\n\n<p>// Expose modules and Classes \nkeystone.utils = utils; \nkeystone.Keystone = Keystone; \nkeystone.content = require(&#39;./lib/content&#39;); \nkeystone.List = require(&#39;./lib/list&#39;); \nkeystone.Field = require(&#39;./fields/types/Type&#39;); \nkeystone.Field.Types = require(&#39;./lib/fieldTypes&#39;); \nkeystone.View = require(&#39;./lib/view&#39;); \nkeystone.Email = require(&#39;./lib/email&#39;); </p>\n\n<p>keystone.security = { \n csrf: require(&#39;./lib/security/csrf&#39;) \n}; </p>\n\n<p>/** \n <em> returns all .js modules (recursively) in the path specified, relative \n </em> to the module root (where the keystone project is being consumed from). \n <em> \n </em> ####Example: \n <em> \n </em>     var models = keystone.import(&#39;models&#39;); \n <em> \n </em> @param {String} dirname \n <em> @api public \n </em>/ </p>\n\n<p>Keystone.prototype.import = function(dirname) { </p>\n\n<p> var initialPath = path.join(this.get(&#39;module root&#39;), dirname); </p>\n\n<p> var doImport = function(fromPath) { </p>\n\n<p>  var imported = {}; </p>\n\n<p>  fs.readdirSync(fromPath).forEach(function(name) { </p>\n\n<p>   var fsPath = path.join(fromPath, name), \n   info = fs.statSync(fsPath); </p>\n\n<p>   // recur \n   if (info.isDirectory()) { \n    imported[name] = doImport(fsPath); \n   } else { \n    // only import files that we can <code>require</code> \n    var ext  = path.extname(name); \n    var base = path.basename(name, ext); \n    if (require.extensions[ext]) { \n     imported[base] = require(fsPath); \n    } \n   } </p>\n\n<p>  }); </p>\n\n<p>  return imported; \n }; </p>\n\n<p> return doImport(initialPath); \n}; </p>\n\n<p>/** \n <em> Applies Application updates \n </em>/ </p>\n\n<p>Keystone.prototype.applyUpdates = function(callback) { \n require(&#39;./lib/updates&#39;).apply(callback); \n}; </p>\n\n<p>/** \n <em> Logs a configuration error to the console \n </em> \n <em> @api public \n </em>/ </p>\n\n<p>Keystone.prototype.console = {}; \nKeystone.prototype.console.err = function(type, msg) { </p>\n\n<p> if (keystone.get(&#39;logger&#39;)) { \n  var dashes = &#39;\\n------------------------------------------------\\n&#39;; \n  console.log(dashes + &#39;KeystoneJS: &#39; + type + &#39;:\\n\\n&#39; + msg + dashes); \n } </p>\n\n<p>}; </p>\n\n<p>/** \n <em> Keystone version \n </em> \n <em> @api public \n </em>/ </p>\n\n<p>keystone.version = require(&#39;./package.json&#39;).version; </p>\n\n<p>// Expose Modules \nkeystone.session = require(&#39;./lib/session&#39;); \n<code></code>`</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/75",
        "user": [
            "vfermino"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-11T12:48:00+01:00",
        "teasertext": "This is not an issue, per se, but I'm currently working with KeystoneJS, on port 3000, and I want to know how I can make Norch available for it. I'm afraid I will just do something wrong if I try to move all of Norch to the main app. \nCurrently, I moved the client side of Norch (norch-app.js and norch-app-jquery.js) and I can query, but obviously there is no real server logic involved. \nThis is my Keystone index.js file. \n`javascript \nvar fs = require('fs'), \n path = require('path'), \n _ = require('underscore'), \n express = require('express'), \n app = express(), \n http = require('http').Server(app), \n async = require('async'), \n io = require('socket.io')(http), \n norch = require('norch'), // This is where I require Norch. I tried to use some of the main Norch methods inside this file, but it didn't work as expected \n jade = require('jade'), \n moment = require('moment'), \n numeral = require('numeral'), \n cloudinary = require('cloudinary'), \n utils = require('keystone-utils'); \n\nvar templateCache = {}; \n\n/** \n  Don't use process.cwd() as it breaks module encapsulation \n  Instead, let's use module.parent if it's present, or the module itself if there is no parent (probably testing keystone directly if that's the case) \n * This way, the consuming app/module can be an embedded nodemodule and path resolutions will still work \n * (process.cwd() breaks module encapsulation if the consuming app/module is itself a nodemodule) \n */ \nvar moduleRoot = (function(rootPath) { \n var parts = rootPath.split(path.sep); \n parts.pop(); //get rid of /node_modules from the end of the path \n return parts.join(path.sep); \n})(module.parent ? module.parent.paths[0] : module.paths[0]); \n\n/** \n  Keystone Class \n  \n  @api public \n / \n\nvar Keystone = function() { \n\n this.lists = {}; \n this.paths = {}; \n this.options = { \n  'name': 'Keystone', \n  'brand': 'Keystone', \n  'compress': true, \n  'headless': false, \n  'logger': ':method :url :status :response-time ms', \n  'auto update': false, \n  'model prefix': null, \n  'module root': moduleRoot \n }; \n this.pre = { \n  routes: [], \n  render: [] \n }; \n this._redirects = {}; \n\n // expose express \n\n this.express = express; \n\n // init environment defaults \n\n this.set('env', process.env.NODE_ENV || 'development'); \n\n this.set('port', process.env.PORT || process.env.OPENSHIFTNODEJSPORT); \n this.set('host', process.env.HOST || process.env.IP || process.env.OPENSHIFTNODEJSIP); \n this.set('listen', process.env.LISTEN); \n\n this.set('ssl', process.env.SSL); \n this.set('ssl port', process.env.SSLPORT); \n this.set('ssl host', process.env.SSLHOST || process.env.SSLIP); \n this.set('ssl key', process.env.SSLKEY); \n this.set('ssl cert', process.env.SSL_CERT); \n\n this.set('cookie secret', process.env.COOKIE_SECRET); \n this.set('cookie signin', (this.get('env') === 'development') ? true : false); \n\n this.set('embedly api key', process.env.EMBEDLYAPIKEY || process.env.EMBEDLYAPIKEY); \n this.set('mandrill api key', process.env.MANDRILLAPIKEY || process.env.MANDRILLAPIKEY); \n this.set('mandrill username', process.env.MANDRILLUSERNAME); \n this.set('google api key', process.env.GOOGLEBROWSERKEY); \n this.set('google server api key', process.env.GOOGLESERVERKEY); \n this.set('ga property', process.env.GAPROPERTY); \n this.set('ga domain', process.env.GADOMAIN); \n this.set('chartbeat property', process.env.CHARTBEATPROPERTY); \n this.set('chartbeat domain', process.env.CHARTBEATDOMAIN); \n this.set('allowed ip ranges', process.env.ALLOWEDIP_RANGES); \n\n if (process.env.S3BUCKET &amp;&amp; process.env.S3KEY &amp;&amp; process.env.S3SECRET) { \n  this.set('s3 config', { bucket: process.env.S3BUCKET, key: process.env.S3KEY, secret: process.env.S3SECRET, region: process.env.S3_REGION }); \n } \n\n if (process.env.AZURESTORAGEACCOUNT &amp;&amp; process.env.AZURESTORAGEACCESSKEY) { \n  this.set('azurefile config', { account: process.env.AZURESTORAGEACCOUNT, key: process.env.AZURESTORAGEACCESSKEY }); \n } \n\n if (process.env.CLOUDINARYURL) { \n  // process.env.CLOUDINARYURL is processed by the cloudinary package when this is set \n  this.set('cloudinary config', true); \n } \n\n // Attach middleware packages, bound to this instance \n this.middleware = { \n  api: require('./lib/middleware/api')(this), \n  cors: require('./lib/middleware/cors')(this) \n }; \n\n}; \n\n_.extend(Keystone.prototype, require('./lib/core/options')()); \n\nio.on('connection', function(socket){ \n  socket.on('chat message', function(msg){ \n    console.log('message: ' + msg); \n  }); \n}); \n\n/** \n  Registers a pre-event handler. \n  \n  Valid events include: \n  - routes - calls the function before any routes are matched, after all other middleware \n  \n  @param {String} event \n  @param {Function} function to call \n  @api public \n */ \n\nKeystone.prototype.pre = function(event, fn) { \n if (!this.pre[event]) { \n  throw new Error('keystone.pre() Error: event ' + event + ' does not exist.'); \n } \n this.pre[event].push(fn); \n return this; \n}; \n\nKeystone.prototype.prefixModel = function (key) { \n var modelPrefix = this.get('model prefix'); \n\n if (modelPrefix) \n  key = modelPrefix + '_' + key; \n\n return require('mongoose/lib/utils').toCollectionName(key); \n}; \n\n/ Attach core functionality to Keystone.prototype / \nKeystone.prototype.init = require('./lib/core/init'); \nKeystone.prototype.initNav = require('./lib/core/initNav'); \nKeystone.prototype.connect = require('./lib/core/connect'); \nKeystone.prototype.start = require('./lib/core/start'); \nKeystone.prototype.mount = require('./lib/core/mount'); \nKeystone.prototype.routes = require('./lib/core/routes'); \nKeystone.prototype.static = require('./lib/core/static'); \nKeystone.prototype.render = require('./lib/core/render'); \nKeystone.prototype.importer = require('./lib/core/importer'); \nKeystone.prototype.createItems = require('./lib/core/createItems'); \nKeystone.prototype.populateRelated = require('./lib/core/populateRelated'); \nKeystone.prototype.redirect = require('./lib/core/redirect'); \nKeystone.prototype.list = require('./lib/core/list'); \nKeystone.prototype.getOrphanedLists = require('./lib/core/getOrphanedLists'); \nKeystone.prototype.bindEmailTestRoutes = require('./lib/core/bindEmailTestRoutes'); \nKeystone.prototype.wrapHTMLError = require('./lib/core/wrapHTMLError'); \n\n/** \n  The exports object is an instance of Keystone. \n  \n  @api public \n / \n\nvar keystone = module.exports = exports = new Keystone(); \n\n// Expose modules and Classes \nkeystone.utils = utils; \nkeystone.Keystone = Keystone; \nkeystone.content = require('./lib/content'); \nkeystone.List = require('./lib/list'); \nkeystone.Field = require('./fields/types/Type'); \nkeystone.Field.Types = require('./lib/fieldTypes'); \nkeystone.View = require('./lib/view'); \nkeystone.Email = require('./lib/email'); \n\nkeystone.security = { \n csrf: require('./lib/security/csrf') \n}; \n\n/** \n  returns all .js modules (recursively) in the path specified, relative \n  to the module root (where the keystone project is being consumed from). \n  \n  ####Example: \n  \n      var models = keystone.import('models'); \n  \n  @param {String} dirname \n  @api public \n / \n\nKeystone.prototype.import = function(dirname) { \n\n var initialPath = path.join(this.get('module root'), dirname); \n\n var doImport = function(fromPath) { \n\n  var imported = {}; \n\n  fs.readdirSync(fromPath).forEach(function(name) { \n\n   var fsPath = path.join(fromPath, name), \n   info = fs.statSync(fsPath); \n\n   // recur \n   if (info.isDirectory()) { \n    imported[name] = doImport(fsPath); \n   } else { \n    // only import files that we can require \n    var ext  = path.extname(name); \n    var base = path.basename(name, ext); \n    if (require.extensions[ext]) { \n     imported[base] = require(fsPath); \n    } \n   } \n\n  }); \n\n  return imported; \n }; \n\n return doImport(initialPath); \n}; \n\n/** \n  Applies Application updates \n / \n\nKeystone.prototype.applyUpdates = function(callback) { \n require('./lib/updates').apply(callback); \n}; \n\n/** \n  Logs a configuration error to the console \n  \n  @api public \n / \n\nKeystone.prototype.console = {}; \nKeystone.prototype.console.err = function(type, msg) { \n\n if (keystone.get('logger')) { \n  var dashes = '\\n------------------------------------------------\\n'; \n  console.log(dashes + 'KeystoneJS: ' + type + ':\\n\\n' + msg + dashes); \n } \n\n}; \n\n/** \n  Keystone version \n  \n  @api public \n / \n\nkeystone.version = require('./package.json').version; \n\n// Expose Modules \nkeystone.session = require('./lib/session'); \n`",
        "tags": [
            "make",
            "norch",
            "port",
            "main"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3qcfwr"
    },
    {
        "date": 1423759740000,
        "repository": "norch",
        "title": "Relevancy debug mode",
        "text": "<p>Possibility to show calculated relevancy value. Both tf-idf and boosts in different fields.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch/issues/76",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-12T17:49:00+01:00",
        "teasertext": "Possibility to show calculated relevancy value. Both tf-idf and boosts in different fields.",
        "tags": [
            "debug",
            "mode",
            "relevancy"
        ],
        "type": [
            "GitHub"
        ],
        "id": "28TtgM"
    },
    {
        "date": 1423995420000,
        "repository": "norch-bootstrap",
        "title": "query in URL not reflected in search box",
        "text": "<p>If you type a query in the URL field of the browser, the query is not shown in the search box.</p>",
        "issuetype": "bug,enhancement",
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/14",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-15T11:17:00+01:00",
        "teasertext": "If you type a query in the URL field of the browser, the query is not shown in the search box.",
        "tags": [
            "reflected",
            "box",
            "search",
            "query"
        ],
        "type": [
            "GitHub"
        ],
        "id": "C6BBS"
    },
    {
        "date": 1424258280000,
        "repository": "norch",
        "title": "Unable to search for all documents (?q=*)",
        "text": "<p>After starting Norch and initialising the index, general searching works fine: </p>\n\n<p><code>curl http://localhost:3030/search?q=&lt;term&gt;</code> </p>\n\n<p>but, contrary to the docs, searching for all items returns an empty result: </p>\n\n<p><code>curl http://localhost:3030/search?q=*</code> </p>\n\n<p>Norch (started with -l silly) logs the following: </p>\n\n<p><code>js \n{ query: { &#39;*&#39;: [ &#39;*&#39; ] }, offset: 0, pageSize: 10 } \n</code> \n<code>console \nGET /search?q=* 304 - - 13.778 ms \n</code></p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/77",
        "user": [
            "jstclair"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-18T12:18:00+01:00",
        "teasertext": "After starting Norch and initialising the index, general searching works fine: \n\ncurl http://localhost:3030/search?q=&lt;term&gt; \n\nbut, contrary to the docs, searching for all items returns an empty result: \n\ncurl http://localhost:3030/search?q=* \n\nNorch (started with -l silly) logs the following: \n\njs \n{ query: { '*': [ '*' ] }, offset: 0, pageSize: 10 } \n \nconsole \nGET /search?q=* 304 - - 13.778 ms \n",
        "tags": [
            "unable",
            "search",
            "documents",
            "q=*"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4f0np2"
    },
    {
        "date": 1424258580000,
        "repository": "norch",
        "title": "Pass CORS as parameter",
        "text": "<p>Just a suggestion: you&#39;ve hard-coded the CORS header, but it would probably be better to pass (an array of addresses) via the command-line. Either: </p>\n\n<ul><li>default the array to localhost:8000 (and keep the current behavior), or  </li><li>if no CORS endpoints are passed (array is empty), don&#39;t initialise CORS </li></ul>\n\n<p>(I&#39;m sure this is related to your Angular demo - normally, wouldn&#39;t have noticed, but we proxy our local app running on 8000 via browser-sync running on 3000, so it blew up)</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch/issues/78",
        "user": [
            "jstclair"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-18T12:23:00+01:00",
        "teasertext": "Just a suggestion: you've hard-coded the CORS header, but it would probably be better to pass (an array of addresses) via the command-line. Either: \n\ndefault the array to localhost:8000 (and keep the current behavior), or  if no CORS endpoints are passed (array is empty), don't initialise CORS \n\n(I'm sure this is related to your Angular demo - normally, wouldn't have noticed, but we proxy our local app running on 8000 via browser-sync running on 3000, so it blew up)",
        "tags": [
            "cors",
            "parameter",
            "pass"
        ],
        "type": [
            "GitHub"
        ],
        "id": "Kp1PZ"
    },
    {
        "date": 1424278920000,
        "repository": "norch",
        "title": "Geographical proximity filtering",
        "text": "<p>An easy, and good enough, way to do this could be within a square defined by two geographical points (top,left and bottom,right). </p>\n\n<p>Guess this could be done similar to what we think the date/time-navigator could work: \nhttps://github.com/fergiemcdowall/norch/issues/65 </p>\n\n<p>A two-field range navigator.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/79",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-18T18:02:00+01:00",
        "teasertext": "An easy, and good enough, way to do this could be within a square defined by two geographical points (top,left and bottom,right). \n\nGuess this could be done similar to what we think the date/time-navigator could work: \nhttps://github.com/fergiemcdowall/norch/issues/65 \n\nA two-field range navigator.",
        "tags": [
            "proximity",
            "filtering",
            "geographical"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1ASZ7M"
    },
    {
        "date": 1424279040000,
        "repository": "norch",
        "title": "Geographical proximity sorting",
        "text": "<p>Not strictly needed for the https://github.com/fergiemcdowall/norch/issues/79 , but good to have.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/80",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-18T18:04:00+01:00",
        "teasertext": "Not strictly needed for the https://github.com/fergiemcdowall/norch/issues/79 , but good to have.",
        "tags": [
            "geographical",
            "proximity",
            "sorting"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1sEa8a"
    },
    {
        "date": 1424346720000,
        "repository": "norch-fetch",
        "title": "Cannot get norch-fetch to fetch/index anything",
        "text": "<p>Running the command returns immediately with undefined; Debugging shows it seems to fail around the initial get. Tried on both windows 10 &amp; OSX platforms.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch-fetch/issues/16",
        "user": [
            "stephenwil"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-19T12:52:00+01:00",
        "teasertext": "Running the command returns immediately with undefined; Debugging shows it seems to fail around the initial get. Tried on both windows 10 &amp; OSX platforms.",
        "tags": [
            "norch-fetch",
            "fetch/index"
        ],
        "type": [
            "GitHub"
        ],
        "id": "10av0f"
    },
    {
        "date": 1424335560000,
        "repository": "search-index",
        "title": "Multicore processing",
        "text": "<p>Make the mapreduce more powerful by using multicore functionality where available </p>\n\n<p>https://nodejs.org/docs/v0.12.0/api/cluster.html </p>\n\n<p>http://blog.carbonfive.com/2014/02/28/taking-advantage-of-multi-processor-environments-in-node-js/</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/71",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-19T09:46:00+01:00",
        "teasertext": "Make the mapreduce more powerful by using multicore functionality where available \n\nhttps://nodejs.org/docs/v0.12.0/api/cluster.html \n\nhttp://blog.carbonfive.com/2014/02/28/taking-advantage-of-multi-processor-environments-in-node-js/",
        "tags": [
            "processing",
            "multicore"
        ],
        "type": [
            "GitHub"
        ],
        "id": "232YEs"
    },
    {
        "date": 1424519880000,
        "repository": "norch-fetch",
        "title": "Importing npm module 'colors', but not using it",
        "text": "<p>Hi, \n Noticed you are missing a <em>var colors = require(&#39;colors&#39;);</em> to enable the coloured reporting. </p>\n\n<p>Thanks</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch-fetch/issues/17",
        "user": [
            "stephenwil"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-21T12:58:00+01:00",
        "teasertext": "Hi, \n Noticed you are missing a var colors = require('colors'); to enable the coloured reporting. \n\nThanks",
        "tags": [
            "importing",
            "npm",
            "module",
            "colors'"
        ],
        "type": [
            "GitHub"
        ],
        "id": "zvceQ"
    },
    {
        "date": 1424598120000,
        "repository": "norch-document-processor",
        "title": "Allow for adapters from outside of ./adapters",
        "text": "<p>:)</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch-document-processor/pull/7",
        "user": [
            "benbaker"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-22T10:42:00+01:00",
        "teasertext": ":)",
        "tags": [
            "adapters",
            "/adapters"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1XoA1K"
    },
    {
        "date": 1424860140000,
        "repository": "norch",
        "title": "Can't install norch",
        "text": "<p>Trying to install norch, but it fails. It&#39;s OSX and I have started Xcode (build-stuff) beforehand. Is this a bug within norch or something I&#39;ve f<strong></strong>* up installing/re-installing node.js and npm? </p>\n\n<p><code></code>`consol \n$ npm install norch \nnpm WARN package.json norch-bootstrap@0.0.6 No repository field. \n\\ </p>\n\n<blockquote><p>leveldown@0.10.4 install /Users/eklem/node<em>modules/norch/node</em>modules/search-index/node_modules/leveldown \nnode-gyp rebuild </p></blockquote>\n\n<p>child<em>process: customFds option is deprecated, use stdio instead. \nmake: printf: Resource temporarily unavailable \nmake: *** [Release/obj.target/leveldb/deps/leveldb/leveldb-1.14.0/db/builder.o] Error 1 \ngyp ERR! build error \ngyp ERR! stack Error: <code>make</code> failed with exit code: 2 \ngyp ERR! stack     at ChildProcess.onExit (/usr/local/lib/node</em>modules/npm/node<em>modules/node-gyp/lib/build.js:267:23) \ngyp ERR! stack     at ChildProcess.emit (events.js:110:17) \ngyp ERR! stack     at Process.ChildProcess.</em>handle.onexit (child<em>process.js:1067:12) \ngyp ERR! System Darwin 14.1.0 \ngyp ERR! command &quot;node&quot; &quot;/usr/local/lib/node</em>modules/npm/node<em>modules/node-gyp/bin/node-gyp.js&quot; &quot;rebuild&quot; \ngyp ERR! cwd /Users/eklem/node</em>modules/norch/node<em>modules/search-index/node</em>modules/leveldown \ngyp ERR! node -v v0.12.0 \ngyp ERR! node-gyp -v v1.0.2 \ngyp ERR! not ok \nnpm ERR! Darwin 14.1.0 \nnpm ERR! argv &quot;node&quot; &quot;/usr/local/bin/npm&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! node v0.12.0 \nnpm ERR! npm  v2.6.0 \nnpm ERR! code ELIFECYCLE </p>\n\n<p>npm ERR! leveldown@0.10.4 install: <code>node-gyp rebuild</code> \nnpm ERR! Exit status 1 \nnpm ERR! \nnpm ERR! Failed at the leveldown@0.10.4 install script &#39;node-gyp rebuild&#39;. \nnpm ERR! This is most likely a problem with the leveldown package, \nnpm ERR! not with npm itself. \nnpm ERR! Tell the author that this fails on your system: \nnpm ERR!     node-gyp rebuild \nnpm ERR! You can get their info via: \nnpm ERR!     npm owner ls leveldown \nnpm ERR! There is likely additional logging output above. </p>\n\n<p>npm ERR! Please include the following file with any support request: \nnpm ERR!     /Users/eklem/npm-debug.log \n<code></code>`</p>",
        "issuetype": "question",
        "url": "https://github.com/fergiemcdowall/norch/issues/82",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-25T11:29:00+01:00",
        "teasertext": "Trying to install norch, but it fails. It's OSX and I have started Xcode (build-stuff) beforehand. Is this a bug within norch or something I've f* up installing/re-installing node.js and npm? \n\n`consol \n$ npm install norch \nnpm WARN package.json norch-bootstrap@0.0.6 No repository field. \n\\ \n\nleveldown@0.10.4 install /Users/eklem/nodemodules/norch/nodemodules/search-index/node_modules/leveldown \nnode-gyp rebuild \n\nchildprocess: customFds option is deprecated, use stdio instead. \nmake: printf: Resource temporarily unavailable \nmake: *** [Release/obj.target/leveldb/deps/leveldb/leveldb-1.14.0/db/builder.o] Error 1 \ngyp ERR! build error \ngyp ERR! stack Error: make failed with exit code: 2 \ngyp ERR! stack     at ChildProcess.onExit (/usr/local/lib/nodemodules/npm/nodemodules/node-gyp/lib/build.js:267:23) \ngyp ERR! stack     at ChildProcess.emit (events.js:110:17) \ngyp ERR! stack     at Process.ChildProcess.handle.onexit (childprocess.js:1067:12) \ngyp ERR! System Darwin 14.1.0 \ngyp ERR! command &quot;node&quot; &quot;/usr/local/lib/nodemodules/npm/nodemodules/node-gyp/bin/node-gyp.js&quot; &quot;rebuild&quot; \ngyp ERR! cwd /Users/eklem/nodemodules/norch/nodemodules/search-index/nodemodules/leveldown \ngyp ERR! node -v v0.12.0 \ngyp ERR! node-gyp -v v1.0.2 \ngyp ERR! not ok \nnpm ERR! Darwin 14.1.0 \nnpm ERR! argv &quot;node&quot; &quot;/usr/local/bin/npm&quot; &quot;install&quot; &quot;norch&quot; \nnpm ERR! node v0.12.0 \nnpm ERR! npm  v2.6.0 \nnpm ERR! code ELIFECYCLE \n\nnpm ERR! leveldown@0.10.4 install: node-gyp rebuild \nnpm ERR! Exit status 1 \nnpm ERR! \nnpm ERR! Failed at the leveldown@0.10.4 install script 'node-gyp rebuild'. \nnpm ERR! This is most likely a problem with the leveldown package, \nnpm ERR! not with npm itself. \nnpm ERR! Tell the author that this fails on your system: \nnpm ERR!     node-gyp rebuild \nnpm ERR! You can get their info via: \nnpm ERR!     npm owner ls leveldown \nnpm ERR! There is likely additional logging output above. \n\nnpm ERR! Please include the following file with any support request: \nnpm ERR!     /Users/eklem/npm-debug.log \n`",
        "tags": [
            "norch",
            "install"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3AoUuP"
    },
    {
        "date": 1424870040000,
        "repository": "search-index",
        "title": "weights don't work",
        "text": "<p>Weights don&#39;t seem to work. \ni created a simple testcase. My test docs look like this: </p>\n\n<pre><code>[ </code></pre>\n\n<p> { \n  &quot;id&quot;:&quot;1&quot;, \n  &quot;title&quot;:&quot;title&quot;, \n  &quot;body&quot;:&quot;test&quot; \n }, \n { \n  &quot;id&quot;:&quot;2&quot;, \n  &quot;title&quot;:&quot;test&quot;, \n  &quot;body&quot;:&quot;body&quot; \n } \n    ]; </p>\n\n<p>once i have the word test in the body, and once in the title. when i now search with: </p>\n\n<pre><code>var q={ \n&quot;query&quot;: {&quot;*&quot;:[&quot;test&quot;]}, \n&quot;weight&quot;: {&quot;title&quot;: [&quot;100&quot;]} \n} </code></pre>\n\n<p>i get the result: </p>\n\n<pre><code> [ \n  {id:1, score:0.5, document:[object]}, \n  {id:2, score:0.5, document:[object]} \n] </code></pre>\n\n<p>I get the same result when i search for <code>&quot;weight&quot;:{&quot;body&quot;:[&quot;100&quot;]}</code> or don&#39;t use weight at all. \nAm i missing something or are weights broken somehow?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/72",
        "user": [
            "Holger-Will"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-25T14:14:00+01:00",
        "teasertext": "Weights don't seem to work. \ni created a simple testcase. My test docs look like this: \n\n[ \n\n { \n  &quot;id&quot;:&quot;1&quot;, \n  &quot;title&quot;:&quot;title&quot;, \n  &quot;body&quot;:&quot;test&quot; \n }, \n { \n  &quot;id&quot;:&quot;2&quot;, \n  &quot;title&quot;:&quot;test&quot;, \n  &quot;body&quot;:&quot;body&quot; \n } \n    ]; \n\nonce i have the word test in the body, and once in the title. when i now search with: \n\nvar q={ \n&quot;query&quot;: {&quot;*&quot;:[&quot;test&quot;]}, \n&quot;weight&quot;: {&quot;title&quot;: [&quot;100&quot;]} \n} \n\ni get the result: \n\n [ \n  {id:1, score:0.5, document:[object]}, \n  {id:2, score:0.5, document:[object]} \n] \n\nI get the same result when i search for &quot;weight&quot;:{&quot;body&quot;:[&quot;100&quot;]} or don't use weight at all. \nAm i missing something or are weights broken somehow?",
        "tags": [
            "work",
            "weights"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2B60pl"
    },
    {
        "date": 1424872560000,
        "repository": "norch-indexer",
        "title": "Add -e <endpoint> to example?",
        "text": "<p>Can&#39;t do it my self, since I don&#39;t understand it fully. </p>\n\n<p><code>-e, --endpoint &lt;endpoint&gt; </code> \nto this one \n<code>$ norch-indexer -d testdata/ -f places,topics,organisations</code></p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch-indexer/issues/5",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-25T14:56:00+01:00",
        "teasertext": "Can't do it my self, since I don't understand it fully. \n\n-e, --endpoint &lt;endpoint&gt;  \nto this one \n$ norch-indexer -d testdata/ -f places,topics,organisations",
        "tags": [
            "add",
            "-e"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2KYaKV"
    },
    {
        "date": 1424874000000,
        "repository": "search-index",
        "title": "make names of variables fit in first example",
        "text": null,
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/73",
        "user": [
            "Holger-Will"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-25T15:20:00+01:00",
        "teasertext": "null",
        "tags": [
            "make",
            "names",
            "variables",
            "fit"
        ],
        "type": [
            "GitHub"
        ],
        "id": "d0tBC"
    },
    {
        "date": 1424874840000,
        "repository": "search-index",
        "title": "fix name in matcher example",
        "text": null,
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/74",
        "user": [
            "Holger-Will"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-25T15:34:00+01:00",
        "teasertext": "null",
        "tags": [
            "fix",
            "matcher"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2ZMKj1"
    },
    {
        "date": 1424938140000,
        "repository": "norch-indexer",
        "title": "Choose to only index a file instead of the whole directory?",
        "text": "<p>Today we have <code>-d ./somedirectory/</code> \nFor the search solution I&#39;m working on, I have several sources, giving me several .json-files, that are updated every now and then. I would like to only index the ones that are updated, and not all, all the time. </p>\n\n<p>Could we have something like<code>-f somefile.json</code> in addition. That would make it much more flexible. Maybe even cater for wildcard matching like <code>-f somefile*.json</code>?</p>",
        "issuetype": "enhancement,question",
        "url": "https://github.com/fergiemcdowall/norch-indexer/issues/6",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-26T09:09:00+01:00",
        "teasertext": "Today we have -d ./somedirectory/ \nFor the search solution I'm working on, I have several sources, giving me several .json-files, that are updated every now and then. I would like to only index the ones that are updated, and not all, all the time. \n\nCould we have something like-f somefile.json in addition. That would make it much more flexible. Maybe even cater for wildcard matching like -f somefile*.json?",
        "tags": [
            "choose",
            "file",
            "directory",
            "index"
        ],
        "type": [
            "GitHub"
        ],
        "id": "XjFCQ"
    },
    {
        "date": 1424963220000,
        "repository": "search-index",
        "title": "Issues with Umlaute",
        "text": "<p>Words with umlaute in them such as &quot;Gerät&quot; do not get indexed correctly. \nThe word &quot;Gerät&quot; for example is indexed as &quot;Ger&quot;, breaking off at &quot;ä&quot;. \nI&#39;m pretty sure my strings are utf-8...<br/>Any tips how to get them to work properly?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/75",
        "user": [
            "Holger-Will"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-26T16:07:00+01:00",
        "teasertext": "Words with umlaute in them such as &quot;Gerät&quot; do not get indexed correctly. \nThe word &quot;Gerät&quot; for example is indexed as &quot;Ger&quot;, breaking off at &quot;ä&quot;. \nI'm pretty sure my strings are utf-8...Any tips how to get them to work properly?",
        "tags": [
            "issues",
            "umlaute"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1OeOH1"
    },
    {
        "date": 1424965080000,
        "repository": "norch",
        "title": "Start using milestones",
        "text": "<p>So, we should start using milestones and add issues to each of them? Then it&#39;s easier to show users/lurkers/developers that stuff is happening, and what that stuff consists of.</p>",
        "issuetype": "question",
        "url": "https://github.com/fergiemcdowall/norch/issues/83",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-26T16:38:00+01:00",
        "teasertext": "So, we should start using milestones and add issues to each of them? Then it's easier to show users/lurkers/developers that stuff is happening, and what that stuff consists of.",
        "tags": [
            "start",
            "milestones"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2kimVF"
    },
    {
        "date": 1425017160000,
        "repository": "norch-bootstrap",
        "title": "Better html/css template",
        "text": "<p>I think we need a better default search template that will showcase the features better.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/15",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-02-27T07:06:00+01:00",
        "teasertext": "I think we need a better default search template that will showcase the features better.",
        "tags": [
            "html/css",
            "template"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4CiB91"
    },
    {
        "date": 1425017280000,
        "repository": "norch-bootstrap",
        "title": "More search templates to choose from",
        "text": "<p>It would be good to have both a classic search template that everyone recognise, and a couple of others that are more experimental and forward looking. I&#39;ll try to add at least one.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/16",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-02-27T07:08:00+01:00",
        "teasertext": "It would be good to have both a classic search template that everyone recognise, and a couple of others that are more experimental and forward looking. I'll try to add at least one.",
        "tags": [
            "templates",
            "choose",
            "search"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2Pz7ff"
    },
    {
        "date": 1425031740000,
        "repository": "vagrant-elk-box",
        "title": "Fusion base box added",
        "text": "<p>I&#39;ve used the <code>phusion/ubuntu-14.04-amd64</code> box on fusion and it appears to support virtualbox too so thought i&#39;d submit a PR to make that the base box for all providers. </p>\n\n<p>One thing I noticed with OSX was that I had to use <code>sudo</code> before any vagrant commands. Not sure what thats about</p>",
        "issuetype": null,
        "url": "https://github.com/comperiosearch/vagrant-elk-box/pull/10",
        "user": [
            "jchannon"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-27T11:09:00+01:00",
        "teasertext": "I've used the phusion/ubuntu-14.04-amd64 box on fusion and it appears to support virtualbox too so thought i'd submit a PR to make that the base box for all providers. \n\nOne thing I noticed with OSX was that I had to use sudo before any vagrant commands. Not sure what thats about",
        "tags": [
            "added",
            "fusion",
            "base",
            "box"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1EbeAu"
    },
    {
        "date": 1425031860000,
        "repository": "vagrant-elk-box",
        "title": "Are the logstash sample logs supposed to have errors",
        "text": "<p>One log line has a missing document title and another has double commas making it invalid json. Is that supposed to be like that?</p>",
        "issuetype": null,
        "url": "https://github.com/comperiosearch/vagrant-elk-box/issues/11",
        "user": [
            "jchannon"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-27T11:11:00+01:00",
        "teasertext": "One log line has a missing document title and another has double commas making it invalid json. Is that supposed to be like that?",
        "tags": [
            "sample",
            "logs",
            "errors",
            "supposed"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2p027m"
    },
    {
        "date": 1425112800000,
        "repository": "norch-bootstrap",
        "title": "wildcard-search without \"*\"",
        "text": "<p>It would be nice if we did a wildcard-search without using <code>http://localhost/search?q=*</code>, just <code>http://localhost:3030/#/search?q=</code> </p>\n\n<p>The reason is that then you can get all your results showing out of the box and it will be easy to type a new query without having to hit backspace first.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/17",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-02-28T09:40:00+01:00",
        "teasertext": "It would be nice if we did a wildcard-search without using http://localhost/search?q=*, just http://localhost:3030/#/search?q= \n\nThe reason is that then you can get all your results showing out of the box and it will be easy to type a new query without having to hit backspace first.",
        "tags": [
            "*",
            "wildcard-search"
        ],
        "type": [
            "GitHub"
        ],
        "id": "Gi8GX"
    },
    {
        "date": 1425120240000,
        "repository": "norch-bootstrap",
        "title": "Search input box too wide for cellphone",
        "text": "<p><img alt=\"16463066367_2d8d3b7d4e_o\" src=\"https://cloud.githubusercontent.com/assets/236656/6425858/01e4eafe-bf3f-11e4-8e5f-f1af249284a3.png\"/> </p>\n\n<p>Just some css that needs to be adjusted...</p>",
        "issuetype": "bug",
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/18",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-02-28T11:44:00+01:00",
        "teasertext": " \n\nJust some css that needs to be adjusted...",
        "tags": [
            "search",
            "input",
            "box",
            "wide",
            "cellphone"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2415cn"
    },
    {
        "date": 1425210660000,
        "repository": "search-index",
        "title": "running tests",
        "text": "<p>this might be a stupid Question, but how do i run the tests? i forked the repository and cloned it to a local one.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/76",
        "user": [
            "Holger-Will"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-01T12:51:00+01:00",
        "teasertext": "this might be a stupid Question, but how do i run the tests? i forked the repository and cloned it to a local one.",
        "tags": [
            "running",
            "tests"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1l91gg"
    },
    {
        "date": 1425394740000,
        "repository": "search-index",
        "title": "indexPath not respected",
        "text": "<p>While rewriting the test i came across a strange behaviour: </p>\n\n<p>i have two test files. in the first file i require serach-index like so: </p>\n\n<p><code>javascript \nvar si = require(&#39;../&#39;)({indexPath:&#39;si-test1&#39;}); \n</code> \nthis will create a dictionary called &quot;si-test1&quot;, with the index inside. \nthen i add some docs to the index an perform some searches... \nwhen running this test standalone everything runs as expected. </p>\n\n<p>In a second test file i have: </p>\n\n<p><code>javascript \nvar si2 = require(&#39;../&#39;)({indexPath:&#39;si-test2&#39;}); \n</code> \nbut here i don&#39;t do anything with the index...( just test for 1==1) \nboth test run parallel.  </p>\n\n<p>Strangely now all docs are in the index in directory &quot;si-test2&quot; but still accessable via si.<br/>si2&#39;s index is still empty, only the data is somehow bleeding over to the second folder. </p>\n\n<p>Is this the expected behaviour? \nshould this be tested against, or should the tests avoid such circumstances?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/77",
        "user": [
            "Holger-Will"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-03T15:59:00+01:00",
        "teasertext": "While rewriting the test i came across a strange behaviour: \n\ni have two test files. in the first file i require serach-index like so: \n\njavascript \nvar si = require('../')({indexPath:'si-test1'}); \n \nthis will create a dictionary called &quot;si-test1&quot;, with the index inside. \nthen i add some docs to the index an perform some searches... \nwhen running this test standalone everything runs as expected. \n\nIn a second test file i have: \n\njavascript \nvar si2 = require('../')({indexPath:'si-test2'}); \n \nbut here i don't do anything with the index...( just test for 1==1) \nboth test run parallel.  \n\nStrangely now all docs are in the index in directory &quot;si-test2&quot; but still accessable via si.si2's index is still empty, only the data is somehow bleeding over to the second folder. \n\nIs this the expected behaviour? \nshould this be tested against, or should the tests avoid such circumstances?",
        "tags": [
            "indexpath",
            "respected"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1fYHyF"
    },
    {
        "date": 1425732780000,
        "repository": "norch-bootstrap",
        "title": "Error message: Cannot GET /",
        "text": "<p>Install norch, index some tweets and run the API successfully: \n<img alt=\"skjermbilde 2015-03-07 kl 13 49 55\" src=\"https://cloud.githubusercontent.com/assets/236656/6541447/09507d34-c4d1-11e4-80b5-ebe1cbbe766a.png\"/> </p>\n\n<p>But when I try the actual web frontend: \n<img alt=\"skjermbilde 2015-03-07 kl 13 51 53\" src=\"https://cloud.githubusercontent.com/assets/236656/6541449/24904ef8-c4d1-11e4-9755-51d55559e5df.png\"/> </p>\n\n<p>Same error message if I do: http://1.0.1.14:3030/ \nGuessing this is a <code>norch-bootstrap</code> issue since the API is working.</p>",
        "issuetype": "bug",
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/19",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-07T13:53:00+01:00",
        "teasertext": "Install norch, index some tweets and run the API successfully: \n \n\nBut when I try the actual web frontend: \n \n\nSame error message if I do: http://1.0.1.14:3030/ \nGuessing this is a norch-bootstrap issue since the API is working.",
        "tags": [
            "/",
            "error",
            "message"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1NO9iy"
    },
    {
        "date": 1425829140000,
        "repository": "norch-indexer",
        "title": "Creating duplicates or wrong \"total docs\"?",
        "text": "<p>Currently I&#39;m re-indexing &quot;everything&quot; in my solution. Every document has an ID before they&#39;re sent of to the indexer, so the old, indexed documents should be overwritten/edited, instead of being created as duplicates of old ones. </p>\n\n<p>It may seem like there are no duplicates when looking at search results, but the &quot;total docs&quot;-number is increasing for each time I run the indexing-process. </p>\n\n<p>Search result <em>before</em> indexing another round <code>1044 totalDocs</code>: \n<img alt=\"skjermbilde 2015-03-08 kl 16 20 43\" src=\"https://cloud.githubusercontent.com/assets/236656/6546334/6560e98a-c5b0-11e4-819c-5961bc0f357a.png\"/> </p>\n\n<p>Search result <em>after</em> indexing another round ´1115 totalDocs´: \n<img alt=\"skjermbilde 2015-03-08 kl 16 23 20\" src=\"https://cloud.githubusercontent.com/assets/236656/6546350/cb54d350-c5b0-11e4-89bc-d39f4241d137.png\"/> </p>\n\n<p>I&#39;ve checked, and the same amount of docs are sent to the ´norch-indexer´ (86 docs) and they have the same ID. So, not every document re-indexed is duplicated. </p>\n\n<p>The index also increases in size: \n<code> \npi@fatboy ~ $ cd si/ \npi@fatboy ~/si $ du -h \n5.4M . \npi@fatboy ~/si $ cd .. \npi@fatboy ~ $ node lifeindex/li-twitter-tweets.js \npi@fatboy ~ $ cd si/ \npi@fatboy ~/si $ du -h \n5.5M . \npi@fatboy ~/si $ \n</code></p>",
        "issuetype": "bug",
        "url": "https://github.com/fergiemcdowall/norch-indexer/issues/7",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-08T16:39:00+01:00",
        "teasertext": "Currently I'm re-indexing &quot;everything&quot; in my solution. Every document has an ID before they're sent of to the indexer, so the old, indexed documents should be overwritten/edited, instead of being created as duplicates of old ones. \n\nIt may seem like there are no duplicates when looking at search results, but the &quot;total docs&quot;-number is increasing for each time I run the indexing-process. \n\nSearch result before indexing another round 1044 totalDocs: \n \n\nSearch result after indexing another round ´1115 totalDocs´: \n \n\nI've checked, and the same amount of docs are sent to the ´norch-indexer´ (86 docs) and they have the same ID. So, not every document re-indexed is duplicated. \n\nThe index also increases in size: \n \npi@fatboy ~ $ cd si/ \npi@fatboy ~/si $ du -h \n5.4M . \npi@fatboy ~/si $ cd .. \npi@fatboy ~ $ node lifeindex/li-twitter-tweets.js \npi@fatboy ~ $ cd si/ \npi@fatboy ~/si $ du -h \n5.5M . \npi@fatboy ~/si $ \n",
        "tags": [
            "wrong",
            "total",
            "docs",
            "duplicates"
        ],
        "type": [
            "GitHub"
        ],
        "id": "eAcoh"
    },
    {
        "date": 1425904080000,
        "repository": "iftt-norch-tools",
        "title": "Get first two document processing functions working",
        "text": "<p>Figure out how exports work in node, get <code>ID</code> and <code>characterEscaping</code> working.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/1",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-09T13:28:00+01:00",
        "teasertext": "Figure out how exports work in node, get ID and characterEscaping working.",
        "tags": [
            "document",
            "processing",
            "functions",
            "working"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3gki1N"
    },
    {
        "date": 1425904200000,
        "repository": "iftt-norch-tools",
        "title": "Add date-function",
        "text": "<p>Based on: \n<code></code>` \n    require( &#39;useful-date&#39; ) \n    require( &#39;useful-date/locale/en-GB.js&#39; ) \n    var moment = require(&#39;moment&#39;) </p>\n\n<pre><code>// Using useful-date (Date-coerse) to give moment something it can work with \nvar datetransform = Date.coerce(obj.date, &#39;F d, Y &lt;at&gt; h:iA&#39;) \n//obj.date = moment(obj.date).format() \nobj.date = moment(datetransform).format() </code></pre>\n\n<p><code></code>`</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/2",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-03-09T13:30:00+01:00",
        "teasertext": "Based on: \n` \n    require( 'useful-date' ) \n    require( 'useful-date/locale/en-GB.js' ) \n    var moment = require('moment') \n\n// Using useful-date (Date-coerse) to give moment something it can work with \nvar datetransform = Date.coerce(obj.date, 'F d, Y &lt;at&gt; h:iA') \n//obj.date = moment(obj.date).format() \nobj.date = moment(datetransform).format() \n\n`",
        "tags": [
            "add",
            "date-function"
        ],
        "type": [
            "GitHub"
        ],
        "id": "354hdW"
    },
    {
        "date": 1425905040000,
        "repository": "iftt-norch-tools",
        "title": "Add user-function",
        "text": "<p>Should be consolidated to one user throughout several services. </p>\n\n<p>Twitter: \n<code></code>` \n    // Changing user-string to arra \n    // ... and removing &#39;@&#39; \n    obj.user = obj.user.replace(/@/, &#39;&#39;) \n    obj.user = [obj.user] </p>\n\n<pre><code>// Adding users from obj.text \n// ... and removing &#39;@&#39; \nmoreusers = obj.text.match(/@[a-z0-9\\_\\-]+/gi) \nif (moreusers != null) { \n  for (var j = 0; j &lt; moreusers.length; j++) { \n    moreusers[j]= moreusers[j].replace(/@/, &#39;&#39;) \n    obj.user.push(moreusers[j]) \n  } </code></pre>\n\n<p><code></code>` </p>\n\n<p>Gmail w/ gravatar-link: \n<code> \n// Setting obj.user to equal email-field. \n    // Need to go through a normalization-process later. \n    // Users should normalize on email. Then you&#39;ll have Gravatar-images \n    obj.email = obj.email.toLowerCase() \n    obj.user = [obj.email] \n    obj.gravatar = gravatar.url(obj.email, {s: &#39;200&#39;, r: &#39;pg&#39;, d: &#39;wavatar&#39;}) \n</code></p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/3",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-03-09T13:44:00+01:00",
        "teasertext": "Should be consolidated to one user throughout several services. \n\nTwitter: \n` \n    // Changing user-string to arra \n    // ... and removing '@' \n    obj.user = obj.user.replace(/@/, '') \n    obj.user = [obj.user] \n\n// Adding users from obj.text \n// ... and removing '@' \nmoreusers = obj.text.match(/@[a-z0-9\\_\\-]+/gi) \nif (moreusers != null) { \n  for (var j = 0; j &lt; moreusers.length; j++) { \n    moreusers[j]= moreusers[j].replace(/@/, '') \n    obj.user.push(moreusers[j]) \n  } \n\n` \n\nGmail w/ gravatar-link: \n \n// Setting obj.user to equal email-field. \n    // Need to go through a normalization-process later. \n    // Users should normalize on email. Then you'll have Gravatar-images \n    obj.email = obj.email.toLowerCase() \n    obj.user = [obj.email] \n    obj.gravatar = gravatar.url(obj.email, {s: '200', r: 'pg', d: 'wavatar'}) \n",
        "tags": [
            "add",
            "user-function"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2UFJuf"
    },
    {
        "date": 1425905220000,
        "repository": "iftt-norch-tools",
        "title": "Adding type",
        "text": "<p>Type can so far be one of the following: \n<em> Email \n</em> Twitter \n* Flickr </p>\n\n<p><code> \n    // Adding &#39;type&#39;: &#39;Email&#39; for filtering \n    obj.type = [&#39;Email&#39;] \n</code></p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/4",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-03-09T13:47:00+01:00",
        "teasertext": "Type can so far be one of the following: \n Email \n Twitter \n* Flickr \n\n \n    // Adding 'type': 'Email' for filtering \n    obj.type = ['Email'] \n",
        "tags": [
            "adding",
            "type"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2R5jIB"
    },
    {
        "date": 1425905340000,
        "repository": "iftt-norch-tools",
        "title": "Add tag extraction",
        "text": "<p><code> \n    // Extracting #tags from obj.text, \n    // ... removing &#39;#&#39; if #tags exists (not null) \n    // ... and converting to lowercase \n    obj.tags = obj.text.match(/#[a-zæøå0-9]+/gi) \n    if (obj.tags != null) { \n      for (var k = 0; k &lt; obj.tags.length; k++) { \n        obj.tags[k] = obj.tags[k].replace(/#/, &#39;&#39;).toLowerCase() \n      } \n    } \n</code></p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/5",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-09T13:49:00+01:00",
        "teasertext": " \n    // Extracting #tags from obj.text, \n    // ... removing '#' if #tags exists (not null) \n    // ... and converting to lowercase \n    obj.tags = obj.text.match(/#[a-zæøå0-9]+/gi) \n    if (obj.tags != null) { \n      for (var k = 0; k &lt; obj.tags.length; k++) { \n        obj.tags[k] = obj.tags[k].replace(/#/, '').toLowerCase() \n      } \n    } \n",
        "tags": [
            "add",
            "tag",
            "extraction"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4psJFU"
    },
    {
        "date": 1425907200000,
        "repository": "norch-fetch-twitter-tweets-ifttt",
        "title": "Add example-file for config",
        "text": "<p>Defining Google Drive document ID and type of source for filtering.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/norch-fetch-twitter-tweets-ifttt/issues/1",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-03-09T14:20:00+01:00",
        "teasertext": "Defining Google Drive document ID and type of source for filtering.",
        "tags": [
            "add",
            "example-file",
            "config"
        ],
        "type": [
            "GitHub"
        ],
        "id": "379BmM"
    },
    {
        "date": 1425909600000,
        "repository": "iftt-norch-tools",
        "title": "Create Node.js module from repository and publish",
        "text": "<p>https://docs.npmjs.com/getting-started/creating-node-modules \nhttps://docs.npmjs.com/getting-started/publishing-npm-packages</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/6",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-03-09T15:00:00+01:00",
        "teasertext": "https://docs.npmjs.com/getting-started/creating-node-modules \nhttps://docs.npmjs.com/getting-started/publishing-npm-packages",
        "tags": [
            "create",
            "nodejs",
            "module",
            "repository",
            "publish"
        ],
        "type": [
            "GitHub"
        ],
        "id": "yo9Jg"
    },
    {
        "date": 1425923940000,
        "repository": "norch",
        "title": "Upgrade to 0.5.0 version of search-index",
        "text": "<p>Upgrade to 0.5.0 version of search-index</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch/issues/84",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-09T18:59:00+01:00",
        "teasertext": "Upgrade to 0.5.0 version of search-index",
        "tags": [
            "upgrade",
            "version",
            "search-index"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4XCJv"
    },
    {
        "date": 1425978540000,
        "repository": "iftt-norch-tools",
        "title": "Add \"my work\"/other's",
        "text": "<p>EIther/or: Divide the content into either stuff that I contribute to or stuff that I just follow. Don&#39;t have good name for this yet. Will be part of the information model. </p>\n\n<p>Examples on contribution: \n- Uploads \n- Email (starred) \n- Comments from me \n- Comments to me </p>\n\n<p>Others work: \n- Starred photos on Instagram \n- Favourites on Flickr</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/7",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-03-10T10:09:00+01:00",
        "teasertext": "EIther/or: Divide the content into either stuff that I contribute to or stuff that I just follow. Don't have good name for this yet. Will be part of the information model. \n\nExamples on contribution: \n- Uploads \n- Email (starred) \n- Comments from me \n- Comments to me \n\nOthers work: \n- Starred photos on Instagram \n- Favourites on Flickr",
        "tags": [
            "add",
            "work/other's"
        ],
        "type": [
            "GitHub"
        ],
        "id": "32wYsk"
    },
    {
        "date": 1425978600000,
        "repository": "iftt-norch-tools",
        "title": "Add removehtml",
        "text": "<p>Function for removing html-tags from text.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/8",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-03-10T10:10:00+01:00",
        "teasertext": "Function for removing html-tags from text.",
        "tags": [
            "add",
            "removehtml"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3ePbJE"
    },
    {
        "date": 1425978720000,
        "repository": "iftt-norch-tools",
        "title": "Add escaping special characters",
        "text": "<p>Escaping a lot of different special characters. A bit unsure on how to make this work as exports. </p>\n\n<p>Based on: \n// Function for escaping and unescaping characers from JSON.stringify-process \n// http://stackoverflow.com/questions/4253367/how-to-escape-a-json-string-containing-newline-characters-using-javascript \nString.prototype.escapeUnescape = function() { \n  return this.replace(/\\n/g, &quot;\\n&quot;) \n             .replace(/\\&#39;/g, &quot;\\&#39;&quot;) \n             .replace(/\\&quot;/g, &#39;\\&quot;&#39;) \n             .replace(/\\&amp;/g, &quot;\\&amp;&quot;) \n             .replace(/\\r/g, &quot;\\r&quot;) \n             .replace(/\\t/g, &quot;\\t&quot;) \n             .replace(/\\b/g, &quot;\\b&quot;) \n             .replace(/\\f/g, &quot;\\f&quot;); \n};</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/9",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-03-10T10:12:00+01:00",
        "teasertext": "Escaping a lot of different special characters. A bit unsure on how to make this work as exports. \n\nBased on: \n// Function for escaping and unescaping characers from JSON.stringify-process \n// http://stackoverflow.com/questions/4253367/how-to-escape-a-json-string-containing-newline-characters-using-javascript \nString.prototype.escapeUnescape = function() { \n  return this.replace(/\\n/g, &quot;\\n&quot;) \n             .replace(/\\'/g, &quot;\\'&quot;) \n             .replace(/\\&quot;/g, '\\&quot;') \n             .replace(/\\&amp;/g, &quot;\\&amp;&quot;) \n             .replace(/\\r/g, &quot;\\r&quot;) \n             .replace(/\\t/g, &quot;\\t&quot;) \n             .replace(/\\b/g, &quot;\\b&quot;) \n             .replace(/\\f/g, &quot;\\f&quot;); \n};",
        "tags": [
            "add",
            "characters",
            "escaping",
            "special"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2QCVU9"
    },
    {
        "date": 1426234620000,
        "repository": "search-index",
        "title": "Use checksum to make adding duplicate docs less \"expensive\"",
        "text": "<p>As of now, when a user adds a doc that is identical to a doc in the index, the doc is deleted and reindexed. This is expensive and unnecessary.  </p>\n\n<p>It would be better to determine document existance by using checksum or similar, so that deletion and indexing only occur when a document is new or altered.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/78",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-13T09:17:00+01:00",
        "teasertext": "As of now, when a user adds a doc that is identical to a doc in the index, the doc is deleted and reindexed. This is expensive and unnecessary.  \n\nIt would be better to determine document existance by using checksum or similar, so that deletion and indexing only occur when a document is new or altered.",
        "tags": [
            "duplicate",
            "docs",
            "checksum",
            "expensive"
        ],
        "type": [
            "GitHub"
        ],
        "id": "Py9Tn"
    },
    {
        "date": 1426266840000,
        "repository": "iftt-norch-tools",
        "title": "Add JSON-creation function",
        "text": null,
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/11",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-03-13T18:14:00+01:00",
        "teasertext": "null",
        "tags": [
            "add",
            "json-creation",
            "function"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4kspeA"
    },
    {
        "date": 1426266900000,
        "repository": "iftt-norch-tools",
        "title": "Indexing-function using search-index si.add",
        "text": "<p>Indexing-function using search-index si.add</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/12",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-03-13T18:15:00+01:00",
        "teasertext": "Indexing-function using search-index si.add",
        "tags": [
            "indexing-function",
            "siadd",
            "search-index"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2fFEDD"
    },
    {
        "date": 1426268220000,
        "repository": "Life-Indexer",
        "title": "Twitter tweets: Abstract config-file",
        "text": "<p>Containing: \n- Type \n- Google Drive document key</p>",
        "issuetype": null,
        "url": "https://github.com/eklem/Life-Indexer/issues/1",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-13T18:37:00+01:00",
        "teasertext": "Containing: \n- Type \n- Google Drive document key",
        "tags": [
            "twitter",
            "tweets",
            "abstract",
            "config-file"
        ],
        "type": [
            "GitHub"
        ],
        "id": "hUn4v"
    },
    {
        "date": 1426268280000,
        "repository": "Life-Indexer",
        "title": "Indexer for: Tweets, Gmail Strarred and Flickr Uploads",
        "text": "<p>require only for config and iftt-norch-tools.js</p>",
        "issuetype": null,
        "url": "https://github.com/eklem/Life-Indexer/issues/2",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-13T18:38:00+01:00",
        "teasertext": "require only for config and iftt-norch-tools.js",
        "tags": [
            "indexer",
            "tweets",
            "gmail",
            "strarred",
            "flickr",
            "uploads"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1IwPrj"
    },
    {
        "date": 1426450500000,
        "repository": "search-index",
        "title": "How to make Norch and Search-index work at the same time",
        "text": "<p>I&#39;m running <code>norch</code> with <code>norch-bootstrap</code> from a console and I&#39;m trying to use <code>search-index</code>from within a JavaScript to add documents to the index while running <code>norch</code>. I&#39;m getting a conflict: </p>\n\n<p><code> \nevents.js:85 \n      throw er; // Unhandled &#39;error&#39; event \n            ^ \nOpenError: IO error: lock si/LOCK: Resource temporarily unavailable \n    at /home/pi/node_modules/norch/node_modules/search-index/node_modules/levelup/lib/levelup.js:118:34 \n</code> </p>\n\n<p>If I stop <code>norch</code>, the script works, and documents are added to the index.</p>",
        "issuetype": "question",
        "url": "https://github.com/fergiemcdowall/search-index/issues/79",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-15T21:15:00+01:00",
        "teasertext": "I'm running norch with norch-bootstrap from a console and I'm trying to use search-indexfrom within a JavaScript to add documents to the index while running norch. I'm getting a conflict: \n\n \nevents.js:85 \n      throw er; // Unhandled 'error' event \n            ^ \nOpenError: IO error: lock si/LOCK: Resource temporarily unavailable \n    at /home/pi/node_modules/norch/node_modules/search-index/node_modules/levelup/lib/levelup.js:118:34 \n \n\nIf I stop norch, the script works, and documents are added to the index.",
        "tags": [
            "search-index",
            "work",
            "time",
            "norch"
        ],
        "type": [
            "GitHub"
        ],
        "id": "jC5qt"
    },
    {
        "date": 1426451220000,
        "repository": "search-index",
        "title": "Identical JSON creates duplicate document count.",
        "text": "<p>Using this code to add documents to the index \n<code> \n  si.add({&#39;batchName&#39;: config.batchname, &#39;filters&#39;: config.filters}, result.data, function(err) { \n    if (!err) console.log(&#39;indexed!&#39;) \n  }) \n</code> </p>\n\n<p>First time I get 88 as count when I search for &quot;*&quot;, second time I get 173 documents, third time I get &quot;258&quot;. Only count seems off, amount of results actually shown in a given search stays the same. </p>\n\n<p>Data I index: \n<code> \n[ { date: &#39;2014-11-10T22:20:00+01:00&#39;, \n    user: [ &#39;eklem&#39; ], \n    text: &#39;What in your online life would be interesting for you to have #searchable ? #search #events #sites&#39;, \n    link: &#39;http://ift.tt/1uUH33u&#39;, \n    id: &#39;3ABtU&#39;, \n    tags: [ &#39;searchable&#39;, &#39;search&#39;, &#39;events&#39;, &#39;sites&#39; ], \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-13T10:22:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;labs_finn_no&#39;, &#39;IFTTT&#39; ], \n    text: &#39;@labs_finn_no På tide å utvikle triggere for @IFTTT ? https://t.co/n9OAv49fXS Tenk på all moroa folk kan gjøre da!&#39;, \n    link: &#39;http://twitter.com/eklem/status/532825696486563840&#39;, \n    id: &#39;1bwKxq&#39;, \n    tags: null, \n    links: [ &#39;https://t.co/n9OAv49fXS&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-13T10:39:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;labs_finn_no&#39;, &#39;SchibstedGroup&#39;, &#39;SchibstedGrowth&#39; ], \n    text: &#39;@labs_finn_no Eller få @SchibstedGroup / @SchibstedGrowth til å utvikle eller investere i noe tilsvarende?&#39;, \n    link: &#39;http://twitter.com/eklem/status/532830002002546689&#39;, \n    id: &#39;3png34&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-13T10:55:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;ramyo&#39;, &#39;Yggdrasil2015&#39; ], \n    text: &#39;RT @ramyo: Har akkurat foreslått et foredrag til @Yggdrasil2015: “Hvordan få til god designkritikk”. Håper det blir antatt – Yggdrasil er alltid moro!&#39;, \n    link: &#39;http://twitter.com/eklem/status/532834125749948416&#39;, \n    id: &#39;1MmNVn&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-15T09:34:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;hildecs&#39; ], \n    text: &#39;RT @hildecs: Nå har det kokt over for Aftenposten. &quot;Fikk kroppen full av tungmetaller og parasitter&quot; http://t.co/RD46U3MPgv #kvakksalverspråk&#39;, \n    link: &#39;http://twitter.com/eklem/status/533538592912850944&#39;, \n    id: &#39;THf0S&#39;, \n    tags: [ &#39;kvakksalverspråk&#39; ], \n    links: [ &#39;http://t.co/RD46U3MPgv&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-15T09:39:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;hildecs&#39;, &#39;frmartinsen&#39; ], \n    text: &#39;@hildecs @frmartinsen Hehe &quot;skannet kroppen og målte energien i cellene&quot; + tyske leger. Sikker vinner!&#39;, \n    link: &#39;http://twitter.com/eklem/status/533539718181687296&#39;, \n    id: &#39;YCIeK&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-15T17:30:00+01:00&#39;, \n    user: [ &#39;eklem&#39; ], \n    text: &#39;Noen som savner denne fete kjerra? #inntauing #pimpmyride http://t.co/eVsEpjRQyv&#39;, \n    link: &#39;http://twitter.com/eklem/status/533658235027595264&#39;, \n    id: &#39;xLKc4&#39;, \n    tags: [ &#39;inntauing&#39;, &#39;pimpmyride&#39; ], \n    links: [ &#39;http://t.co/eVsEpjRQyv&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-17T05:07:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;Ruter&#39; ], \n    text: &#39;@Ruter greit å åpne stasjonen i tide til første T-bane?&#39;, \n    link: &#39;http://twitter.com/eklem/status/534196012584554496&#39;, \n    id: &#39;1bYSFj&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-17T05:07:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;ruter&#39; ], \n    text: &#39;@ruter http://t.co/2EROVvOZZv&#39;, \n    link: &#39;http://twitter.com/eklem/status/534196157178994688&#39;, \n    id: &#39;O6RUy&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/2EROVvOZZv&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-18T09:47:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;Ruter&#39; ], \n    text: &#39;@Ruter Null svar... Altså: Dere bør åpne T-banestasjonene i tide? Og vakta bør kanskje ikke bruke skinnegangen mellom perrongene i jobben?&#39;, \n    link: &#39;http://twitter.com/eklem/status/534628973888937984&#39;, \n    id: &#39;2X3ZFV&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-18T09:50:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;johanhal&#39;, &#39;hanekamhaug&#39; ], \n    text: &#39;@johanhal @hanekamhaug Noen outer seg selv, flere kommentarer overflødig... ?&#39;, \n    link: &#39;http://twitter.com/eklem/status/534629594801135616&#39;, \n    id: &#39;4kzwg3&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-18T10:55:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;Ruter&#39; ], \n    text: &#39;@Ruter Takker!&#39;, \n    link: &#39;http://twitter.com/eklem/status/534646126347964416&#39;, \n    id: &#39;3mGbV2&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-18T10:58:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;Ruter&#39; ], \n    text: &#39;@Ruter Takke!&#39;, \n    link: &#39;http://twitter.com/eklem/status/534646758186708993&#39;, \n    id: &#39;41FIRP&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-18T14:25:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;basbrommet&#39;, &#39;kickstarter&#39; ], \n    text: &#39;RT @basbrommet: Lease A Jeans: Earth wants your jeans back by Mud Jeans http://t.co/6cnmMUZqzt via @kickstarter&#39;, \n    link: &#39;http://twitter.com/eklem/status/534698976940158977&#39;, \n    id: &#39;3EKpMb&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/6cnmMUZqzt&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-18T21:18:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;JensBP&#39; ], \n    text: &#39;RT @JensBP: Forskere mener &quot;kristen kulturarv&quot; er en konstruksjon og misbrukes i politisk hestehandling. http://t.co/Fm4Oi4lzeV&#39;, \n    link: &#39;http://twitter.com/eklem/status/534802871473422337&#39;, \n    id: &#39;3YqQ0V&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/Fm4Oi4lzeV&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-19T12:14:00+01:00&#39;, \n    user: [ &#39;eklem&#39; ], \n    text: &#39;#Google har masse interne verktøy for bedrifter. Noen som jobber med å integrere/etablere dette hos kunder?&#39;, \n    link: &#39;http://twitter.com/eklem/status/535028298276171776&#39;, \n    id: &#39;3ZyJQP&#39;, \n    tags: [ &#39;google&#39; ], \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-19T12:35:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;johshholmedahl&#39; ], \n    text: &#39;@johshholmedahl Så kult! Noe blogposter om erfaringer og utbytte?&#39;, \n    link: &#39;http://twitter.com/eklem/status/535033737957081088&#39;, \n    id: &#39;1uIsCB&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-19T15:45:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;GoogleforWork&#39; ], \n    text: &#39;@GoogleforWork Is there a possibility to have one search box searching Gmail, Calendar, Contacts, Drive etc?&#39;, \n    link: &#39;http://twitter.com/eklem/status/535081479026769920&#39;, \n    id: &#39;4wGPOl&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-19T16:03:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;GoogleforWork&#39; ], \n    text: &#39;@GoogleforWork ... and Hangouts?&#39;, \n    link: &#39;http://twitter.com/eklem/status/535086032623243265&#39;, \n    id: &#39;3GQvqi&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-20T08:59:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;ironskyfilm&#39; ], \n    text: &#39;@ironskyfilm Tried to share this page, but got an error http://t.co/OhIAtOtgfQ http://t.co/1fPHD4eKbV&#39;, \n    link: &#39;http://twitter.com/eklem/status/535341562872754176&#39;, \n    id: &#39;4avLPI&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/OhIAtOtgfQ&#39;, &#39;http://t.co/1fPHD4eKbV&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-24T10:16:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;ironskyfilm&#39; ], \n    text: &#39;@ironskyfilm Working now. Thanks!&#39;, \n    link: &#39;http://twitter.com/eklem/status/536810615395061760&#39;, \n    id: &#39;4k17Cd&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-24T13:56:00+01:00&#39;, \n    user: [ &#39;eklem&#39; ], \n    text: &#39;Will embed-view of your content replace the preview-pane in modern #search  #engine solutions? Why preview when you can have the real deal?&#39;, \n    link: &#39;http://twitter.com/eklem/status/536866049078333440&#39;, \n    id: &#39;1Xugfm&#39;, \n    tags: [ &#39;search&#39;, &#39;engine&#39; ], \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-24T15:35:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;johshholmedahl&#39; ], \n    text: &#39;@johshholmedahl Nei med andre ord =)&#39;, \n    link: &#39;http://twitter.com/eklem/status/536890737192075264&#39;, \n    id: &#39;2CMM13&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-25T14:39:00+01:00&#39;, \n    user: [ &#39;eklem&#39; ], \n    text: &#39;Idea: Your life, indexed and available through Norch, NOde seaRCH - http://t.co/pkEs4TW7Xb&#39;, \n    link: &#39;http://twitter.com/eklem/status/537239093810176001&#39;, \n    id: &#39;ANeTb&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/pkEs4TW7Xb&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-25T20:34:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;instructables&#39; ], \n    text: &#39;RT @instructables: Open Toys, hack your veggies with 3D Printing http://t.co/yQvigeVdS7 http://t.co/DAZNnK7INO&#39;, \n    link: &#39;http://twitter.com/eklem/status/537328381512392706&#39;, \n    id: &#39;4Gdy4k&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/yQvigeVdS7&#39;, &#39;http://t.co/DAZNnK7INO&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-25T20:58:00+01:00&#39;, \n    user: [ &#39;eklem&#39; ], \n    text: &#39;Anyone that could be interested in a #search solution like this? \\nhttp://t.co/8uVxaqW8o6&#39;, \n    link: &#39;http://twitter.com/eklem/status/537334627246301184&#39;, \n    id: &#39;2HCMZb&#39;, \n    tags: [ &#39;search&#39; ], \n    links: [ &#39;http://t.co/8uVxaqW8o6&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-25T21:52:00+01:00&#39;, \n    user: [ &#39;eklem&#39; ], \n    text: &#39;Sharing. Statistics, so far. Google+(0),LinkedIn(1),Facebook(4),Twitter(5),Hacknews(12),Reddit(30)&#39;, \n    link: &#39;http://twitter.com/eklem/status/537348165750767617&#39;, \n    id: &#39;2fCK33&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-26T09:41:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;inconvergent&#39; ], \n    text: &#39;@inconvergent What happened?&#39;, \n    link: &#39;http://twitter.com/eklem/status/537526476774838272&#39;, \n    id: &#39;21HOM0&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-26T15:02:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;tikikate&#39;, &#39;RubenBolling&#39; ], \n    text: &#39;RT @tikikate: &quot;Fart-sound App Maker&quot;\\n\\nMT @RubenBolling\\n\\nRichard Scarry\\&#39;s Bush 21st Century\\n\\nhttp://t.co/LswGgcoekL http://t.co/sH7GdG22Dr&#39;, \n    link: &#39;http://twitter.com/eklem/status/537607428951773184&#39;, \n    id: &#39;1fAqcM&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/LswGgcoekL&#39;, &#39;http://t.co/sH7GdG22Dr&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-27T10:11:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;EinarWilly&#39;, &#39;delveien&#39;, &#39;Presserom&#39; ], \n    text: &#39;RT @EinarWilly: Prøvde ut  nye sykkelfeltet i #Eufemiasgtate  Konklusjon. Funksjonell løsning kun om man finner opp teleportering.  @delveien @Presserom&#39;, \n    link: &#39;http://twitter.com/eklem/status/537896398176661504&#39;, \n    id: &#39;7CGcR&#39;, \n    tags: [ &#39;eufemiasgtate&#39; ], \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-11-27T10:59:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;thomax&#39; ], \n    text: &#39;RT @thomax: Bengler does it again! Sjekk denne visualiseringen http://t.co/ZZQKHULORV av klodens fremtid og hvilke tiltak som funker #IPCC #klima&#39;, \n    link: &#39;http://twitter.com/eklem/status/537908678322835456&#39;, \n    id: &#39;2IjiO&#39;, \n    tags: [ &#39;ipcc&#39;, &#39;klima&#39; ], \n    links: [ &#39;http://t.co/ZZQKHULORV&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-12-01T12:58:00+01:00&#39;, \n    user: [ &#39;eklem&#39; ], \n    text: &#39;Hvor er undersøkelsen om jeg faktisk ønsker en hel undersøkelse etter et enkelt kjøp på nett? Nok nå...&#39;, \n    link: &#39;http://twitter.com/eklem/status/539388155439624193&#39;, \n    id: &#39;33owhM&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-12-02T15:54:00+01:00&#39;, \n    user: [ &#39;eklem&#39; ], \n    text: &#39;Testing Search without search box: Recipe App  – Alpha version  http://t.co/FhD2WyfDsL&#39;, \n    link: &#39;http://twitter.com/eklem/status/539794643911602176&#39;, \n    id: &#39;2vcEPt&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/FhD2WyfDsL&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-12-03T16:31:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;ChrSorgjerd&#39; ], \n    text: &#39;@ChrSorgjerd Telthusbakken opp fra Maridalsveien!&#39;, \n    link: &#39;http://twitter.com/eklem/status/540166423860219905&#39;, \n    id: &#39;25xHo5&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-12-09T10:55:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;labs_finn_no&#39;, &#39;FINN_no&#39; ], \n    text: &#39;@labs_finn_no @FINN_no Jeg skjønner hvorfor folk ikke bruker sikker betaling. Ikke veldig brukervennlig.&#39;, \n    link: &#39;http://twitter.com/eklem/status/542256129490059264&#39;, \n    id: &#39;20iYoY&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-12-09T10:56:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;labs_finn_no&#39;, &#39;FINN_no&#39; ], \n    text: &#39;@labs_finn_no @FINN_no 1: Forklaring ut fra teknisk ståsted. 2: Masse tekst istedenfor selvforklarende. 3: Usikker på hva neste trinn er&#39;, \n    link: &#39;http://twitter.com/eklem/status/542256551000801280&#39;, \n    id: &#39;4jIhpJ&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-12-09T20:38:00+01:00&#39;, \n    user: [ &#39;eklem&#39; ], \n    text: &#39;Google Play Movies must be Google\\&#39;s worst #search experience? Query: &quot;Hobbit&quot; --&amp;gt; Result: &quot;The Dark Knight Rises&quot;&#39;, \n    link: &#39;http://twitter.com/eklem/status/542402910881980416&#39;, \n    id: &#39;dQ7Jw&#39;, \n    tags: [ &#39;search&#39; ], \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-12-13T11:00:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;Reuters&#39; ], \n    text: &#39;RT @Reuters: A surfer drops in on a large wave at Praia do Norte. Editor\\&#39;s Choice photos: http://t.co/80WiUujjSm http://t.co/sYqam8FiYp&#39;, \n    link: &#39;http://twitter.com/eklem/status/543707071019900928&#39;, \n    id: &#39;1nw8QH&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/80WiUujjSm&#39;, &#39;http://t.co/sYqam8FiYp&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-12-15T09:39:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;anniken&#39;, &#39;johanhal&#39; ], \n    text: &#39;RT @anniken: @johanhal Litt spesielt, i hvert fall. &quot;Lær engelsk! For pensjonister og menn.&quot;&#39;, \n    link: &#39;http://twitter.com/eklem/status/544411456180338688&#39;, \n    id: &#39;p9Vzi&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-12-15T09:52:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;anniken&#39;, &#39;johanhal&#39;, &#39;iacob&#39; ], \n    text: &#39;@anniken @johanhal @iacob Min erfaring er at eneste måten å få med alle er å lytte til hva de vil ha og ikke  ikke fordumme/rosa-ifisere&#39;, \n    link: &#39;http://twitter.com/eklem/status/544414743508045824&#39;, \n    id: &#39;bCibL&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-12-17T10:04:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;IFTTT&#39; ], \n    text: &#39;@IFTTT How about a title-row when inserting to Google Drive? Would make this much closer to reality: http://t.co/qfdjmY3m0y #lifeindex&#39;, \n    link: &#39;http://twitter.com/eklem/status/545142512869212160&#39;, \n    id: &#39;3ud5Yd&#39;, \n    tags: [ &#39;lifeindex&#39; ], \n    links: [ &#39;http://t.co/qfdjmY3m0y&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-12-17T10:56:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;Ingeborgborg&#39;, &#39;JenSorensen&#39; ], \n    text: &#39;RT @Ingeborgborg: Denne er veldig god. @JenSorensen http://t.co/KuhaVkEPtk&#39;, \n    link: &#39;http://twitter.com/eklem/status/545155461163782144&#39;, \n    id: &#39;lkTwz&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/KuhaVkEPtk&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-12-17T10:56:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;Gj3rt&#39; ], \n    text: &#39;RT @Gj3rt: Når vi blir gamle ... http://t.co/ggDPbnjuUb&#39;, \n    link: &#39;http://twitter.com/eklem/status/545155478435942400&#39;, \n    id: &#39;2ccpHZ&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/ggDPbnjuUb&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-12-19T10:43:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;IFTTT&#39; ], \n    text: &#39;@IFTTT Cool! That would bring us one step closer to a service that people will pay for =)&#39;, \n    link: &#39;http://twitter.com/eklem/status/545877120871043072&#39;, \n    id: &#39;3I8QBi&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2014-12-23T12:35:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;holajoan&#39; ], \n    text: &#39;RT @holajoan: I assume somebody has done this before but I just couldn\\&#39;t contain. Meet Dron Draper. http://t.co/r88dti3esb&#39;, \n    link: &#39;http://twitter.com/eklem/status/547354703336849408&#39;, \n    id: &#39;4eQ6Vw&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/r88dti3esb&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-01T20:23:00+01:00&#39;, \n    user: [ &#39;eklem&#39; ], \n    text: &#39;Nice chance to join the premiere of Iron Sky The Coming Race + premiere party in Helsinki/Berlin: http://t.co/E1h40z3cgA&#39;, \n    link: &#39;http://twitter.com/eklem/status/550734183501692928&#39;, \n    id: &#39;30FCGi&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/E1h40z3cgA&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-01T20:30:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;inconvergent&#39; ], \n    text: &#39;RT @inconvergent: different perspective. #generative http://t.co/v5YlhULpo7&#39;, \n    link: &#39;http://twitter.com/eklem/status/550735918840422400&#39;, \n    id: &#39;4eeNC0&#39;, \n    tags: [ &#39;generative&#39; ], \n    links: [ &#39;http://t.co/v5YlhULpo7&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-06T12:50:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;terokaukomaa&#39; ], \n    text: &#39;RT @terokaukomaa: Just completed #IronSkyTheComingRace 60 days fight succesfully in #IndieGoGo with 560.949 dollars from 8048 contributors. Huge Thank!&#39;, \n    link: &#39;http://twitter.com/eklem/status/552432066378616832&#39;, \n    id: &#39;MtbHY&#39;, \n    tags: [ &#39;ironskythecomingrace&#39;, &#39;indiegogo&#39; ], \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-08T09:54:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;terjerp&#39; ], \n    text: &#39;RT @terjerp: Nei. Muslimer bør ikke kritisere terror fordi de er muslimer. Alle burde kritisere terror fordi vi er mennesker.&#39;, \n    link: &#39;http://twitter.com/eklem/status/553112380482519042&#39;, \n    id: &#39;tEK3c&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-08T12:55:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;maaemo&#39; ], \n    text: &#39;RT @maaemo: We\\&#39;re super excited to announce that we\\&#39;ll finally be starting our very own farm! https://t.co/hDojBq0ta7&#39;, \n    link: &#39;http://twitter.com/eklem/status/553158023582334976&#39;, \n    id: &#39;3sN9Bs&#39;, \n    tags: null, \n    links: [ &#39;https://t.co/hDojBq0ta7&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-09T09:49:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;martabreen&#39; ], \n    text: &#39;RT @martabreen: Siri Martinsen, du tar matlysten fra meg.\\nhttp://t.co/6Hd456ra4U&#39;, \n    link: &#39;http://twitter.com/eklem/status/553473549252689920&#39;, \n    id: &#39;3QH8Sx&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/6Hd456ra4U&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-13T10:25:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;jamesrbuk&#39; ], \n    text: &#39;RT @jamesrbuk: &quot;Terrorists must never be allowed to change our way of life&quot;: every politician, usually less than 72 hours before trying to change the law.&#39;, \n    link: &#39;http://twitter.com/eklem/status/554932319950098432&#39;, \n    id: &#39;4rwz9a&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-13T10:42:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;kimonolabs&#39; ], \n    text: &#39;Great service you\\&#39;ve created @kimonolabs ! Best #crawler / #screenscraper I\\&#39;ve seen. It\\&#39;ll play nice with #Norch http://t.co/O082gCObaU&#39;, \n    link: &#39;http://twitter.com/eklem/status/554936503668051968&#39;, \n    id: &#39;22V7Lf&#39;, \n    tags: [ &#39;crawler&#39;, &#39;screenscraper&#39;, &#39;norch&#39; ], \n    links: [ &#39;http://t.co/O082gCObaU&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-13T13:27:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;kimonolabs&#39; ], \n    text: &#39;@kimonolabs ... and fit nicely into this idea: http://t.co/Do0RGWQdbr&#39;, \n    link: &#39;http://twitter.com/eklem/status/554978003143622657&#39;, \n    id: &#39;4nXdc7&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/Do0RGWQdbr&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-13T14:10:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;comperiosearch&#39; ], \n    text: &#39;RT @comperiosearch: Velkommen til Comperio\\&#39;s frokostseminar på Hotel Continental 21.januar!  &quot;Digitale helsetjenester og grafteknologi&quot; http://t.co/UkWny2qIKr&#39;, \n    link: &#39;http://twitter.com/eklem/status/554988890487275520&#39;, \n    id: &#39;4aYWc4&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/UkWny2qIKr&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-15T09:40:00+01:00&#39;, \n    user: [ &#39;eklem&#39; ], \n    text: &#39;Enterprise #Search Optimization - #ESO  http://t.co/fqsljnk0Mk&#39;, \n    link: &#39;http://twitter.com/eklem/status/555645579846746112&#39;, \n    id: &#39;1EZrEt&#39;, \n    tags: [ &#39;search&#39;, &#39;eso&#39; ], \n    links: [ &#39;http://t.co/fqsljnk0Mk&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-16T12:56:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;kimonolabs&#39; ], \n    text: &#39;@kimonolabs An idea for your advanced CSS selector editor?\\nhttp://t.co/LiGB8KTz9U&#39;, \n    link: &#39;http://twitter.com/eklem/status/556057487557025792&#39;, \n    id: &#39;geU6C&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/LiGB8KTz9U&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-16T13:31:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;IFTTT&#39; ], \n    text: &#39;@IFTTT Is it possible to add two different blogs to the #wordpress channel?&#39;, \n    link: &#39;http://twitter.com/eklem/status/556066264494637056&#39;, \n    id: &#39;1TBuJC&#39;, \n    tags: [ &#39;wordpress&#39; ], \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-16T15:26:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;andersheger&#39;, &#39;ornulfris&#39; ], \n    text: &#39;@andersheger @ornulfris Ekte?&#39;, \n    link: &#39;http://twitter.com/eklem/status/556095060220338176&#39;, \n    id: &#39;1Aiwol&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-16T15:32:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;andersheger&#39; ], \n    text: &#39;RT @andersheger: Det er nærliggende å tro at BÅDE  Arfan Bhatti og mulla Krekar har politisk vern av Høyre/FrP- regjeringen. http://t.co/QXCHbtIhgM&#39;, \n    link: &#39;http://twitter.com/eklem/status/556096677699129344&#39;, \n    id: &#39;pBNMM&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/QXCHbtIhgM&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-16T21:52:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;IFTTT&#39; ], \n    text: &#39;@IFTTT Cool, thanks!&#39;, \n    link: &#39;http://twitter.com/eklem/status/556192317124915200&#39;, \n    id: &#39;2sCohB&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-17T09:54:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;kimonolabs&#39; ], \n    text: &#39;@kimonolabs Will do!&#39;, \n    link: &#39;http://twitter.com/eklem/status/556374017427656704&#39;, \n    id: &#39;1V3orM&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-22T10:44:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;appear_in&#39; ], \n    text: &#39;Alt for lite egen produktutvikling i Norge. Telenor Digital er en av de få positive med bl.a. @appear_in http://t.co/SvieQxwzwX Heia-heia!&#39;, \n    link: &#39;http://twitter.com/eklem/status/558198459648737280&#39;, \n    id: &#39;41ABFE&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/SvieQxwzwX&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-27T14:14:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;appear_in&#39;, &#39;vivaldibrowser&#39; ], \n    text: &#39;RT @appear_in: Congrats to @vivaldibrowser for making an awesome new #browser with #WebRTC support! appear.in works perfectly :) http://t.co/16hVv5bWMt&#39;, \n    link: &#39;http://twitter.com/eklem/status/560063260184309761&#39;, \n    id: &#39;14e7sP&#39;, \n    tags: [ &#39;browser&#39;, &#39;webrtc&#39; ], \n    links: [ &#39;http://t.co/16hVv5bWMt&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-28T09:39:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;johshholmedahl&#39;, &#39;eklem&#39;, &#39;marit_ab&#39;, &#39;ErlingSmemo&#39; ], \n    text: &#39;RT @johshholmedahl: Jeg har blogget om mine 7 favorittwebfonter. http://t.co/uyrbYigbLl Utfordrer @eklem @marit_ab og @ErlingSmemo til å gjøre det samme :-) #ux&#39;, \n    link: &#39;http://twitter.com/eklem/status/560356369296293888&#39;, \n    id: &#39;36hRB8&#39;, \n    tags: [ &#39;ux&#39; ], \n    links: [ &#39;http://t.co/uyrbYigbLl&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-01-28T09:39:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;johshholmedahl&#39;, &#39;marit_ab&#39;, &#39;ErlingSmemo&#39; ], \n    text: &#39;@johshholmedahl @marit_ab @ErlingSmemo Skal jeg gjøre!&#39;, \n    link: &#39;http://twitter.com/eklem/status/560356435830521856&#39;, \n    id: &#39;2Qiwqy&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-02-02T09:12:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;twitter&#39; ], \n    text: &#39;@twitter just reinvented #bling tag on trends. No more of that please. Too early in the morning. Actually, no time of day that would work.&#39;, \n    link: &#39;http://twitter.com/eklem/status/562161704852017152&#39;, \n    id: &#39;38HUqI&#39;, \n    tags: [ &#39;bling&#39; ], \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-02-05T10:57:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;web_rebels&#39;, &#39;fergiemcdowall&#39; ], \n    text: &#39;RT @web_rebels: A big welcome to our first Norway based speaker; @fergiemcdowall - https://t.co/d4c7fMAUyv&#39;, \n    link: &#39;http://twitter.com/eklem/status/563275108232744960&#39;, \n    id: &#39;1zTthM&#39;, \n    tags: null, \n    links: [ &#39;https://t.co/d4c7fMAUyv&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-02-05T12:17:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;elisabethirg&#39; ], \n    text: &#39;RT @elisabethirg: I have for ex /* yep */ behind a rule. This meant that I didn’t understand why the rule was needed, but it apparently is – so don’t delete.&#39;, \n    link: &#39;http://twitter.com/eklem/status/563295365475364864&#39;, \n    id: &#39;18cUFC&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-02-05T14:03:00+01:00&#39;, \n    user: [ &#39;eklem&#39; ], \n    text: &#39;Bra forhold for bølgesurfing på #Unstad rett rund hjørnet? http://t.co/IopXGWXzFK&#39;, \n    link: &#39;http://twitter.com/eklem/status/563321963498983424&#39;, \n    id: &#39;19z97p&#39;, \n    tags: [ &#39;unstad&#39; ], \n    links: [ &#39;http://t.co/IopXGWXzFK&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-02-09T09:07:00+01:00&#39;, \n    user: [ &#39;eklem&#39; ], \n    text: &#39;#Nerd analysing #beer with cool, new #tools http://t.co/Z3gpsyBM52 #kibana&#39;, \n    link: &#39;http://twitter.com/eklem/status/564697130728964096&#39;, \n    id: &#39;19pJ2s&#39;, \n    tags: [ &#39;nerd&#39;, &#39;beer&#39;, &#39;tools&#39;, &#39;kibana&#39; ], \n    links: [ &#39;http://t.co/Z3gpsyBM52&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-02-13T10:02:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;trygve_lie&#39;, &#39;web_rebels&#39; ], \n    text: &#39;@trygve_lie @web_rebels You\\&#39;ll soon figure it out =)&#39;, \n    link: &#39;http://twitter.com/eklem/status/566160453320339456&#39;, \n    id: &#39;2rgUQM&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-02-13T10:05:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;fergiemcdowall&#39; ], \n    text: &#39;Nice presentation of #Norch, #Node #Search. It\\&#39;s a search engine written in JavaScript. Thnx @fergiemcdowall http://t.co/wI8z2QsGMW&#39;, \n    link: &#39;http://twitter.com/eklem/status/566161222093910016&#39;, \n    id: &#39;3uto6G&#39;, \n    tags: [ &#39;norch&#39;, &#39;node&#39;, &#39;search&#39; ], \n    links: [ &#39;http://t.co/wI8z2QsGMW&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-02-13T10:41:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;Nervetattoo&#39;, &#39;SlackHQ&#39;, &#39;HipChat&#39; ], \n    text: &#39;@Nervetattoo Really happy with @SlackHQ What\\&#39;s better with @HipChat other than you saying so =)&#39;, \n    link: &#39;http://twitter.com/eklem/status/566170270571192320&#39;, \n    id: &#39;2fsR3I&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-02-13T13:47:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;web_rebels&#39; ], \n    text: &#39;Ohaaa, I\\&#39;m going to @web_rebels&#39;, \n    link: &#39;http://twitter.com/eklem/status/566217096171102208&#39;, \n    id: &#39;3LiQ3G&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-02-15T11:11:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;fenilsen&#39;, &#39;SoundsFrench&#39;, &#39;vaartland&#39; ], \n    text: &#39;RT @fenilsen: Et lite blaff av realitetsorientering hos @SoundsFrench i @vaartland, eller bare ufrivillig selvironisk? http://t.co/57tJeUQaDL&#39;, \n    link: &#39;http://twitter.com/eklem/status/566902507218419712&#39;, \n    id: &#39;22UHfp&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/57tJeUQaDL&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-02-16T12:33:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;web_rebels&#39;, &#39;IFTTT&#39;, &#39;googledrive&#39; ], \n    text: &#39;Just added a proposal for Open Mic Night at @web_rebels. Personal #Search based on #Norch @IFTTT and #Google @googledrive Fingers crossed!&#39;, \n    link: &#39;http://twitter.com/eklem/status/567285675708674048&#39;, \n    id: &#39;5Q40F&#39;, \n    tags: [ &#39;search&#39;, &#39;norch&#39;, &#39;google&#39; ], \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-02-16T12:57:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;Ingvild_S&#39;, &#39;oslokommune&#39; ], \n    text: &#39;RT @Ingvild_S: I dag har @oslokommune redusert antall sider på nett med 90%. Imponert over organisasjonen, og veldig glad for å ha vært med på reisen.&#39;, \n    link: &#39;http://twitter.com/eklem/status/567291733143486464&#39;, \n    id: &#39;4b6VUM&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-02-19T13:46:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;kimonolabs&#39; ], \n    text: &#39;@kimonolabs App builder just freezes my browsers. Both Firefox and Chrome. Any suggestion?&#39;, \n    link: &#39;http://twitter.com/eklem/status/568391179479478272&#39;, \n    id: &#39;Mwner&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-02-24T09:54:00+01:00&#39;, \n    user: [ &#39;eklem&#39; ], \n    text: &#39;Media er avslørt: http://t.co/5b3EldQX23&#39;, \n    link: &#39;http://twitter.com/eklem/status/570144846289248256&#39;, \n    id: &#39;1qe86L&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/5b3EldQX23&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-02-24T10:01:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;Bignate435&#39; ], \n    text: &#39;#Node on #Raspbian through a .deb package repository\\nhttps://t.co/IBfb2G4eox Works like a charm! Thanks to @Bignate435&#39;, \n    link: &#39;http://twitter.com/eklem/status/570146377679949824&#39;, \n    id: &#39;2ZfvHH&#39;, \n    tags: [ &#39;node&#39;, &#39;raspbian&#39; ], \n    links: [ &#39;https://t.co/IBfb2G4eox&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-02-24T10:20:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;kimonolabs&#39; ], \n    text: &#39;@kimonolabs I get it working in Chrome after waiting  a couple of minutes. Firefox ( Beta) just freezes. http://t.co/JtQFiouKtv&#39;, \n    link: &#39;http://twitter.com/eklem/status/570151276937396225&#39;, \n    id: &#39;2hzOy8&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/JtQFiouKtv&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-02-25T09:16:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;kimonolabs&#39; ], \n    text: &#39;@kimonolabs Actually, none of them work. Chrome Version 40.0.2214.111 (64-bit)  and Firefox 35.0.1 (OSX 10.10.2). Never get to create an app&#39;, \n    link: &#39;http://twitter.com/eklem/status/570497466061209600&#39;, \n    id: &#39;1XN26e&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-02-26T21:28:00+01:00&#39;, \n    user: [ &#39;eklem&#39; ], \n    text: &#39;Ohaa! Personal #Search, here we come! https://t.co/xfVQeZNpoM&#39;, \n    link: &#39;http://twitter.com/eklem/status/571044161048203265&#39;, \n    id: &#39;XcdJB&#39;, \n    tags: [ &#39;search&#39; ], \n    links: [ &#39;https://t.co/xfVQeZNpoM&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-03-03T21:22:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;mhmoeller&#39;, &#39;rauschma&#39;, &#39;eranhammer&#39; ], \n    text: &#39;@mhmoeller @rauschma I just re-tweeted. Nice read, thanks @eranhammer&#39;, \n    link: &#39;http://twitter.com/eklem/status/572854602317496320&#39;, \n    id: &#39;JoR3q&#39;, \n    tags: null, \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-03-07T14:20:00+01:00&#39;, \n    user: [ &#39;eklem&#39; ], \n    text: &#39;Auto-indexing set up, and first version of Personal #Search running. Blog post later. #RaspberryPi2 works great!&#39;, \n    link: &#39;http://twitter.com/eklem/status/574197935027650560&#39;, \n    id: &#39;20I2XR&#39;, \n    tags: [ &#39;search&#39;, &#39;raspberrypi2&#39; ], \n    links: null, \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-03-10T22:40:00+01:00&#39;, \n    user: [ &#39;eklem&#39; ], \n    text: &#39;Personal Search comming along nicely. Check out the search information model and what the future holds! http://t.co/Rl5ekiSNV0&#39;, \n    link: &#39;http://twitter.com/eklem/status/575410876435464192&#39;, \n    id: &#39;1XeKrT&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/Rl5ekiSNV0&#39; ], \n    type: [ &#39;Twitter&#39; ] }, \n  { date: &#39;2015-03-10T22:50:00+01:00&#39;, \n    user: [ &#39;eklem&#39;, &#39;web_rebels&#39; ], \n    text: &#39;@web_rebels Personal search on schedule: http://t.co/yQlQFxGRA1&#39;, \n    link: &#39;http://twitter.com/eklem/status/575413353696395265&#39;, \n    id: &#39;3p9g6L&#39;, \n    tags: null, \n    links: [ &#39;http://t.co/yQlQFxGRA1&#39; ], \n    type: [ &#39;Twitter&#39; ] } ] \n</code></p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/80",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-15T21:27:00+01:00",
        "teasertext": "Using this code to add documents to the index \n \n  si.add({'batchName': config.batchname, 'filters': config.filters}, result.data, function(err) { \n    if (!err) console.log('indexed!') \n  }) \n \n\nFirst time I get 88 as count when I search for &quot;*&quot;, second time I get 173 documents, third time I get &quot;258&quot;. Only count seems off, amount of results actually shown in a given search stays the same. \n\nData I index: \n \n[ { date: '2014-11-10T22:20:00+01:00', \n    user: [ 'eklem' ], \n    text: 'What in your online life would be interesting for you to have #searchable ? #search #events #sites', \n    link: 'http://ift.tt/1uUH33u', \n    id: '3ABtU', \n    tags: [ 'searchable', 'search', 'events', 'sites' ], \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-13T10:22:00+01:00', \n    user: [ 'eklem', 'labs_finn_no', 'IFTTT' ], \n    text: '@labs_finn_no På tide å utvikle triggere for @IFTTT ? https://t.co/n9OAv49fXS Tenk på all moroa folk kan gjøre da!', \n    link: 'http://twitter.com/eklem/status/532825696486563840', \n    id: '1bwKxq', \n    tags: null, \n    links: [ 'https://t.co/n9OAv49fXS' ], \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-13T10:39:00+01:00', \n    user: [ 'eklem', 'labs_finn_no', 'SchibstedGroup', 'SchibstedGrowth' ], \n    text: '@labs_finn_no Eller få @SchibstedGroup / @SchibstedGrowth til å utvikle eller investere i noe tilsvarende?', \n    link: 'http://twitter.com/eklem/status/532830002002546689', \n    id: '3png34', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-13T10:55:00+01:00', \n    user: [ 'eklem', 'ramyo', 'Yggdrasil2015' ], \n    text: 'RT @ramyo: Har akkurat foreslått et foredrag til @Yggdrasil2015: “Hvordan få til god designkritikk”. Håper det blir antatt – Yggdrasil er alltid moro!', \n    link: 'http://twitter.com/eklem/status/532834125749948416', \n    id: '1MmNVn', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-15T09:34:00+01:00', \n    user: [ 'eklem', 'hildecs' ], \n    text: 'RT @hildecs: Nå har det kokt over for Aftenposten. &quot;Fikk kroppen full av tungmetaller og parasitter&quot; http://t.co/RD46U3MPgv #kvakksalverspråk', \n    link: 'http://twitter.com/eklem/status/533538592912850944', \n    id: 'THf0S', \n    tags: [ 'kvakksalverspråk' ], \n    links: [ 'http://t.co/RD46U3MPgv' ], \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-15T09:39:00+01:00', \n    user: [ 'eklem', 'hildecs', 'frmartinsen' ], \n    text: '@hildecs @frmartinsen Hehe &quot;skannet kroppen og målte energien i cellene&quot; + tyske leger. Sikker vinner!', \n    link: 'http://twitter.com/eklem/status/533539718181687296', \n    id: 'YCIeK', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-15T17:30:00+01:00', \n    user: [ 'eklem' ], \n    text: 'Noen som savner denne fete kjerra? #inntauing #pimpmyride http://t.co/eVsEpjRQyv', \n    link: 'http://twitter.com/eklem/status/533658235027595264', \n    id: 'xLKc4', \n    tags: [ 'inntauing', 'pimpmyride' ], \n    links: [ 'http://t.co/eVsEpjRQyv' ], \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-17T05:07:00+01:00', \n    user: [ 'eklem', 'Ruter' ], \n    text: '@Ruter greit å åpne stasjonen i tide til første T-bane?', \n    link: 'http://twitter.com/eklem/status/534196012584554496', \n    id: '1bYSFj', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-17T05:07:00+01:00', \n    user: [ 'eklem', 'ruter' ], \n    text: '@ruter http://t.co/2EROVvOZZv', \n    link: 'http://twitter.com/eklem/status/534196157178994688', \n    id: 'O6RUy', \n    tags: null, \n    links: [ 'http://t.co/2EROVvOZZv' ], \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-18T09:47:00+01:00', \n    user: [ 'eklem', 'Ruter' ], \n    text: '@Ruter Null svar... Altså: Dere bør åpne T-banestasjonene i tide? Og vakta bør kanskje ikke bruke skinnegangen mellom perrongene i jobben?', \n    link: 'http://twitter.com/eklem/status/534628973888937984', \n    id: '2X3ZFV', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-18T09:50:00+01:00', \n    user: [ 'eklem', 'johanhal', 'hanekamhaug' ], \n    text: '@johanhal @hanekamhaug Noen outer seg selv, flere kommentarer overflødig... ?', \n    link: 'http://twitter.com/eklem/status/534629594801135616', \n    id: '4kzwg3', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-18T10:55:00+01:00', \n    user: [ 'eklem', 'Ruter' ], \n    text: '@Ruter Takker!', \n    link: 'http://twitter.com/eklem/status/534646126347964416', \n    id: '3mGbV2', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-18T10:58:00+01:00', \n    user: [ 'eklem', 'Ruter' ], \n    text: '@Ruter Takke!', \n    link: 'http://twitter.com/eklem/status/534646758186708993', \n    id: '41FIRP', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-18T14:25:00+01:00', \n    user: [ 'eklem', 'basbrommet', 'kickstarter' ], \n    text: 'RT @basbrommet: Lease A Jeans: Earth wants your jeans back by Mud Jeans http://t.co/6cnmMUZqzt via @kickstarter', \n    link: 'http://twitter.com/eklem/status/534698976940158977', \n    id: '3EKpMb', \n    tags: null, \n    links: [ 'http://t.co/6cnmMUZqzt' ], \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-18T21:18:00+01:00', \n    user: [ 'eklem', 'JensBP' ], \n    text: 'RT @JensBP: Forskere mener &quot;kristen kulturarv&quot; er en konstruksjon og misbrukes i politisk hestehandling. http://t.co/Fm4Oi4lzeV', \n    link: 'http://twitter.com/eklem/status/534802871473422337', \n    id: '3YqQ0V', \n    tags: null, \n    links: [ 'http://t.co/Fm4Oi4lzeV' ], \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-19T12:14:00+01:00', \n    user: [ 'eklem' ], \n    text: '#Google har masse interne verktøy for bedrifter. Noen som jobber med å integrere/etablere dette hos kunder?', \n    link: 'http://twitter.com/eklem/status/535028298276171776', \n    id: '3ZyJQP', \n    tags: [ 'google' ], \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-19T12:35:00+01:00', \n    user: [ 'eklem', 'johshholmedahl' ], \n    text: '@johshholmedahl Så kult! Noe blogposter om erfaringer og utbytte?', \n    link: 'http://twitter.com/eklem/status/535033737957081088', \n    id: '1uIsCB', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-19T15:45:00+01:00', \n    user: [ 'eklem', 'GoogleforWork' ], \n    text: '@GoogleforWork Is there a possibility to have one search box searching Gmail, Calendar, Contacts, Drive etc?', \n    link: 'http://twitter.com/eklem/status/535081479026769920', \n    id: '4wGPOl', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-19T16:03:00+01:00', \n    user: [ 'eklem', 'GoogleforWork' ], \n    text: '@GoogleforWork ... and Hangouts?', \n    link: 'http://twitter.com/eklem/status/535086032623243265', \n    id: '3GQvqi', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-20T08:59:00+01:00', \n    user: [ 'eklem', 'ironskyfilm' ], \n    text: '@ironskyfilm Tried to share this page, but got an error http://t.co/OhIAtOtgfQ http://t.co/1fPHD4eKbV', \n    link: 'http://twitter.com/eklem/status/535341562872754176', \n    id: '4avLPI', \n    tags: null, \n    links: [ 'http://t.co/OhIAtOtgfQ', 'http://t.co/1fPHD4eKbV' ], \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-24T10:16:00+01:00', \n    user: [ 'eklem', 'ironskyfilm' ], \n    text: '@ironskyfilm Working now. Thanks!', \n    link: 'http://twitter.com/eklem/status/536810615395061760', \n    id: '4k17Cd', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-24T13:56:00+01:00', \n    user: [ 'eklem' ], \n    text: 'Will embed-view of your content replace the preview-pane in modern #search  #engine solutions? Why preview when you can have the real deal?', \n    link: 'http://twitter.com/eklem/status/536866049078333440', \n    id: '1Xugfm', \n    tags: [ 'search', 'engine' ], \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-24T15:35:00+01:00', \n    user: [ 'eklem', 'johshholmedahl' ], \n    text: '@johshholmedahl Nei med andre ord =)', \n    link: 'http://twitter.com/eklem/status/536890737192075264', \n    id: '2CMM13', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-25T14:39:00+01:00', \n    user: [ 'eklem' ], \n    text: 'Idea: Your life, indexed and available through Norch, NOde seaRCH - http://t.co/pkEs4TW7Xb', \n    link: 'http://twitter.com/eklem/status/537239093810176001', \n    id: 'ANeTb', \n    tags: null, \n    links: [ 'http://t.co/pkEs4TW7Xb' ], \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-25T20:34:00+01:00', \n    user: [ 'eklem', 'instructables' ], \n    text: 'RT @instructables: Open Toys, hack your veggies with 3D Printing http://t.co/yQvigeVdS7 http://t.co/DAZNnK7INO', \n    link: 'http://twitter.com/eklem/status/537328381512392706', \n    id: '4Gdy4k', \n    tags: null, \n    links: [ 'http://t.co/yQvigeVdS7', 'http://t.co/DAZNnK7INO' ], \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-25T20:58:00+01:00', \n    user: [ 'eklem' ], \n    text: 'Anyone that could be interested in a #search solution like this? \\nhttp://t.co/8uVxaqW8o6', \n    link: 'http://twitter.com/eklem/status/537334627246301184', \n    id: '2HCMZb', \n    tags: [ 'search' ], \n    links: [ 'http://t.co/8uVxaqW8o6' ], \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-25T21:52:00+01:00', \n    user: [ 'eklem' ], \n    text: 'Sharing. Statistics, so far. Google+(0),LinkedIn(1),Facebook(4),Twitter(5),Hacknews(12),Reddit(30)', \n    link: 'http://twitter.com/eklem/status/537348165750767617', \n    id: '2fCK33', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-26T09:41:00+01:00', \n    user: [ 'eklem', 'inconvergent' ], \n    text: '@inconvergent What happened?', \n    link: 'http://twitter.com/eklem/status/537526476774838272', \n    id: '21HOM0', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-26T15:02:00+01:00', \n    user: [ 'eklem', 'tikikate', 'RubenBolling' ], \n    text: 'RT @tikikate: &quot;Fart-sound App Maker&quot;\\n\\nMT @RubenBolling\\n\\nRichard Scarry\\'s Bush 21st Century\\n\\nhttp://t.co/LswGgcoekL http://t.co/sH7GdG22Dr', \n    link: 'http://twitter.com/eklem/status/537607428951773184', \n    id: '1fAqcM', \n    tags: null, \n    links: [ 'http://t.co/LswGgcoekL', 'http://t.co/sH7GdG22Dr' ], \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-27T10:11:00+01:00', \n    user: [ 'eklem', 'EinarWilly', 'delveien', 'Presserom' ], \n    text: 'RT @EinarWilly: Prøvde ut  nye sykkelfeltet i #Eufemiasgtate  Konklusjon. Funksjonell løsning kun om man finner opp teleportering.  @delveien @Presserom', \n    link: 'http://twitter.com/eklem/status/537896398176661504', \n    id: '7CGcR', \n    tags: [ 'eufemiasgtate' ], \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-11-27T10:59:00+01:00', \n    user: [ 'eklem', 'thomax' ], \n    text: 'RT @thomax: Bengler does it again! Sjekk denne visualiseringen http://t.co/ZZQKHULORV av klodens fremtid og hvilke tiltak som funker #IPCC #klima', \n    link: 'http://twitter.com/eklem/status/537908678322835456', \n    id: '2IjiO', \n    tags: [ 'ipcc', 'klima' ], \n    links: [ 'http://t.co/ZZQKHULORV' ], \n    type: [ 'Twitter' ] }, \n  { date: '2014-12-01T12:58:00+01:00', \n    user: [ 'eklem' ], \n    text: 'Hvor er undersøkelsen om jeg faktisk ønsker en hel undersøkelse etter et enkelt kjøp på nett? Nok nå...', \n    link: 'http://twitter.com/eklem/status/539388155439624193', \n    id: '33owhM', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-12-02T15:54:00+01:00', \n    user: [ 'eklem' ], \n    text: 'Testing Search without search box: Recipe App  – Alpha version  http://t.co/FhD2WyfDsL', \n    link: 'http://twitter.com/eklem/status/539794643911602176', \n    id: '2vcEPt', \n    tags: null, \n    links: [ 'http://t.co/FhD2WyfDsL' ], \n    type: [ 'Twitter' ] }, \n  { date: '2014-12-03T16:31:00+01:00', \n    user: [ 'eklem', 'ChrSorgjerd' ], \n    text: '@ChrSorgjerd Telthusbakken opp fra Maridalsveien!', \n    link: 'http://twitter.com/eklem/status/540166423860219905', \n    id: '25xHo5', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-12-09T10:55:00+01:00', \n    user: [ 'eklem', 'labs_finn_no', 'FINN_no' ], \n    text: '@labs_finn_no @FINN_no Jeg skjønner hvorfor folk ikke bruker sikker betaling. Ikke veldig brukervennlig.', \n    link: 'http://twitter.com/eklem/status/542256129490059264', \n    id: '20iYoY', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-12-09T10:56:00+01:00', \n    user: [ 'eklem', 'labs_finn_no', 'FINN_no' ], \n    text: '@labs_finn_no @FINN_no 1: Forklaring ut fra teknisk ståsted. 2: Masse tekst istedenfor selvforklarende. 3: Usikker på hva neste trinn er', \n    link: 'http://twitter.com/eklem/status/542256551000801280', \n    id: '4jIhpJ', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-12-09T20:38:00+01:00', \n    user: [ 'eklem' ], \n    text: 'Google Play Movies must be Google\\'s worst #search experience? Query: &quot;Hobbit&quot; --&amp;gt; Result: &quot;The Dark Knight Rises&quot;', \n    link: 'http://twitter.com/eklem/status/542402910881980416', \n    id: 'dQ7Jw', \n    tags: [ 'search' ], \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-12-13T11:00:00+01:00', \n    user: [ 'eklem', 'Reuters' ], \n    text: 'RT @Reuters: A surfer drops in on a large wave at Praia do Norte. Editor\\'s Choice photos: http://t.co/80WiUujjSm http://t.co/sYqam8FiYp', \n    link: 'http://twitter.com/eklem/status/543707071019900928', \n    id: '1nw8QH', \n    tags: null, \n    links: [ 'http://t.co/80WiUujjSm', 'http://t.co/sYqam8FiYp' ], \n    type: [ 'Twitter' ] }, \n  { date: '2014-12-15T09:39:00+01:00', \n    user: [ 'eklem', 'anniken', 'johanhal' ], \n    text: 'RT @anniken: @johanhal Litt spesielt, i hvert fall. &quot;Lær engelsk! For pensjonister og menn.&quot;', \n    link: 'http://twitter.com/eklem/status/544411456180338688', \n    id: 'p9Vzi', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-12-15T09:52:00+01:00', \n    user: [ 'eklem', 'anniken', 'johanhal', 'iacob' ], \n    text: '@anniken @johanhal @iacob Min erfaring er at eneste måten å få med alle er å lytte til hva de vil ha og ikke  ikke fordumme/rosa-ifisere', \n    link: 'http://twitter.com/eklem/status/544414743508045824', \n    id: 'bCibL', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-12-17T10:04:00+01:00', \n    user: [ 'eklem', 'IFTTT' ], \n    text: '@IFTTT How about a title-row when inserting to Google Drive? Would make this much closer to reality: http://t.co/qfdjmY3m0y #lifeindex', \n    link: 'http://twitter.com/eklem/status/545142512869212160', \n    id: '3ud5Yd', \n    tags: [ 'lifeindex' ], \n    links: [ 'http://t.co/qfdjmY3m0y' ], \n    type: [ 'Twitter' ] }, \n  { date: '2014-12-17T10:56:00+01:00', \n    user: [ 'eklem', 'Ingeborgborg', 'JenSorensen' ], \n    text: 'RT @Ingeborgborg: Denne er veldig god. @JenSorensen http://t.co/KuhaVkEPtk', \n    link: 'http://twitter.com/eklem/status/545155461163782144', \n    id: 'lkTwz', \n    tags: null, \n    links: [ 'http://t.co/KuhaVkEPtk' ], \n    type: [ 'Twitter' ] }, \n  { date: '2014-12-17T10:56:00+01:00', \n    user: [ 'eklem', 'Gj3rt' ], \n    text: 'RT @Gj3rt: Når vi blir gamle ... http://t.co/ggDPbnjuUb', \n    link: 'http://twitter.com/eklem/status/545155478435942400', \n    id: '2ccpHZ', \n    tags: null, \n    links: [ 'http://t.co/ggDPbnjuUb' ], \n    type: [ 'Twitter' ] }, \n  { date: '2014-12-19T10:43:00+01:00', \n    user: [ 'eklem', 'IFTTT' ], \n    text: '@IFTTT Cool! That would bring us one step closer to a service that people will pay for =)', \n    link: 'http://twitter.com/eklem/status/545877120871043072', \n    id: '3I8QBi', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2014-12-23T12:35:00+01:00', \n    user: [ 'eklem', 'holajoan' ], \n    text: 'RT @holajoan: I assume somebody has done this before but I just couldn\\'t contain. Meet Dron Draper. http://t.co/r88dti3esb', \n    link: 'http://twitter.com/eklem/status/547354703336849408', \n    id: '4eQ6Vw', \n    tags: null, \n    links: [ 'http://t.co/r88dti3esb' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-01T20:23:00+01:00', \n    user: [ 'eklem' ], \n    text: 'Nice chance to join the premiere of Iron Sky The Coming Race + premiere party in Helsinki/Berlin: http://t.co/E1h40z3cgA', \n    link: 'http://twitter.com/eklem/status/550734183501692928', \n    id: '30FCGi', \n    tags: null, \n    links: [ 'http://t.co/E1h40z3cgA' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-01T20:30:00+01:00', \n    user: [ 'eklem', 'inconvergent' ], \n    text: 'RT @inconvergent: different perspective. #generative http://t.co/v5YlhULpo7', \n    link: 'http://twitter.com/eklem/status/550735918840422400', \n    id: '4eeNC0', \n    tags: [ 'generative' ], \n    links: [ 'http://t.co/v5YlhULpo7' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-06T12:50:00+01:00', \n    user: [ 'eklem', 'terokaukomaa' ], \n    text: 'RT @terokaukomaa: Just completed #IronSkyTheComingRace 60 days fight succesfully in #IndieGoGo with 560.949 dollars from 8048 contributors. Huge Thank!', \n    link: 'http://twitter.com/eklem/status/552432066378616832', \n    id: 'MtbHY', \n    tags: [ 'ironskythecomingrace', 'indiegogo' ], \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-08T09:54:00+01:00', \n    user: [ 'eklem', 'terjerp' ], \n    text: 'RT @terjerp: Nei. Muslimer bør ikke kritisere terror fordi de er muslimer. Alle burde kritisere terror fordi vi er mennesker.', \n    link: 'http://twitter.com/eklem/status/553112380482519042', \n    id: 'tEK3c', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-08T12:55:00+01:00', \n    user: [ 'eklem', 'maaemo' ], \n    text: 'RT @maaemo: We\\'re super excited to announce that we\\'ll finally be starting our very own farm! https://t.co/hDojBq0ta7', \n    link: 'http://twitter.com/eklem/status/553158023582334976', \n    id: '3sN9Bs', \n    tags: null, \n    links: [ 'https://t.co/hDojBq0ta7' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-09T09:49:00+01:00', \n    user: [ 'eklem', 'martabreen' ], \n    text: 'RT @martabreen: Siri Martinsen, du tar matlysten fra meg.\\nhttp://t.co/6Hd456ra4U', \n    link: 'http://twitter.com/eklem/status/553473549252689920', \n    id: '3QH8Sx', \n    tags: null, \n    links: [ 'http://t.co/6Hd456ra4U' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-13T10:25:00+01:00', \n    user: [ 'eklem', 'jamesrbuk' ], \n    text: 'RT @jamesrbuk: &quot;Terrorists must never be allowed to change our way of life&quot;: every politician, usually less than 72 hours before trying to change the law.', \n    link: 'http://twitter.com/eklem/status/554932319950098432', \n    id: '4rwz9a', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-13T10:42:00+01:00', \n    user: [ 'eklem', 'kimonolabs' ], \n    text: 'Great service you\\'ve created @kimonolabs ! Best #crawler / #screenscraper I\\'ve seen. It\\'ll play nice with #Norch http://t.co/O082gCObaU', \n    link: 'http://twitter.com/eklem/status/554936503668051968', \n    id: '22V7Lf', \n    tags: [ 'crawler', 'screenscraper', 'norch' ], \n    links: [ 'http://t.co/O082gCObaU' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-13T13:27:00+01:00', \n    user: [ 'eklem', 'kimonolabs' ], \n    text: '@kimonolabs ... and fit nicely into this idea: http://t.co/Do0RGWQdbr', \n    link: 'http://twitter.com/eklem/status/554978003143622657', \n    id: '4nXdc7', \n    tags: null, \n    links: [ 'http://t.co/Do0RGWQdbr' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-13T14:10:00+01:00', \n    user: [ 'eklem', 'comperiosearch' ], \n    text: 'RT @comperiosearch: Velkommen til Comperio\\'s frokostseminar på Hotel Continental 21.januar!  &quot;Digitale helsetjenester og grafteknologi&quot; http://t.co/UkWny2qIKr', \n    link: 'http://twitter.com/eklem/status/554988890487275520', \n    id: '4aYWc4', \n    tags: null, \n    links: [ 'http://t.co/UkWny2qIKr' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-15T09:40:00+01:00', \n    user: [ 'eklem' ], \n    text: 'Enterprise #Search Optimization - #ESO  http://t.co/fqsljnk0Mk', \n    link: 'http://twitter.com/eklem/status/555645579846746112', \n    id: '1EZrEt', \n    tags: [ 'search', 'eso' ], \n    links: [ 'http://t.co/fqsljnk0Mk' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-16T12:56:00+01:00', \n    user: [ 'eklem', 'kimonolabs' ], \n    text: '@kimonolabs An idea for your advanced CSS selector editor?\\nhttp://t.co/LiGB8KTz9U', \n    link: 'http://twitter.com/eklem/status/556057487557025792', \n    id: 'geU6C', \n    tags: null, \n    links: [ 'http://t.co/LiGB8KTz9U' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-16T13:31:00+01:00', \n    user: [ 'eklem', 'IFTTT' ], \n    text: '@IFTTT Is it possible to add two different blogs to the #wordpress channel?', \n    link: 'http://twitter.com/eklem/status/556066264494637056', \n    id: '1TBuJC', \n    tags: [ 'wordpress' ], \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-16T15:26:00+01:00', \n    user: [ 'eklem', 'andersheger', 'ornulfris' ], \n    text: '@andersheger @ornulfris Ekte?', \n    link: 'http://twitter.com/eklem/status/556095060220338176', \n    id: '1Aiwol', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-16T15:32:00+01:00', \n    user: [ 'eklem', 'andersheger' ], \n    text: 'RT @andersheger: Det er nærliggende å tro at BÅDE  Arfan Bhatti og mulla Krekar har politisk vern av Høyre/FrP- regjeringen. http://t.co/QXCHbtIhgM', \n    link: 'http://twitter.com/eklem/status/556096677699129344', \n    id: 'pBNMM', \n    tags: null, \n    links: [ 'http://t.co/QXCHbtIhgM' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-16T21:52:00+01:00', \n    user: [ 'eklem', 'IFTTT' ], \n    text: '@IFTTT Cool, thanks!', \n    link: 'http://twitter.com/eklem/status/556192317124915200', \n    id: '2sCohB', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-17T09:54:00+01:00', \n    user: [ 'eklem', 'kimonolabs' ], \n    text: '@kimonolabs Will do!', \n    link: 'http://twitter.com/eklem/status/556374017427656704', \n    id: '1V3orM', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-22T10:44:00+01:00', \n    user: [ 'eklem', 'appear_in' ], \n    text: 'Alt for lite egen produktutvikling i Norge. Telenor Digital er en av de få positive med bl.a. @appear_in http://t.co/SvieQxwzwX Heia-heia!', \n    link: 'http://twitter.com/eklem/status/558198459648737280', \n    id: '41ABFE', \n    tags: null, \n    links: [ 'http://t.co/SvieQxwzwX' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-27T14:14:00+01:00', \n    user: [ 'eklem', 'appear_in', 'vivaldibrowser' ], \n    text: 'RT @appear_in: Congrats to @vivaldibrowser for making an awesome new #browser with #WebRTC support! appear.in works perfectly :) http://t.co/16hVv5bWMt', \n    link: 'http://twitter.com/eklem/status/560063260184309761', \n    id: '14e7sP', \n    tags: [ 'browser', 'webrtc' ], \n    links: [ 'http://t.co/16hVv5bWMt' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-28T09:39:00+01:00', \n    user: [ 'eklem', 'johshholmedahl', 'eklem', 'marit_ab', 'ErlingSmemo' ], \n    text: 'RT @johshholmedahl: Jeg har blogget om mine 7 favorittwebfonter. http://t.co/uyrbYigbLl Utfordrer @eklem @marit_ab og @ErlingSmemo til å gjøre det samme :-) #ux', \n    link: 'http://twitter.com/eklem/status/560356369296293888', \n    id: '36hRB8', \n    tags: [ 'ux' ], \n    links: [ 'http://t.co/uyrbYigbLl' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-01-28T09:39:00+01:00', \n    user: [ 'eklem', 'johshholmedahl', 'marit_ab', 'ErlingSmemo' ], \n    text: '@johshholmedahl @marit_ab @ErlingSmemo Skal jeg gjøre!', \n    link: 'http://twitter.com/eklem/status/560356435830521856', \n    id: '2Qiwqy', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-02-02T09:12:00+01:00', \n    user: [ 'eklem', 'twitter' ], \n    text: '@twitter just reinvented #bling tag on trends. No more of that please. Too early in the morning. Actually, no time of day that would work.', \n    link: 'http://twitter.com/eklem/status/562161704852017152', \n    id: '38HUqI', \n    tags: [ 'bling' ], \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-02-05T10:57:00+01:00', \n    user: [ 'eklem', 'web_rebels', 'fergiemcdowall' ], \n    text: 'RT @web_rebels: A big welcome to our first Norway based speaker; @fergiemcdowall - https://t.co/d4c7fMAUyv', \n    link: 'http://twitter.com/eklem/status/563275108232744960', \n    id: '1zTthM', \n    tags: null, \n    links: [ 'https://t.co/d4c7fMAUyv' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-02-05T12:17:00+01:00', \n    user: [ 'eklem', 'elisabethirg' ], \n    text: 'RT @elisabethirg: I have for ex /* yep */ behind a rule. This meant that I didn’t understand why the rule was needed, but it apparently is – so don’t delete.', \n    link: 'http://twitter.com/eklem/status/563295365475364864', \n    id: '18cUFC', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-02-05T14:03:00+01:00', \n    user: [ 'eklem' ], \n    text: 'Bra forhold for bølgesurfing på #Unstad rett rund hjørnet? http://t.co/IopXGWXzFK', \n    link: 'http://twitter.com/eklem/status/563321963498983424', \n    id: '19z97p', \n    tags: [ 'unstad' ], \n    links: [ 'http://t.co/IopXGWXzFK' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-02-09T09:07:00+01:00', \n    user: [ 'eklem' ], \n    text: '#Nerd analysing #beer with cool, new #tools http://t.co/Z3gpsyBM52 #kibana', \n    link: 'http://twitter.com/eklem/status/564697130728964096', \n    id: '19pJ2s', \n    tags: [ 'nerd', 'beer', 'tools', 'kibana' ], \n    links: [ 'http://t.co/Z3gpsyBM52' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-02-13T10:02:00+01:00', \n    user: [ 'eklem', 'trygve_lie', 'web_rebels' ], \n    text: '@trygve_lie @web_rebels You\\'ll soon figure it out =)', \n    link: 'http://twitter.com/eklem/status/566160453320339456', \n    id: '2rgUQM', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-02-13T10:05:00+01:00', \n    user: [ 'eklem', 'fergiemcdowall' ], \n    text: 'Nice presentation of #Norch, #Node #Search. It\\'s a search engine written in JavaScript. Thnx @fergiemcdowall http://t.co/wI8z2QsGMW', \n    link: 'http://twitter.com/eklem/status/566161222093910016', \n    id: '3uto6G', \n    tags: [ 'norch', 'node', 'search' ], \n    links: [ 'http://t.co/wI8z2QsGMW' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-02-13T10:41:00+01:00', \n    user: [ 'eklem', 'Nervetattoo', 'SlackHQ', 'HipChat' ], \n    text: '@Nervetattoo Really happy with @SlackHQ What\\'s better with @HipChat other than you saying so =)', \n    link: 'http://twitter.com/eklem/status/566170270571192320', \n    id: '2fsR3I', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-02-13T13:47:00+01:00', \n    user: [ 'eklem', 'web_rebels' ], \n    text: 'Ohaaa, I\\'m going to @web_rebels', \n    link: 'http://twitter.com/eklem/status/566217096171102208', \n    id: '3LiQ3G', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-02-15T11:11:00+01:00', \n    user: [ 'eklem', 'fenilsen', 'SoundsFrench', 'vaartland' ], \n    text: 'RT @fenilsen: Et lite blaff av realitetsorientering hos @SoundsFrench i @vaartland, eller bare ufrivillig selvironisk? http://t.co/57tJeUQaDL', \n    link: 'http://twitter.com/eklem/status/566902507218419712', \n    id: '22UHfp', \n    tags: null, \n    links: [ 'http://t.co/57tJeUQaDL' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-02-16T12:33:00+01:00', \n    user: [ 'eklem', 'web_rebels', 'IFTTT', 'googledrive' ], \n    text: 'Just added a proposal for Open Mic Night at @web_rebels. Personal #Search based on #Norch @IFTTT and #Google @googledrive Fingers crossed!', \n    link: 'http://twitter.com/eklem/status/567285675708674048', \n    id: '5Q40F', \n    tags: [ 'search', 'norch', 'google' ], \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-02-16T12:57:00+01:00', \n    user: [ 'eklem', 'Ingvild_S', 'oslokommune' ], \n    text: 'RT @Ingvild_S: I dag har @oslokommune redusert antall sider på nett med 90%. Imponert over organisasjonen, og veldig glad for å ha vært med på reisen.', \n    link: 'http://twitter.com/eklem/status/567291733143486464', \n    id: '4b6VUM', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-02-19T13:46:00+01:00', \n    user: [ 'eklem', 'kimonolabs' ], \n    text: '@kimonolabs App builder just freezes my browsers. Both Firefox and Chrome. Any suggestion?', \n    link: 'http://twitter.com/eklem/status/568391179479478272', \n    id: 'Mwner', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-02-24T09:54:00+01:00', \n    user: [ 'eklem' ], \n    text: 'Media er avslørt: http://t.co/5b3EldQX23', \n    link: 'http://twitter.com/eklem/status/570144846289248256', \n    id: '1qe86L', \n    tags: null, \n    links: [ 'http://t.co/5b3EldQX23' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-02-24T10:01:00+01:00', \n    user: [ 'eklem', 'Bignate435' ], \n    text: '#Node on #Raspbian through a .deb package repository\\nhttps://t.co/IBfb2G4eox Works like a charm! Thanks to @Bignate435', \n    link: 'http://twitter.com/eklem/status/570146377679949824', \n    id: '2ZfvHH', \n    tags: [ 'node', 'raspbian' ], \n    links: [ 'https://t.co/IBfb2G4eox' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-02-24T10:20:00+01:00', \n    user: [ 'eklem', 'kimonolabs' ], \n    text: '@kimonolabs I get it working in Chrome after waiting  a couple of minutes. Firefox ( Beta) just freezes. http://t.co/JtQFiouKtv', \n    link: 'http://twitter.com/eklem/status/570151276937396225', \n    id: '2hzOy8', \n    tags: null, \n    links: [ 'http://t.co/JtQFiouKtv' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-02-25T09:16:00+01:00', \n    user: [ 'eklem', 'kimonolabs' ], \n    text: '@kimonolabs Actually, none of them work. Chrome Version 40.0.2214.111 (64-bit)  and Firefox 35.0.1 (OSX 10.10.2). Never get to create an app', \n    link: 'http://twitter.com/eklem/status/570497466061209600', \n    id: '1XN26e', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-02-26T21:28:00+01:00', \n    user: [ 'eklem' ], \n    text: 'Ohaa! Personal #Search, here we come! https://t.co/xfVQeZNpoM', \n    link: 'http://twitter.com/eklem/status/571044161048203265', \n    id: 'XcdJB', \n    tags: [ 'search' ], \n    links: [ 'https://t.co/xfVQeZNpoM' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-03-03T21:22:00+01:00', \n    user: [ 'eklem', 'mhmoeller', 'rauschma', 'eranhammer' ], \n    text: '@mhmoeller @rauschma I just re-tweeted. Nice read, thanks @eranhammer', \n    link: 'http://twitter.com/eklem/status/572854602317496320', \n    id: 'JoR3q', \n    tags: null, \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-03-07T14:20:00+01:00', \n    user: [ 'eklem' ], \n    text: 'Auto-indexing set up, and first version of Personal #Search running. Blog post later. #RaspberryPi2 works great!', \n    link: 'http://twitter.com/eklem/status/574197935027650560', \n    id: '20I2XR', \n    tags: [ 'search', 'raspberrypi2' ], \n    links: null, \n    type: [ 'Twitter' ] }, \n  { date: '2015-03-10T22:40:00+01:00', \n    user: [ 'eklem' ], \n    text: 'Personal Search comming along nicely. Check out the search information model and what the future holds! http://t.co/Rl5ekiSNV0', \n    link: 'http://twitter.com/eklem/status/575410876435464192', \n    id: '1XeKrT', \n    tags: null, \n    links: [ 'http://t.co/Rl5ekiSNV0' ], \n    type: [ 'Twitter' ] }, \n  { date: '2015-03-10T22:50:00+01:00', \n    user: [ 'eklem', 'web_rebels' ], \n    text: '@web_rebels Personal search on schedule: http://t.co/yQlQFxGRA1', \n    link: 'http://twitter.com/eklem/status/575413353696395265', \n    id: '3p9g6L', \n    tags: null, \n    links: [ 'http://t.co/yQlQFxGRA1' ], \n    type: [ 'Twitter' ] } ] \n",
        "tags": [
            "creates",
            "duplicate",
            "document",
            "count"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4ANYud"
    },
    {
        "date": 1426538880000,
        "repository": "norch-bootstrap",
        "title": "Fixing issues with searchbox on cellphone and small screens + bootstrap upgrade",
        "text": "<p>Moved the searchbox out of the header, made it wider big screens, and smaller (by steps) on small screens, but utilising the with of the screen. </p>\n\n<p>Changes only done to the css/norch-bootstrap.css-file and the index.js-file. </p>\n\n<p> Also upgraded bootstrap from v.3.3.1 to v3.3.4.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/pull/20",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-16T21:48:00+01:00",
        "teasertext": "Moved the searchbox out of the header, made it wider big screens, and smaller (by steps) on small screens, but utilising the with of the screen. \n\nChanges only done to the css/norch-bootstrap.css-file and the index.js-file. \n\n Also upgraded bootstrap from v.3.3.1 to v3.3.4.",
        "tags": [
            "upgrade",
            "searchbox",
            "small",
            "bootstrap"
        ],
        "type": [
            "GitHub"
        ],
        "id": "K57pV"
    },
    {
        "date": 1426665900000,
        "repository": "life-index",
        "title": "Embedded view instead of preview",
        "text": "<p>Show the real deal instead of a preview for a search result item. More info here: https://github.com/fergiemcdowall/norch-bootstrap/issues/1</p>",
        "issuetype": null,
        "url": "https://github.com/eklem/life-index/issues/1",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-18T09:05:00+01:00",
        "teasertext": "Show the real deal instead of a preview for a search result item. More info here: https://github.com/fergiemcdowall/norch-bootstrap/issues/1",
        "tags": [
            "embedded",
            "view",
            "preview"
        ],
        "type": [
            "GitHub"
        ],
        "id": "C50aM"
    },
    {
        "date": 1426666620000,
        "repository": "norch-bootstrap",
        "title": "Better search result items",
        "text": null,
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/21",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-03-18T09:17:00+01:00",
        "teasertext": "null",
        "tags": [
            "search",
            "result",
            "items"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2udYCR"
    },
    {
        "date": 1426666920000,
        "repository": "norch-bootstrap",
        "title": "A compact header with maximum width on search box",
        "text": "<p>Needs burger icon even on fairly wide screens, and a Norch-icon instead of text</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/22",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-03-18T09:22:00+01:00",
        "teasertext": "Needs burger icon even on fairly wide screens, and a Norch-icon instead of text",
        "tags": [
            "compact",
            "header",
            "maximum",
            "width",
            "search",
            "box"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3t4E1d"
    },
    {
        "date": 1426667100000,
        "repository": "norch-bootstrap",
        "title": "Big and nice search box",
        "text": "<p>Taller search box width a magnifying glass icon.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/23",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-03-18T09:25:00+01:00",
        "teasertext": "Taller search box width a magnifying glass icon.",
        "tags": [
            "big",
            "nice",
            "search",
            "box"
        ],
        "type": [
            "GitHub"
        ],
        "id": "12geme"
    },
    {
        "date": 1426748700000,
        "repository": "life-indexer",
        "title": "Only index un-indexed",
        "text": "<p>Create batch of docs not indexed, and index. This will duplicatres less likely to happen and lower the processor and memory usage.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-indexer/issues/3",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-03-19T08:05:00+01:00",
        "teasertext": "Create batch of docs not indexed, and index. This will duplicatres less likely to happen and lower the processor and memory usage.",
        "tags": [
            "index",
            "un-indexed"
        ],
        "type": [
            "GitHub"
        ],
        "id": "234dai"
    },
    {
        "date": 1426748880000,
        "repository": "life-indexer",
        "title": "Write last updated on spreadsheet to file",
        "text": "<p>Get file as JSON from Google Drive. Get &quot;last update&quot; from object, compare to date in config-file. If different, loop through items.</p>",
        "issuetype": null,
        "url": "https://github.com/eklem/life-indexer/issues/4",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-19T08:08:00+01:00",
        "teasertext": "Get file as JSON from Google Drive. Get &quot;last update&quot; from object, compare to date in config-file. If different, loop through items.",
        "tags": [
            "write",
            "updated",
            "spreadsheet",
            "file"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3eIME"
    },
    {
        "date": 1426755120000,
        "repository": "life-index",
        "title": "UX: search box and facets",
        "text": "<ul><li>How to show search box and facets </li><li>How to show selected filters </li><li>How to select and unselect</li></ul>",
        "issuetype": null,
        "url": "https://github.com/eklem/life-index/issues/2",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-19T09:52:00+01:00",
        "teasertext": "How to show search box and facets How to show selected filters How to select and unselect",
        "tags": [
            "ux",
            "search",
            "box",
            "facets"
        ],
        "type": [
            "GitHub"
        ],
        "id": "30uSB3"
    },
    {
        "date": 1426765020000,
        "repository": "life-index",
        "title": "UX: search result item",
        "text": "<p>How to display each item: Gmail starred, Flickr uploads and tweets </p>\n\n<ul><li>Hit highlighting </li><li>Clickable facet filters: <ul><li>Type (icon/logo) </li><li>user </li><li>tags</li></ul></li></ul>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-index/issues/3",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-03-19T12:37:00+01:00",
        "teasertext": "How to display each item: Gmail starred, Flickr uploads and tweets \n\nHit highlighting Clickable facet filters: Type (icon/logo) user tags",
        "tags": [
            "ux",
            "search",
            "result",
            "item"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3CEw8T"
    },
    {
        "date": 1426799820000,
        "repository": "life-indexer",
        "title": "How to make array of just the data to index?",
        "text": "<p>if (result.updated  === config.lastUpdated) { \n    // iterate through rows and compare obj.id to config.lastIndexedID \n    // Set j = i \n    // When i &gt; j (next round), then push obj to index.data[i] \n    // si.add batch of index.data \n    // If successfull, write result.updated to config.lastUpdated \n    //   and write last obj.id to config.lastIndexedID \n  }</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-indexer/issues/5",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-03-19T22:17:00+01:00",
        "teasertext": "if (result.updated  === config.lastUpdated) { \n    // iterate through rows and compare obj.id to config.lastIndexedID \n    // Set j = i \n    // When i &gt; j (next round), then push obj to index.data[i] \n    // si.add batch of index.data \n    // If successfull, write result.updated to config.lastUpdated \n    //   and write last obj.id to config.lastIndexedID \n  }",
        "tags": [
            "make",
            "array",
            "data",
            "index"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4kBCL2"
    },
    {
        "date": 1426835640000,
        "repository": "norch-bootstrap",
        "title": "How to best have several templates to choose from?",
        "text": "<p>The default template should list out all field names and field content. It can be made a little better, but should show &#39;out of the box&#39; what&#39;s available to play with. A more polished one could fit a certain data set, like the <a href=\"https://github.com/fergiemcdowall/reuters-21578-json\">reuters-21578-json</a> or the <a href=\"https://github.com/fergiemcdowall/world-bank-dataset\">world-bank-dataset</a>, and could be named <code>norch-bootstrap-reuters-21578</code> and <code>norch-bootstrap-world-bank-dataset</code>. </p>\n\n<p>The question I got is how to do it best. should these templates be a sub-set/module for <code>norch-bootstrap</code> to require. Something like: \n<code>javascript \nvar template = require(&#39;norch-bootstrap-reuters-21578&#39;) \n</code> \nOr simply be a fork of norch-bootstrap? Then we can explain in the documentation that you just change this variable to change template: \n<code>javascript \n  this.app.use(this.express.static(this.path.join(__dirname, \n                                   &#39;../node_modules/norch-bootstrap&#39;))); \n</code> </p>\n\n<p>I got the idea to have it as a subset first, but a fork seems better since there&#39;s not that much extra code (bootstrap-stuff) that will change over time. Maybe we can do it the other way around: Require the bootstrap-stuff into the <code>norch-bootstrap</code>, so it&#39;s easy to upgrade the actual bootstrap?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/24",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-20T08:14:00+01:00",
        "teasertext": "The default template should list out all field names and field content. It can be made a little better, but should show 'out of the box' what's available to play with. A more polished one could fit a certain data set, like the reuters-21578-json or the world-bank-dataset, and could be named norch-bootstrap-reuters-21578 and norch-bootstrap-world-bank-dataset. \n\nThe question I got is how to do it best. should these templates be a sub-set/module for norch-bootstrap to require. Something like: \njavascript \nvar template = require('norch-bootstrap-reuters-21578') \n \nOr simply be a fork of norch-bootstrap? Then we can explain in the documentation that you just change this variable to change template: \njavascript \n  this.app.use(this.express.static(this.path.join(__dirname, \n                                   '../node_modules/norch-bootstrap'))); \n \n\nI got the idea to have it as a subset first, but a fork seems better since there's not that much extra code (bootstrap-stuff) that will change over time. Maybe we can do it the other way around: Require the bootstrap-stuff into the norch-bootstrap, so it's easy to upgrade the actual bootstrap?",
        "tags": [
            "choose",
            "templates"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1UcCwQ"
    },
    {
        "date": 1427049900000,
        "repository": "search-index",
        "title": "Better weighting",
        "text": "<p>At the moment, weighted searches are limited to fields that are specified in the query: </p>\n\n<p><code> \nvar q={ \n&quot;query&quot;: {&quot;title&quot;:[&quot;test&quot;], &quot;body:[&quot;test&quot;]&quot;}, \n&quot;weight&quot;: {&quot;title&quot;: [&quot;100&quot;]} \n} \n</code> </p>\n\n<p>This should work, but doesnt: </p>\n\n<p><code> \nvar q={ \n&quot;query&quot;: {&quot;*&quot;:[&quot;test&quot;]}, \n&quot;weight&quot;: {&quot;title&quot;: [&quot;100&quot;]} \n} \n</code> </p>\n\n<p>Make the latter work.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/81",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-22T19:45:00+01:00",
        "teasertext": "At the moment, weighted searches are limited to fields that are specified in the query: \n\n \nvar q={ \n&quot;query&quot;: {&quot;title&quot;:[&quot;test&quot;], &quot;body:[&quot;test&quot;]&quot;}, \n&quot;weight&quot;: {&quot;title&quot;: [&quot;100&quot;]} \n} \n \n\nThis should work, but doesnt: \n\n \nvar q={ \n&quot;query&quot;: {&quot;*&quot;:[&quot;test&quot;]}, \n&quot;weight&quot;: {&quot;title&quot;: [&quot;100&quot;]} \n} \n \n\nMake the latter work.",
        "tags": [
            "weighting"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1xIOuT"
    },
    {
        "date": 1427052540000,
        "repository": "search-index",
        "title": "update docs with new API for v0.5.0",
        "text": "<p>API for faceting and filtering is updated amongst other things for v0.5.0 </p>\n\n<p>Update docs.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/82",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-22T20:29:00+01:00",
        "teasertext": "API for faceting and filtering is updated amongst other things for v0.5.0 \n\nUpdate docs.",
        "tags": [
            "update",
            "docs",
            "api",
            "v050"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2NsdRE"
    },
    {
        "date": 1427268840000,
        "repository": "iftt-norch-tools",
        "title": "Changing from UTC to Unix as time format",
        "text": "<p>This will make the <a href=\"https://github.com/eklem/life-indexer/issues/5#issuecomment-85892810\">indexing part</a> easier. Also, range filters on time will be a breeze =)</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/13",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-03-25T08:34:00+01:00",
        "teasertext": "This will make the indexing part easier. Also, range filters on time will be a breeze =)",
        "tags": [
            "utc",
            "unix",
            "format",
            "time"
        ],
        "type": [
            "GitHub"
        ],
        "id": "27FKDq"
    },
    {
        "date": 1427363700000,
        "repository": "life-indexer",
        "title": "Make file-path to config-file relative",
        "text": "<p>Today I have to use absolute path, and that doesn&#39;t work well on different OS&#39;es/setups: \n<code>javascript \nvar data = fs.readFileSync(&#39;/home/pi/node_modules/life-indexer/config/config-twitter.json&#39;), config \n</code></p>",
        "issuetype": "bug",
        "url": "https://github.com/eklem/life-indexer/issues/6",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-03-26T10:55:00+01:00",
        "teasertext": "Today I have to use absolute path, and that doesn't work well on different OS'es/setups: \njavascript \nvar data = fs.readFileSync('/home/pi/node_modules/life-indexer/config/config-twitter.json'), config \n",
        "tags": [
            "make",
            "file-path",
            "config-file",
            "relative"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3XYBNB"
    },
    {
        "date": 1427382900000,
        "repository": "search-index",
        "title": "si.add is broken",
        "text": "<p>When trying to run the following code \n<code></code>`javascript \nvar batch = [ \n  { \n    &#39;id&#39;:&#39;1&#39;, \n    &#39;title&#39;:&#39;A really interesting document&#39;, \n    &#39;body&#39;:&#39;This is a really interesting document&#39;, \n    &#39;metadata&#39;:[&#39;red&#39;, &#39;potato&#39;] \n  } \n]; </p>\n\n<p>si.add({batchName: &#39;firstBatch&#39;}, batch, function (err) { \n  if (err) console.log(err) \n}); </p>\n\n<p><code></code>` \nI get the following error. </p>\n\n<p><code> \n/Users/mats/Documents/dev/norch/node_modules/search-index/lib/indexing/indexer.js:57 \n  for (var i = 0; i &lt; facets.length; i++) { \n                            ^ \nTypeError: Cannot read property &#39;length&#39; of undefined \n</code> </p>\n\n<p>Git blame points to @fergiemcdowall&#39;s commit 2 days ago ;)</p>",
        "issuetype": "bug",
        "url": "https://github.com/fergiemcdowall/search-index/issues/83",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": "fergiemcdowall",
        "datehuman": "2015-03-26T16:15:00+01:00",
        "teasertext": "When trying to run the following code \n`javascript \nvar batch = [ \n  { \n    'id':'1', \n    'title':'A really interesting document', \n    'body':'This is a really interesting document', \n    'metadata':['red', 'potato'] \n  } \n]; \n\nsi.add({batchName: 'firstBatch'}, batch, function (err) { \n  if (err) console.log(err) \n}); \n\n` \nI get the following error. \n\n \n/Users/mats/Documents/dev/norch/node_modules/search-index/lib/indexing/indexer.js:57 \n  for (var i = 0; i &lt; facets.length; i++) { \n                            ^ \nTypeError: Cannot read property 'length' of undefined \n \n\nGit blame points to @fergiemcdowall's commit 2 days ago ;)",
        "tags": [
            "siadd",
            "broken"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3Fa5e"
    },
    {
        "date": 1427383560000,
        "repository": "search-index",
        "title": "check if filters is array",
        "text": "<p>fixes #83, but perhaps not the underlying issue?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/84",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-26T16:26:00+01:00",
        "teasertext": "fixes #83, but perhaps not the underlying issue?",
        "tags": [
            "check",
            "filters",
            "array"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2LSwlg"
    },
    {
        "date": 1427387700000,
        "repository": "norch-bootstrap",
        "title": "Removed locally linked bootstrap-stuff …",
        "text": "<p>Linked from maxcdn.bootstrapcdn.com/bootstrap/3.3.4/ instead \nLess code, and the code you want to change. This to not fork a lot of code that gets old really fast. \nFixing this issue: https://github.com/fergiemcdowall/norch-bootstrap/issues/24</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/pull/25",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-26T17:35:00+01:00",
        "teasertext": "Linked from maxcdn.bootstrapcdn.com/bootstrap/3.3.4/ instead \nLess code, and the code you want to change. This to not fork a lot of code that gets old really fast. \nFixing this issue: https://github.com/fergiemcdowall/norch-bootstrap/issues/24",
        "tags": [
            "removed",
            "locally",
            "linked",
            "bootstrap-stuff",
            "…"
        ],
        "type": [
            "GitHub"
        ],
        "id": "eIsq2"
    },
    {
        "date": 1427391120000,
        "repository": "norch-bootstrap",
        "title": "Update documentation",
        "text": "<p>Needs explanation on how to change a template (i.e. from norch-bootstrap to a fork, or to norch-reuters). \nhttps://github.com/fergiemcdowall/norch-bootstrap/issues/24</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/26",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-26T18:32:00+01:00",
        "teasertext": "Needs explanation on how to change a template (i.e. from norch-bootstrap to a fork, or to norch-reuters). \nhttps://github.com/fergiemcdowall/norch-bootstrap/issues/24",
        "tags": [
            "update",
            "documentation"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1chPuV"
    },
    {
        "date": 1427521860000,
        "repository": "norch",
        "title": "rocksdb as backend?",
        "text": "<p>Does norch have plan  to use rocksdb as backend in the future? \nrocksdb is based on  leveldb,  it  did  lots of modifications so that has better performance. \nhttps://github.com/facebook/rocksdb/wiki/Performance-Benchmarks</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/85",
        "user": [
            "pianoboysai"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-03-28T06:51:00+01:00",
        "teasertext": "Does norch have plan  to use rocksdb as backend in the future? \nrocksdb is based on  leveldb,  it  did  lots of modifications so that has better performance. \nhttps://github.com/facebook/rocksdb/wiki/Performance-Benchmarks",
        "tags": [
            "rocksdb",
            "backend"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3m5qIa"
    },
    {
        "date": 1427862720000,
        "repository": "search-index",
        "title": "Search returning no results",
        "text": "<p>With a very simple data set the Search() routine returns an empty hits array. </p>\n\n<p>var docs = [ \n { \n    &#39;id&#39;:&#39;1&#39;, \n    &#39;title&#39;:&#39;A really interesting document&#39;, \n    &#39;body&#39;:&#39;This is a really interesting document&#39;, \n    &#39;metadata&#39;:[&#39;red&#39;, &#39;potato&#39;] \n  }, \n  { \n    &#39;id&#39;:&#39;2&#39;, \n    &#39;title&#39;:&#39;Another interesting document&#39;, \n    &#39;body&#39;:&#39;This is another really interesting document that is a bit different&#39;, \n    &#39;metadata&#39;:[&#39;yellow&#39;, &#39;potato&#39;] \n  } \n]; </p>\n\n<p>si.add({&#39;batchName&#39;: &#39;testdata&#39;, &#39;filters&#39;: [&#39;metadata&#39;]}, docs, function(err) { \n   if (!err) console.log(&#39;indexed!&#39;); </p>\n\n<p>   var query = { \n  &quot;query&quot;: {&quot;*&quot;: [&quot;*&quot;]} \n   }; </p>\n\n<p>   si.search(query, function(err, results) { \n    console.dir(results); \n   }); \n});</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/85",
        "user": [
            "dweberlj"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-01T06:32:00+02:00",
        "teasertext": "With a very simple data set the Search() routine returns an empty hits array. \n\nvar docs = [ \n { \n    'id':'1', \n    'title':'A really interesting document', \n    'body':'This is a really interesting document', \n    'metadata':['red', 'potato'] \n  }, \n  { \n    'id':'2', \n    'title':'Another interesting document', \n    'body':'This is another really interesting document that is a bit different', \n    'metadata':['yellow', 'potato'] \n  } \n]; \n\nsi.add({'batchName': 'testdata', 'filters': ['metadata']}, docs, function(err) { \n   if (!err) console.log('indexed!'); \n\n   var query = { \n  &quot;query&quot;: {&quot;*&quot;: [&quot;*&quot;]} \n   }; \n\n   si.search(query, function(err, results) { \n    console.dir(results); \n   }); \n});",
        "tags": [
            "search",
            "returning",
            "results"
        ],
        "type": [
            "GitHub"
        ],
        "id": "cgSqO"
    },
    {
        "date": 1428496560000,
        "repository": "search-index",
        "title": "Make a user manual",
        "text": "<p>a la http://hypothesis.readthedocs.org/en/latest/quickstart.html</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/86",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-08T14:36:00+02:00",
        "teasertext": "a la http://hypothesis.readthedocs.org/en/latest/quickstart.html",
        "tags": [
            "make",
            "user",
            "manual"
        ],
        "type": [
            "GitHub"
        ],
        "id": "7Nd3N"
    },
    {
        "date": 1428576960000,
        "repository": "norch",
        "title": "Disable stopword removing",
        "text": "<p>Is it possible to say norch that it should process indexing without removing stopwords?<br/>I want to search for phrases.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/86",
        "user": [
            "larsvoigt"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-09T12:56:00+02:00",
        "teasertext": "Is it possible to say norch that it should process indexing without removing stopwords?I want to search for phrases.",
        "tags": [
            "disable",
            "stopword",
            "removing"
        ],
        "type": [
            "GitHub"
        ],
        "id": "xvU2r"
    },
    {
        "date": 1428655560000,
        "repository": "iftt-norch-tools",
        "title": "Add Flickr document processor to toolset",
        "text": "<p>Code already exists, only needs to be added to toolset and exported.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/14",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-10T10:46:00+02:00",
        "teasertext": "Code already exists, only needs to be added to toolset and exported.",
        "tags": [
            "flickr",
            "document",
            "processor",
            "toolset"
        ],
        "type": [
            "GitHub"
        ],
        "id": "Kfqzd"
    },
    {
        "date": 1428667380000,
        "repository": "life-indexer",
        "title": "Add indexer for user entity",
        "text": "<p>Index users from manually created table. Will figure out later how to collapse same user on different services into one user-ID.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-indexer/issues/7",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-10T14:03:00+02:00",
        "teasertext": "Index users from manually created table. Will figure out later how to collapse same user on different services into one user-ID.",
        "tags": [
            "add",
            "indexer",
            "entity",
            "user"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2hM2ZV"
    },
    {
        "date": 1428667500000,
        "repository": "iftt-norch-tools",
        "title": "Add indexer toolset for user entity",
        "text": null,
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/15",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-10T14:05:00+02:00",
        "teasertext": "null",
        "tags": [
            "add",
            "indexer",
            "toolset",
            "user",
            "entity"
        ],
        "type": [
            "GitHub"
        ],
        "id": "AnUjv"
    },
    {
        "date": 1428667980000,
        "repository": "iftt-norch-tools",
        "title": "User collapsing service",
        "text": "<p>Create a service to collapse same user on different services (gmail, flickr, twitter, etc) into one user ID. \nTwo parts: \n<em> <a href=\"https://github.com/eklem/life-indexer/issues/7\">The indexer</a> will also store the user table as a JSON-file. This JSON-file will be used to lookup users. \n</em> Toolset for lookup service. I.e: If Twitter message, lookup <code>[&#39;user-ID&#39;, &#39;email-address&#39;, &#39;gravatarimg&#39;]</code> for that twitter-user. If not: Find an okay fallback method. The fallback method will also prevent circular dependency </p>\n\n<p>This will be the basis for showing all related stuff for one person.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/16",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-10T14:13:00+02:00",
        "teasertext": "Create a service to collapse same user on different services (gmail, flickr, twitter, etc) into one user ID. \nTwo parts: \n The indexer will also store the user table as a JSON-file. This JSON-file will be used to lookup users. \n Toolset for lookup service. I.e: If Twitter message, lookup ['user-ID', 'email-address', 'gravatarimg'] for that twitter-user. If not: Find an okay fallback method. The fallback method will also prevent circular dependency \n\nThis will be the basis for showing all related stuff for one person.",
        "tags": [
            "collapsing",
            "service",
            "user"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1GE7oB"
    },
    {
        "date": 1428695460000,
        "repository": "search-index",
        "title": "Syntax on JSON for si.add missing a \",\"",
        "text": "<p><code>javascript \n[ \n  { \n    &#39;id&#39;:&#39;1&#39; \n    &#39;title&#39;:&#39;A really interesting document&#39;, \n    &#39;body&#39;:&#39;This is a really interesting document&#39;, \n    &#39;metadata&#39;:[&#39;red&#39;, &#39;potato&#39;] \n  }, \n  { \n    &#39;id&#39;:&#39;2&#39; \n    &#39;title&#39;:&#39;Another interesting document&#39;, \n    &#39;body&#39;:&#39;This is another really interesting document that is a bit different&#39;, \n    &#39;metadata&#39;:[&#39;yellow&#39;, &#39;potato&#39;] \n  } \n] \n</code> </p>\n\n<p>should be: \n<code>javascript \n[ \n  { \n    &#39;id&#39;:&#39;1&#39;, \n    &#39;title&#39;:&#39;A really interesting document&#39;, \n    &#39;body&#39;:&#39;This is a really interesting document&#39;, \n    &#39;metadata&#39;:[&#39;red&#39;, &#39;potato&#39;] \n  }, \n  { \n    &#39;id&#39;:&#39;2&#39;, \n    &#39;title&#39;:&#39;Another interesting document&#39;, \n    &#39;body&#39;:&#39;This is another really interesting document that is a bit different&#39;, \n    &#39;metadata&#39;:[&#39;yellow&#39;, &#39;potato&#39;] \n  } \n] \n</code></p>",
        "issuetype": "bug",
        "url": "https://github.com/fergiemcdowall/search-index/issues/87",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-10T21:51:00+02:00",
        "teasertext": "javascript \n[ \n  { \n    'id':'1' \n    'title':'A really interesting document', \n    'body':'This is a really interesting document', \n    'metadata':['red', 'potato'] \n  }, \n  { \n    'id':'2' \n    'title':'Another interesting document', \n    'body':'This is another really interesting document that is a bit different', \n    'metadata':['yellow', 'potato'] \n  } \n] \n \n\nshould be: \njavascript \n[ \n  { \n    'id':'1', \n    'title':'A really interesting document', \n    'body':'This is a really interesting document', \n    'metadata':['red', 'potato'] \n  }, \n  { \n    'id':'2', \n    'title':'Another interesting document', \n    'body':'This is another really interesting document that is a bit different', \n    'metadata':['yellow', 'potato'] \n  } \n] \n",
        "tags": [
            "syntax",
            "json",
            "siadd",
            "missing"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2m3drC"
    },
    {
        "date": 1428696720000,
        "repository": "search-index",
        "title": "can't get si.add to work without options defined before requiring search-index",
        "text": "<p>If i do like this: \n<code></code>`javascript \nvar si = require(&#39;search-index&#39;) </p>\n\n<p>var batch = [ \n  { \n    &#39;id&#39;:&#39;1&#39;, \n    &#39;title&#39;:&#39;A really interesting document&#39;, \n    &#39;body&#39;:&#39;This is a really interesting document&#39;, \n    &#39;metadata&#39;:[&#39;red&#39;, &#39;potato&#39;] \n  }, \n  { \n    &#39;id&#39;:&#39;2&#39;, \n    &#39;title&#39;:&#39;Another interesting document&#39;, \n    &#39;body&#39;:&#39;This is another really interesting document that is a bit different&#39;, \n    &#39;metadata&#39;:[&#39;yellow&#39;, &#39;potato&#39;] \n  } \n]; \nvar batchName = &#39;twoDocs&#39;; \nvar filters = [&#39;metadata&#39;]; </p>\n\n<p>si.add({&#39;batchName&#39;: batchName, &#39;filters&#39;: filters}, batch, function(err) { \n  if (!err) console.log(&#39;indexed!&#39;); \n}); \n<code> \n... I get this error: \n</code>javascript \nsi.add({&#39;batchName&#39;: batchName, &#39;filters&#39;: filters}, batch, function(err) { \n   ^ \nTypeError: Object function SearchIndex(options) { \n  if (!(this instanceof SearchIndex)) \n    return new SearchIndex(options); \n  //------------libs \n  this.level = require(&#39;levelup&#39;); \n  this.levelMultiply = require(&#39;level-multiply&#39;); \n  this.winston = require(&#39;winston&#39;); \n  <em> = require(&#39;lodash&#39;); \n  this.defaults = { \n    indexPath: &#39;si&#39;, \n    logLevel: &#39;info&#39;, \n    logSilent: false \n  }; \n  //initialize defaults options \n  this.options = </em>.defaults(options || {}, this.defaults); \n  this.calibrater = require(&#39;./indexing/calibrater.js&#39;); \n  this.deleter = require(&#39;./indexing/deleter.js&#39;); \n  this.docGetter = require(&#39;./search/docGetter.js&#39;); \n  this.indexPeek = require(&#39;./indexing/indexPeek.js&#39;); \n  this.indexer = require(&#39;./indexing/indexer.js&#39;); \n  this.matcher = require(&#39;./matchers/matcher.js&#39;); \n  this.replicator = require(&#39;./indexing/replicator.js&#39;); \n  this.searcher = require(&#39;./search/searcher.js&#39;); \n  this.searchIndexLogger = require(&#39;./logger/searchIndexLogger&#39;); \n  this.indexes = (this.options &amp;&amp; this.options.db) \n    ? this.level(this.options.indexPath, {valueEncoding: &#39;json&#39;, db: this.options.db}) \n    : this.level(this.options.indexPath, {valueEncoding: &#39;json&#39;}); \n  this.indexesMultiply = this.levelMultiply(this.indexes); \n  this.searchIndexLogger.remove(this.winston.transports.Console); \n  this.searchIndexLogger.add(this.winston.transports.Console, {silent: this.options.logSilent, level: this.options.logLevel}); \n  //is there a better way of doing this? \n  var searcher = this.searcher; \n  this.calibrater.getTotalDocs(this.indexes, function(err, totalDocs) { \n    searcher.setTotalDocs(totalDocs); \n  }); \n} has no method &#39;add&#39; \n    at Object.&lt;anonymous&gt; (/Users/eklem/node<em>modules/life-indexer/test.js:20:4) \n    at Module.</em>compile (module.js:456:26) \n    at Object.Module.<em>extensions..js (module.js:474:10) \n    at Module.load (module.js:356:32) \n    at Function.Module.</em>load (module.js:312:12) \n    at Function.Module.runMain (module.js:497:10) \n    at startup (node.js:119:16) \n    at node.js:929:3 \n<code></code>` </p>\n\n<p>But if change the start of the file to this: \n<code>javascript \nvar options = { indexPath: &#39;si2&#39;, logLevel: &#39;info&#39;, logSilent: false } \nvar si = require(&#39;search-index&#39;)(options) \n</code> \n...everything works okay! It&#39;s a minor since it&#39;s possible to work around pretty easy.</p>",
        "issuetype": "bug",
        "url": "https://github.com/fergiemcdowall/search-index/issues/88",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-10T22:12:00+02:00",
        "teasertext": "If i do like this: \n`javascript \nvar si = require('search-index') \n\nvar batch = [ \n  { \n    'id':'1', \n    'title':'A really interesting document', \n    'body':'This is a really interesting document', \n    'metadata':['red', 'potato'] \n  }, \n  { \n    'id':'2', \n    'title':'Another interesting document', \n    'body':'This is another really interesting document that is a bit different', \n    'metadata':['yellow', 'potato'] \n  } \n]; \nvar batchName = 'twoDocs'; \nvar filters = ['metadata']; \n\nsi.add({'batchName': batchName, 'filters': filters}, batch, function(err) { \n  if (!err) console.log('indexed!'); \n}); \n \n... I get this error: \njavascript \nsi.add({'batchName': batchName, 'filters': filters}, batch, function(err) { \n   ^ \nTypeError: Object function SearchIndex(options) { \n  if (!(this instanceof SearchIndex)) \n    return new SearchIndex(options); \n  //------------libs \n  this.level = require('levelup'); \n  this.levelMultiply = require('level-multiply'); \n  this.winston = require('winston'); \n   = require('lodash'); \n  this.defaults = { \n    indexPath: 'si', \n    logLevel: 'info', \n    logSilent: false \n  }; \n  //initialize defaults options \n  this.options = .defaults(options || {}, this.defaults); \n  this.calibrater = require('./indexing/calibrater.js'); \n  this.deleter = require('./indexing/deleter.js'); \n  this.docGetter = require('./search/docGetter.js'); \n  this.indexPeek = require('./indexing/indexPeek.js'); \n  this.indexer = require('./indexing/indexer.js'); \n  this.matcher = require('./matchers/matcher.js'); \n  this.replicator = require('./indexing/replicator.js'); \n  this.searcher = require('./search/searcher.js'); \n  this.searchIndexLogger = require('./logger/searchIndexLogger'); \n  this.indexes = (this.options &amp;&amp; this.options.db) \n    ? this.level(this.options.indexPath, {valueEncoding: 'json', db: this.options.db}) \n    : this.level(this.options.indexPath, {valueEncoding: 'json'}); \n  this.indexesMultiply = this.levelMultiply(this.indexes); \n  this.searchIndexLogger.remove(this.winston.transports.Console); \n  this.searchIndexLogger.add(this.winston.transports.Console, {silent: this.options.logSilent, level: this.options.logLevel}); \n  //is there a better way of doing this? \n  var searcher = this.searcher; \n  this.calibrater.getTotalDocs(this.indexes, function(err, totalDocs) { \n    searcher.setTotalDocs(totalDocs); \n  }); \n} has no method 'add' \n    at Object.&lt;anonymous&gt; (/Users/eklem/nodemodules/life-indexer/test.js:20:4) \n    at Module.compile (module.js:456:26) \n    at Object.Module.extensions..js (module.js:474:10) \n    at Module.load (module.js:356:32) \n    at Function.Module.load (module.js:312:12) \n    at Function.Module.runMain (module.js:497:10) \n    at startup (node.js:119:16) \n    at node.js:929:3 \n` \n\nBut if change the start of the file to this: \njavascript \nvar options = { indexPath: 'si2', logLevel: 'info', logSilent: false } \nvar si = require('search-index')(options) \n \n...everything works okay! It's a minor since it's possible to work around pretty easy.",
        "tags": [
            "requiring",
            "search-index",
            "work",
            "options"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2O7WI4"
    },
    {
        "date": 1428826380000,
        "repository": "search-index",
        "title": "Breaking change from 0.4.16 -> 0.4.17 .empty() undefined",
        "text": "<p>Bit late with this report, considering <a href=\"https://github.com/isagalaev/highlight.js/issues/817#issuecomment-90891264\">I posted it in the wrong library</a>. </p>\n\n<p>Anyway, I&#39;m using search-index on my current site, and it works on 0.4.16, but I&#39;ve just installed it on my current dev machine and it installed 0.4.17 (because that ~0.4.16 essentially), and it is broken. </p>\n\n<p>It spits it&#39;s dummy out when I try to do searchIndex.empty( ... ), saying it&#39;s undefined. I specifically went back to 0.4.16 and it works fine. Is this due to me using .empty() wrong? Or is this a breaking change? If so, shouldn&#39;t the major be updated? </p>\n\n<p>Thanks though, thought I&#39;d report it. I&#39;m frozen on 0.4.16 for now though.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/89",
        "user": [
            "adamkdean"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-12T10:13:00+02:00",
        "teasertext": "Bit late with this report, considering I posted it in the wrong library. \n\nAnyway, I'm using search-index on my current site, and it works on 0.4.16, but I've just installed it on my current dev machine and it installed 0.4.17 (because that ~0.4.16 essentially), and it is broken. \n\nIt spits it's dummy out when I try to do searchIndex.empty( ... ), saying it's undefined. I specifically went back to 0.4.16 and it works fine. Is this due to me using .empty() wrong? Or is this a breaking change? If so, shouldn't the major be updated? \n\nThanks though, thought I'd report it. I'm frozen on 0.4.16 for now though.",
        "tags": [
            "->",
            "empty",
            "undefined",
            "breaking"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2C2nXG"
    },
    {
        "date": 1428866460000,
        "repository": "norch-bootstrap",
        "title": "How to turn specific facets on always?",
        "text": "<p>I got a search solution where I want to initially do a wildcard-search, showing all results and all facets. How do I get to always have the facet-part of the url present, no matter what I press or search for in the solution? </p>\n\n<p>Example-URL: \n<code> \nhttp://localhost:3030/#/search?q=*&amp;facets=user,type,tags \n</code><br/>The part that I always want present: \n<code> \n&amp;facets=user,type,tags \n</code> \n<img alt=\"skjermbilde 2015-04-12 kl 21 21 37\" src=\"https://cloud.githubusercontent.com/assets/236656/7107120/03b17888-e15a-11e4-80a9-b69ea962c070.png\"/></p>",
        "issuetype": "question",
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/27",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-12T21:21:00+02:00",
        "teasertext": "I got a search solution where I want to initially do a wildcard-search, showing all results and all facets. How do I get to always have the facet-part of the url present, no matter what I press or search for in the solution? \n\nExample-URL: \n \nhttp://localhost:3030/#/search?q=*&amp;facets=user,type,tags \nThe part that I always want present: \n \n&amp;facets=user,type,tags \n \n",
        "tags": [
            "turn",
            "specific",
            "facets"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3JvITA"
    },
    {
        "date": 1428895500000,
        "repository": "search-index",
        "title": "When to Use Search-Index vs Norch?",
        "text": "<p>When do you use search index or norch? If I want to index local blog posts, and allow users to search it, which should I use? </p>\n\n<p>Maybe what I want to know is the differences.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/90",
        "user": [
            "coommark"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-13T05:25:00+02:00",
        "teasertext": "When do you use search index or norch? If I want to index local blog posts, and allow users to search it, which should I use? \n\nMaybe what I want to know is the differences.",
        "tags": [
            "search-index",
            "norch"
        ],
        "type": [
            "GitHub"
        ],
        "id": "HHFW9"
    },
    {
        "date": 1429038540000,
        "repository": "search-index",
        "title": "What is the purpose of batchName?",
        "text": "<p>si.add({&#39;batchName&#39;: batchName, &#39;filters&#39;: filters}, data, function(err) { \n  if (!err) console.log(&#39;indexed!&#39;); \n}); </p>\n\n<p>The API implementation actually doesn&#39;t use it at all...</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/91",
        "user": [
            "mgtp"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-14T21:09:00+02:00",
        "teasertext": "si.add({'batchName': batchName, 'filters': filters}, data, function(err) { \n  if (!err) console.log('indexed!'); \n}); \n\nThe API implementation actually doesn't use it at all...",
        "tags": [
            "purpose",
            "batchname"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3iCPjr"
    },
    {
        "date": 1429196760000,
        "repository": "norch",
        "title": "Save Path",
        "text": "<p>Hello, \nFirst I have to say thank you very much for norch . It works very well but I have a little question.. </p>\n\n<p>in which path or folder are the jason-files saved after uploading to norch (localhost). \nI can&#39;t find a folder in documentation, but maybe I have overwritten sth. .  </p>\n\n<p>Thank You and greetings, \nSebastian</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/87",
        "user": [
            "sebastianetzkorn"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-16T17:06:00+02:00",
        "teasertext": "Hello, \nFirst I have to say thank you very much for norch . It works very well but I have a little question.. \n\nin which path or folder are the jason-files saved after uploading to norch (localhost). \nI can't find a folder in documentation, but maybe I have overwritten sth. .  \n\nThank You and greetings, \nSebastian",
        "tags": [
            "save",
            "path"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3YjMlB"
    },
    {
        "date": 1429383840000,
        "repository": "search-index",
        "title": "use in front-end?",
        "text": "<p>I think the search engine algorithm could be independent of node.js. \nsince there are many pure JS data storage libraries,  and  the performance and function of  browser is getting  powerful. <br/>I think it&#39;s doable and valuable for supporting  to use in front-end directly?  also,  it could be used in mobile app.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/92",
        "user": [
            "pianoboysai"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-18T21:04:00+02:00",
        "teasertext": "I think the search engine algorithm could be independent of node.js. \nsince there are many pure JS data storage libraries,  and  the performance and function of  browser is getting  powerful. I think it's doable and valuable for supporting  to use in front-end directly?  also,  it could be used in mobile app.",
        "tags": [
            "front-end"
        ],
        "type": [
            "GitHub"
        ],
        "id": "38veAi"
    },
    {
        "date": 1429620120000,
        "repository": "iftt-norch-tools",
        "title": "Gravatar-link missing \"http:\"",
        "text": "<p>//www.gravatar.com/avatar/344c215281fbce2fd50448e4a3c558d9?s=200&amp;r=pg&amp;d=wavatar</p>",
        "issuetype": "bug",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/17",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-21T14:42:00+02:00",
        "teasertext": "//www.gravatar.com/avatar/344c215281fbce2fd50448e4a3c558d9?s=200&amp;r=pg&amp;d=wavatar",
        "tags": [
            "gravatar-link",
            "missing",
            "http"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3nHUTY"
    },
    {
        "date": 1429700340000,
        "repository": "search-index",
        "title": "Indexing is very slow",
        "text": "<p>I&#39;ve been experimenting with search-index for a bit and found it to be a very good fit for our needs. So thanks for making this available! However, indexing itself is quite slow. On my machine it took about 4 mins to index the reuters-000.json data, which is only 1MB. The data set I&#39;m currently working with is about 60MB, i.e. it may take 4 hours to index. Our data set is still in development and can change multiple times a day, so waiting for several hours every time is not really feasible. Ideally it should take less than 2 mins to index 60MB (120x faster...). And eventually we would want to scale up to indexing several GBs of data. I did a quick profile and found that 99% of the time is spent in incrementallyCalibrate(). I really don&#39;t know much about the inner workings of search engines and indexing. Is there anything that can be done to make indexing faster? Thanks!</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/93",
        "user": [
            "mgtp"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-22T12:59:00+02:00",
        "teasertext": "I've been experimenting with search-index for a bit and found it to be a very good fit for our needs. So thanks for making this available! However, indexing itself is quite slow. On my machine it took about 4 mins to index the reuters-000.json data, which is only 1MB. The data set I'm currently working with is about 60MB, i.e. it may take 4 hours to index. Our data set is still in development and can change multiple times a day, so waiting for several hours every time is not really feasible. Ideally it should take less than 2 mins to index 60MB (120x faster...). And eventually we would want to scale up to indexing several GBs of data. I did a quick profile and found that 99% of the time is spent in incrementallyCalibrate(). I really don't know much about the inner workings of search engines and indexing. Is there anything that can be done to make indexing faster? Thanks!",
        "tags": [
            "slow",
            "indexing"
        ],
        "type": [
            "GitHub"
        ],
        "id": "dpQBs"
    },
    {
        "date": 1429687740000,
        "repository": "life-indexer",
        "title": "Better documentation",
        "text": "<p>Link to IFTTT-recipes (must be made publicly available) and explain how to add header information on spreadsheets.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-indexer/issues/8",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-22T09:29:00+02:00",
        "teasertext": "Link to IFTTT-recipes (must be made publicly available) and explain how to add header information on spreadsheets.",
        "tags": [
            "documentation"
        ],
        "type": [
            "GitHub"
        ],
        "id": "289apg"
    },
    {
        "date": 1429803420000,
        "repository": "iftt-norch-tools",
        "title": "Some email missing text",
        "text": "<p>Some email is missing text after indexing.</p>",
        "issuetype": "bug",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/18",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-04-23T17:37:00+02:00",
        "teasertext": "Some email is missing text after indexing.",
        "tags": [
            "email",
            "missing",
            "text"
        ],
        "type": [
            "GitHub"
        ],
        "id": "jTqrF"
    },
    {
        "date": 1429862280000,
        "repository": "life-index",
        "title": "Facets not showing automatically",
        "text": "<p>Facets not showing when you search. You can add &quot;&amp;facets=user,type,tags&quot; to the URL and the facets will show, but if you enter something new in the search box they will disappear again. </p>\n\n<p>Result of an upstream bug i <code>Norch-bootstrap</code>: https://github.com/fergiemcdowall/norch-bootstrap/issues/27</p>",
        "issuetype": "bug",
        "url": "https://github.com/eklem/life-index/issues/4",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-24T09:58:00+02:00",
        "teasertext": "Facets not showing when you search. You can add &quot;&amp;facets=user,type,tags&quot; to the URL and the facets will show, but if you enter something new in the search box they will disappear again. \n\nResult of an upstream bug i Norch-bootstrap: https://github.com/fergiemcdowall/norch-bootstrap/issues/27",
        "tags": [
            "automatically",
            "facets",
            "showing"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4s8iMz"
    },
    {
        "date": 1430122740000,
        "repository": "life-index",
        "title": "Facet and filter CSS not correct",
        "text": "<p>CSS for facets and filters are creating an okay result in most cases, but it&#39;s inherently wrong, and needs a bit of work, care and love. </p>\n\n<ul><li>Left margin differs in FF and Chrome </li><li>Margin between facets vanish when filters brake to new line.</li></ul>",
        "issuetype": "bug,enhancement",
        "url": "https://github.com/eklem/life-index/issues/5",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-04-27T10:19:00+02:00",
        "teasertext": "CSS for facets and filters are creating an okay result in most cases, but it's inherently wrong, and needs a bit of work, care and love. \n\nLeft margin differs in FF and Chrome Margin between facets vanish when filters brake to new line.",
        "tags": [
            "facet",
            "filter",
            "css",
            "correct"
        ],
        "type": [
            "GitHub"
        ],
        "id": "6mo3B"
    },
    {
        "date": 1430128020000,
        "repository": "search-index",
        "title": "Move logging from Winston to Bunyan",
        "text": "<p>since Bunyan is browserifiable </p>\n\n<p>https://github.com/trentm/node-bunyan</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/94",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-27T11:47:00+02:00",
        "teasertext": "since Bunyan is browserifiable \n\nhttps://github.com/trentm/node-bunyan",
        "tags": [
            "move",
            "logging",
            "winston",
            "bunyan"
        ],
        "type": [
            "GitHub"
        ],
        "id": "m2mbQ"
    },
    {
        "date": 1430210220000,
        "repository": "life-indexer",
        "title": "Add \"re-index all\" option",
        "text": "<p>Something like this: </p>\n\n<p><code></code>` \n$ node node_modules/life-indexer/li-twitter-tweets.js --help </p>\n\n<p>  Usage: node node_modules/life-indexer/li-twitter-tweets.js [options] </p>\n\n<p>  Options: </p>\n\n<pre><code>-h, --help                                   output usage information \n-V, --version                                output the version number \n-r, --reindex                                reindex the full data-set </code></pre>\n\n<p><code></code>` </p>\n\n<p>If <code>-r</code> is used, just set <code>config.gsheetLastUpdated</code> to <code>0000-00-00T00:00:00.000Z</code> and all data will be re-fed to the index.</p>",
        "issuetype": null,
        "url": "https://github.com/eklem/life-indexer/issues/9",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-28T10:37:00+02:00",
        "teasertext": "Something like this: \n\n` \n$ node node_modules/life-indexer/li-twitter-tweets.js --help \n\n  Usage: node node_modules/life-indexer/li-twitter-tweets.js [options] \n\n  Options: \n\n-h, --help                                   output usage information \n-V, --version                                output the version number \n-r, --reindex                                reindex the full data-set \n\n` \n\nIf -r is used, just set config.gsheetLastUpdated to 0000-00-00T00:00:00.000Z and all data will be re-fed to the index.",
        "tags": [
            "add",
            "re-index",
            "option"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3Dfdsb"
    },
    {
        "date": 1430218440000,
        "repository": "search-index",
        "title": "Usage Examples",
        "text": "<p>Thanks for the excellent module \nCan you please let me know how to achieve below features ? </p>\n\n<ol><li>Case-Insensitive Search </li><li>Partial Word match. (I tried, Search-index only matches whole word and i dont know how to set option so that search-index does include partial match also.. Ex: title: &quot;really&quot;. If we search &quot;real&quot;, it doesnot return anything in my system) </li><li>Do you recommend to feed search-index with 5 million records (4 fields per doc) and search ? Is it capable of doing that ?  </li></ol>\n\n<p>Thanks for  great module ..again..</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/95",
        "user": [
            "thiyaga123"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-28T12:54:00+02:00",
        "teasertext": "Thanks for the excellent module \nCan you please let me know how to achieve below features ? \n\nCase-Insensitive Search Partial Word match. (I tried, Search-index only matches whole word and i dont know how to set option so that search-index does include partial match also.. Ex: title: &quot;really&quot;. If we search &quot;real&quot;, it doesnot return anything in my system) Do you recommend to feed search-index with 5 million records (4 fields per doc) and search ? Is it capable of doing that ?  \n\nThanks for  great module ..again..",
        "tags": [
            "usage",
            "examples"
        ],
        "type": [
            "GitHub"
        ],
        "id": "NJwE4"
    },
    {
        "date": 1430232660000,
        "repository": "search-index",
        "title": "[Question] customize matcher",
        "text": "<p>Hey, \nI have been looking for a good search engine and found the following project. \nIt is named &quot;search-index&quot; and doing a good job. Now my issue/ question is:<br/>When searching a word in epub3-books using your engine it is matching all sources at the same time. Is it possible to limit the process to exactly one book? (for example via a given docID) </p>\n\n<p>Thanks, Lars</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/96",
        "user": [
            "larsvoigt"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-28T16:51:00+02:00",
        "teasertext": "Hey, \nI have been looking for a good search engine and found the following project. \nIt is named &quot;search-index&quot; and doing a good job. Now my issue/ question is:When searching a word in epub3-books using your engine it is matching all sources at the same time. Is it possible to limit the process to exactly one book? (for example via a given docID) \n\nThanks, Lars",
        "tags": [
            "[question]",
            "customize",
            "matcher"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2qj7V2"
    },
    {
        "date": 1430391900000,
        "repository": "life-index",
        "title": "Authentication",
        "text": "<p>Base authentication on @mewwts to-be-held talk about &quot;Token-based authentication in REST APIs&quot;</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-index/issues/6",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-04-30T13:05:00+02:00",
        "teasertext": "Base authentication on @mewwts to-be-held talk about &quot;Token-based authentication in REST APIs&quot;",
        "tags": [
            "authentication"
        ],
        "type": [
            "GitHub"
        ],
        "id": "KHPOs"
    },
    {
        "date": 1430392080000,
        "repository": "life-index",
        "title": "Re-build as a single page app",
        "text": "<p>Should contain all necessary HTML, CSS and JavaScript to be run offline</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-index/issues/7",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-04-30T13:08:00+02:00",
        "teasertext": "Should contain all necessary HTML, CSS and JavaScript to be run offline",
        "tags": [
            "re-build",
            "single",
            "page",
            "app"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1OsCo7"
    },
    {
        "date": 1430392380000,
        "repository": "life-index",
        "title": "Browserify / replicating index",
        "text": "<p>Make it replicate the index from server to only be run in browser. User @fergiemcdowall&#39;s example: https://github.com/fergiemcdowall/search-index/tree/master/examples/browserify-replicate-full-index-to-browser</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-index/issues/8",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-04-30T13:13:00+02:00",
        "teasertext": "Make it replicate the index from server to only be run in browser. User @fergiemcdowall's example: https://github.com/fergiemcdowall/search-index/tree/master/examples/browserify-replicate-full-index-to-browser",
        "tags": [
            "browserify",
            "/",
            "replicating",
            "index"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2g5bv2"
    },
    {
        "date": 1430393820000,
        "repository": "life-index",
        "title": "Test OpenSearch plugin",
        "text": "<p>Making Life Index available through the browser search box. \nUse <a href=\"http://www.opensearch.org/Specifications/OpenSearch/1.1#OpenSearch_Query_element\">query element</a> \nand <a href=\"http://www.opensearch.org/Specifications/OpenSearch/Extensions/Suggestions/1.1\">suggests</a> can be used together with the <code>norch</code> <a href=\"https://github.com/fergiemcdowall/norch#matcher-api\">matcher-api</a>.</p>",
        "issuetype": null,
        "url": "https://github.com/eklem/life-index/issues/9",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-30T13:37:00+02:00",
        "teasertext": "Making Life Index available through the browser search box. \nUse query element \nand suggests can be used together with the norch matcher-api.",
        "tags": [
            "test",
            "opensearch",
            "plugin"
        ],
        "type": [
            "GitHub"
        ],
        "id": "W5c05"
    },
    {
        "date": 1430395860000,
        "repository": "life-indexer",
        "title": "Add indexer for SMS",
        "text": null,
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-indexer/issues/10",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-04-30T14:11:00+02:00",
        "teasertext": "null",
        "tags": [
            "add",
            "indexer",
            "sms"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1haKTy"
    },
    {
        "date": 1430395860000,
        "repository": "life-indexer",
        "title": "Add indexer for Google Calendar",
        "text": null,
        "issuetype": null,
        "url": "https://github.com/eklem/life-indexer/issues/11",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-30T14:11:00+02:00",
        "teasertext": "null",
        "tags": [
            "add",
            "indexer",
            "google",
            "calendar"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3gFPWj"
    },
    {
        "date": 1430395860000,
        "repository": "life-indexer",
        "title": "Add indexer for Facebook Link",
        "text": null,
        "issuetype": null,
        "url": "https://github.com/eklem/life-indexer/issues/12",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-30T14:11:00+02:00",
        "teasertext": "null",
        "tags": [
            "add",
            "indexer",
            "facebook",
            "link"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4kGHcK"
    },
    {
        "date": 1430396520000,
        "repository": "life-indexer",
        "title": "Enrich user entity with phone log",
        "text": "<p>Add last phone calls (in/out/missed) to https://github.com/eklem/life-indexer/issues/7</p>",
        "issuetype": null,
        "url": "https://github.com/eklem/life-indexer/issues/13",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-04-30T14:22:00+02:00",
        "teasertext": "Add last phone calls (in/out/missed) to https://github.com/eklem/life-indexer/issues/7",
        "tags": [
            "user",
            "entity",
            "log",
            "phone"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3fwZNP"
    },
    {
        "date": 1430422320000,
        "repository": "life-indexer",
        "title": "Indexer for browsing history",
        "text": "<p>Figure out how to easily index browser history</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-indexer/issues/14",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-04-30T21:32:00+02:00",
        "teasertext": "Figure out how to easily index browser history",
        "tags": [
            "indexer",
            "browsing",
            "history"
        ],
        "type": [
            "GitHub"
        ],
        "id": "15l0Ju"
    },
    {
        "date": 1430424420000,
        "repository": "life-indexer",
        "title": "Indexing bookmarklet",
        "text": "<p>Javascript bookmarklet that adds the URL in the browser to an indexing queue.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-indexer/issues/15",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-04-30T22:07:00+02:00",
        "teasertext": "Javascript bookmarklet that adds the URL in the browser to an indexing queue.",
        "tags": [
            "indexing",
            "bookmarklet"
        ],
        "type": [
            "GitHub"
        ],
        "id": "P3XdY"
    },
    {
        "date": 1430424660000,
        "repository": "life-indexer",
        "title": "Docproc/indexer for bookmark queue",
        "text": "<p>Docpro/indexer for bookmark queue. \nShould work for both: https://github.com/eklem/life-indexer/issues/14 and https://github.com/eklem/life-indexer/issues/15</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-indexer/issues/16",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-04-30T22:11:00+02:00",
        "teasertext": "Docpro/indexer for bookmark queue. \nShould work for both: https://github.com/eklem/life-indexer/issues/14 and https://github.com/eklem/life-indexer/issues/15",
        "tags": [
            "docproc/indexer",
            "queue",
            "bookmark"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2L12Q4"
    },
    {
        "date": 1430501700000,
        "repository": "search-index",
        "title": "indexed xx' and 'deleted xx' messages shown with console.log()",
        "text": "<p>Hi, just to mention that when you use the module with add method, &#39;indexed&#39; and &#39;deleted&#39; messages are shown using console.log() instead of using winston module. (deleter.js, line 112)</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/97",
        "user": [
            "gomezbl"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-01T19:35:00+02:00",
        "teasertext": "Hi, just to mention that when you use the module with add method, 'indexed' and 'deleted' messages are shown using console.log() instead of using winston module. (deleter.js, line 112)",
        "tags": [
            "deleted",
            "consolelog",
            "messages",
            "shown"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1MUuKM"
    },
    {
        "date": 1430645160000,
        "repository": "search-index",
        "title": "Matcher - Customization",
        "text": "<p>This is just question not an issue. </p>\n\n<p>Is it possible restrict matcher to match on specific column(s). I have 3 columns in indexer db.<br/>Also is it possible to make the threshold to 2 in following code in matcher.js ? </p>\n\n<p><code></code>`javascript </p>\n\n<p>var threshold = 3; //only give matches for strings longer or equal to than this number </p>\n\n<p><code></code>`</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/98",
        "user": [
            "thiyaga123"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-03T11:26:00+02:00",
        "teasertext": "This is just question not an issue. \n\nIs it possible restrict matcher to match on specific column(s). I have 3 columns in indexer db.Also is it possible to make the threshold to 2 in following code in matcher.js ? \n\n`javascript \n\nvar threshold = 3; //only give matches for strings longer or equal to than this number \n\n`",
        "tags": [
            "customization",
            "matcher"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1XArhZ"
    },
    {
        "date": 1430663220000,
        "repository": "search-index",
        "title": "OR Query",
        "text": "<p>&quot;query&quot;: { \n      &quot;title&quot;: [&quot;reagan&quot;], \n      &quot;body&quot;: [&quot;intelligence&quot;, &quot;agency&quot;, &quot;contra&quot;] \n    } </p>\n\n<p>I assume above query meant<br/><code>javascript \nGet all the document that has title have word &quot;reagan&quot; AND  Body have &quot;intelligence&quot; AND &quot;agency&quot; AND &quot;contra&quot; \n</code> \nright ? </p>\n\n<p>Is it possible to have combination of some  AND or OR conditions</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/99",
        "user": [
            "thiyaga123"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-03T16:27:00+02:00",
        "teasertext": "&quot;query&quot;: { \n      &quot;title&quot;: [&quot;reagan&quot;], \n      &quot;body&quot;: [&quot;intelligence&quot;, &quot;agency&quot;, &quot;contra&quot;] \n    } \n\nI assume above query meantjavascript \nGet all the document that has title have word &quot;reagan&quot; AND  Body have &quot;intelligence&quot; AND &quot;agency&quot; AND &quot;contra&quot; \n \nright ? \n\nIs it possible to have combination of some  AND or OR conditions",
        "tags": [
            "query"
        ],
        "type": [
            "GitHub"
        ],
        "id": "18Rzlu"
    },
    {
        "date": 1430742000000,
        "repository": "search-index",
        "title": "Logging options not working.",
        "text": "<p>While working with the awesome package you made, I came across the fact that my options are simply ignored: \n<code> \nvar options = { indexPath: &#39;SearchCache&#39;, logLevel: &#39;error&#39;, logSilent: true } \nvar si = require(&#39;search-index&#39;)(options) \n</code> \nBecause my console looks like this: \n<img alt=\"schermafbeelding 2015-05-04 om 14 19 46\" src=\"https://cloud.githubusercontent.com/assets/6669915/7453384/a889b9a0-f268-11e4-9eaa-5ae1697d8de2.png\"/> </p>\n\n<p>Is this a known bug? Or is this configurable elsewhere?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/100",
        "user": [
            "tonsmets"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-04T14:20:00+02:00",
        "teasertext": "While working with the awesome package you made, I came across the fact that my options are simply ignored: \n \nvar options = { indexPath: 'SearchCache', logLevel: 'error', logSilent: true } \nvar si = require('search-index')(options) \n \nBecause my console looks like this: \n \n\nIs this a known bug? Or is this configurable elsewhere?",
        "tags": [
            "logging",
            "working",
            "options"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4G8FC3"
    },
    {
        "date": 1430744460000,
        "repository": "search-index",
        "title": "Make less gigantic autogenerated IDs",
        "text": "<p>If indexing documents that dont contain an ID field. The autogenerated IDs are so gigantic that they affect the size of the index. </p>\n\n<p>Make autogenerated IDs smaller.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/101",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-04T15:01:00+02:00",
        "teasertext": "If indexing documents that dont contain an ID field. The autogenerated IDs are so gigantic that they affect the size of the index. \n\nMake autogenerated IDs smaller.",
        "tags": [
            "make",
            "ids",
            "gigantic",
            "autogenerated"
        ],
        "type": [
            "GitHub"
        ],
        "id": "15n7fL"
    },
    {
        "date": 1430745960000,
        "repository": "norch-bootstrap",
        "title": "OpenSearch",
        "text": "<p>Test and make an example in the wiki on how to combine <a href=\"http://www.opensearch.org/Home\">OpenSearch</a> XML and <code>Norch-bootstrap</code>.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/28",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-05-04T15:26:00+02:00",
        "teasertext": "Test and make an example in the wiki on how to combine OpenSearch XML and Norch-bootstrap.",
        "tags": [
            "opensearch"
        ],
        "type": [
            "GitHub"
        ],
        "id": "33ef6O"
    },
    {
        "date": 1430762040000,
        "repository": "search-index",
        "title": "A way to select the fields that are available for fielded search",
        "text": "<p>Having fielded search makes the index really big. The fewer fields are individually searchable/weightable, the smaller the index will be. Fields that cannot be individually searched on will still be available under <code>*</code> search</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/102",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-04T19:54:00+02:00",
        "teasertext": "Having fielded search makes the index really big. The fewer fields are individually searchable/weightable, the smaller the index will be. Fields that cannot be individually searched on will still be available under * search",
        "tags": [
            "select",
            "fields",
            "fielded",
            "search"
        ],
        "type": [
            "GitHub"
        ],
        "id": "js44s"
    },
    {
        "date": 1430762100000,
        "repository": "search-index",
        "title": "Synonym functionality",
        "text": "<p>make synonyms possible</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/103",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-04T19:55:00+02:00",
        "teasertext": "make synonyms possible",
        "tags": [
            "synonym",
            "functionality"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2mnZDP"
    },
    {
        "date": 1430762280000,
        "repository": "search-index",
        "title": "NOT query",
        "text": "<p>Add support for NOTing \n<code>javascript \n{ \n  query:{&quot;*&quot;:&quot;apple&quot;}, \n  not{&quot;*&quot;:&quot;fruit&quot;} \n} \n</code></p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/104",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-04T19:58:00+02:00",
        "teasertext": "Add support for NOTing \njavascript \n{ \n  query:{&quot;*&quot;:&quot;apple&quot;}, \n  not{&quot;*&quot;:&quot;fruit&quot;} \n} \n",
        "tags": [
            "query"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3SjXBL"
    },
    {
        "date": 1430813100000,
        "repository": "iftt-norch-tools",
        "title": "obj.dateHuman should be human",
        "text": "<p>A bit to complicated to read now: 2015-03-10T22:12:00+01:00 </p>\n\n<p>Should read something like: 10. March, 2015 at 13.00</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/19",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-05-05T10:05:00+02:00",
        "teasertext": "A bit to complicated to read now: 2015-03-10T22:12:00+01:00 \n\nShould read something like: 10. March, 2015 at 13.00",
        "tags": [
            "objdatehuman",
            "human"
        ],
        "type": [
            "GitHub"
        ],
        "id": "22VPRN"
    },
    {
        "date": 1430905020000,
        "repository": "search-index",
        "title": "Phrase search",
        "text": "<p>By indexing n-grams, phrase search can be implemented. </p>\n\n<p>Depends on https://github.com/fergiemcdowall/term-vector/issues/1</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/search-index/issues/105",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-06T11:37:00+02:00",
        "teasertext": "By indexing n-grams, phrase search can be implemented. \n\nDepends on https://github.com/fergiemcdowall/term-vector/issues/1",
        "tags": [
            "phrase",
            "search"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1MRBwU"
    },
    {
        "date": 1430980380000,
        "repository": "iftt-norch-tools",
        "title": "machineDate function fails",
        "text": "<p>Crashes on GitHub issues, row 10. Not sure why.</p>",
        "issuetype": "bug",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/20",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-05-07T08:33:00+02:00",
        "teasertext": "Crashes on GitHub issues, row 10. Not sure why.",
        "tags": [
            "machinedate",
            "function",
            "fails"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4llLAp"
    },
    {
        "date": 1430980740000,
        "repository": "iftt-norch-tools",
        "title": "Add markdown --> HTML converter for text",
        "text": "<p>GitHub issues needs a markdown to HTML converter to present the results in a good way. \nPossibly: https://www.npmjs.com/package/markdown, readme: https://github.com/evilstreak/markdown-js/blob/master/README.md</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/21",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-05-07T08:39:00+02:00",
        "teasertext": "GitHub issues needs a markdown to HTML converter to present the results in a good way. \nPossibly: https://www.npmjs.com/package/markdown, readme: https://github.com/evilstreak/markdown-js/blob/master/README.md",
        "tags": [
            "html",
            "text",
            "markdown",
            "converter"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1ATFde"
    },
    {
        "date": 1430981640000,
        "repository": "life-indexer",
        "title": "Add indexer for GitHub issues",
        "text": "<p>Only missing a <a href=\"https://github.com/eklem/iftt-norch-tools/issues/20\">better date parser to work</a> , but should have <a href=\"https://github.com/eklem/iftt-norch-tools/issues/21\">a better preview of content</a>.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-indexer/issues/17",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-05-07T08:54:00+02:00",
        "teasertext": "Only missing a better date parser to work , but should have a better preview of content.",
        "tags": [
            "add",
            "indexer",
            "github",
            "issues"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1Hw03C"
    },
    {
        "date": 1430981760000,
        "repository": "life-index",
        "title": "Add item rendering for: GitHub Issues",
        "text": "<p>Need a bit more work than the others.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-index/issues/10",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-05-07T08:56:00+02:00",
        "teasertext": "Need a bit more work than the others.",
        "tags": [
            "add",
            "item",
            "rendering",
            "github",
            "issues"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1ZTsth"
    },
    {
        "date": 1431069720000,
        "repository": "iftt-norch-tools",
        "title": "Automatically generate tags for text, i.e. GitHub issues and Gmail",
        "text": "<p>Some of the sources lack tags all together, i.e. Gmail and GitHub. Headline-parser could help with that: \nhttps://github.com/TessMyers/headline-parser </p>\n\n<p>Should collapse <code>multiple-words</code> into <code>multiplewords</code>.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/22",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-05-08T09:22:00+02:00",
        "teasertext": "Some of the sources lack tags all together, i.e. Gmail and GitHub. Headline-parser could help with that: \nhttps://github.com/TessMyers/headline-parser \n\nShould collapse multiple-words into multiplewords.",
        "tags": [
            "github",
            "issues",
            "gmail",
            "tags"
        ],
        "type": [
            "GitHub"
        ],
        "id": "uudCx"
    },
    {
        "date": 1431435240000,
        "repository": "iftt-norch-tools",
        "title": "Make sanitizeHTML take variables",
        "text": "<p>Should be able to take <code>allowedTags</code> and <code>allowedAttributes</code> as input. Then it could be used to clean text for obj.teaser. Today: </p>\n\n<p><code>javacript \nvar SanitizeHtml = function(text) { \n    text = sanitizeHtml(text, { \n        allowedTags: [ &#39;h3&#39;, &#39;h4&#39;, &#39;h5&#39;, &#39;h6&#39;, &#39;blockquote&#39;, &#39;p&#39;, &#39;a&#39;, &#39;ul&#39;, &#39;ol&#39;, &#39;nl&#39;, &#39;li&#39;, &#39;b&#39;, &#39;i&#39;, &#39;strong&#39;, &#39;em&#39;, &#39;strike&#39;, &#39;code&#39;, &#39;hr&#39;, &#39;br&#39;, &#39;div&#39;, &#39;table&#39;, &#39;thead&#39;, &#39;caption&#39;, &#39;tbody&#39;, &#39;tr&#39;, &#39;th&#39;, &#39;td&#39;, &#39;pre&#39;, &#39;img&#39; ], \n        allowedAttributes: { \n            a: [ &#39;href&#39;, &#39;name&#39;, &#39;target&#39; ], \n            img: [ &#39;src&#39; ] \n        } \n    }) \n    return text \n} \n</code></p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/23",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-05-12T14:54:00+02:00",
        "teasertext": "Should be able to take allowedTags and allowedAttributes as input. Then it could be used to clean text for obj.teaser. Today: \n\njavacript \nvar SanitizeHtml = function(text) { \n    text = sanitizeHtml(text, { \n        allowedTags: [ 'h3', 'h4', 'h5', 'h6', 'blockquote', 'p', 'a', 'ul', 'ol', 'nl', 'li', 'b', 'i', 'strong', 'em', 'strike', 'code', 'hr', 'br', 'div', 'table', 'thead', 'caption', 'tbody', 'tr', 'th', 'td', 'pre', 'img' ], \n        allowedAttributes: { \n            a: [ 'href', 'name', 'target' ], \n            img: [ 'src' ] \n        } \n    }) \n    return text \n} \n",
        "tags": [
            "make",
            "sanitizehtml",
            "variables"
        ],
        "type": [
            "GitHub"
        ],
        "id": "bnhRn"
    },
    {
        "date": 1431435420000,
        "repository": "life-indexer",
        "title": "Make teaser text field",
        "text": "<p>Should be stripped of any HTML tags. Will be possible when this issue is fixed in <code>iftt-norch-tools</code>: <a href=\"https://github.com/eklem/iftt-norch-tools/issues/23\">Make sanitizeHTML take variables</a></p>",
        "issuetype": null,
        "url": "https://github.com/eklem/life-indexer/issues/18",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-12T14:57:00+02:00",
        "teasertext": "Should be stripped of any HTML tags. Will be possible when this issue is fixed in iftt-norch-tools: Make sanitizeHTML take variables",
        "tags": [
            "make",
            "teaser",
            "text",
            "field"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2465Pk"
    },
    {
        "date": 1431465120000,
        "repository": "iftt-norch-tools",
        "title": "Autotagging has issues when no matching tags",
        "text": "<p>Check issue over at <a href=\"https://github.com/TessMyers/headline-parser/issues/2\">headline-parser</a> \nWorkaround would be to check if what&#39;s returned starts with &quot;Sorry, this headline appears to be completely irrelevant to the article body&quot; and then return zero tags.</p>",
        "issuetype": "bug",
        "url": "https://github.com/eklem/iftt-norch-tools/issues/24",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-05-12T23:12:00+02:00",
        "teasertext": "Check issue over at headline-parser \nWorkaround would be to check if what's returned starts with &quot;Sorry, this headline appears to be completely irrelevant to the article body&quot; and then return zero tags.",
        "tags": [
            "autotagging",
            "issues",
            "matching",
            "tags"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4f45MB"
    },
    {
        "date": 1432123980000,
        "repository": "norch-bootstrap",
        "title": "Showing facets for 0 results query",
        "text": "<p>Not sure if this is just a <code>norch-bootstrap</code> issue or not, but if I search for a lot of words, I get 0 search results but a lot of filters for my facets. Seems there&#39;s a AND implied for search results and an OR on facets? </p>\n\n<p><img alt=\"skjermbilde 2015-05-20 kl 14 10 02\" src=\"https://cloud.githubusercontent.com/assets/236656/7725360/3c3fe0c8-fefa-11e4-8465-cec931903044.png\"/></p>",
        "issuetype": "bug",
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/29",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-20T14:13:00+02:00",
        "teasertext": "Not sure if this is just a norch-bootstrap issue or not, but if I search for a lot of words, I get 0 search results but a lot of filters for my facets. Seems there's a AND implied for search results and an OR on facets? \n\n",
        "tags": [
            "showing",
            "facets",
            "query",
            "results"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2BUiM6"
    },
    {
        "date": 1432141920000,
        "repository": "life-indexer",
        "title": "Autotagging with some issues for nonMatched",
        "text": "<p>When nonMatched body match from keyword i title, something strange happens with the autotagging</p>",
        "issuetype": "bug",
        "url": "https://github.com/eklem/life-indexer/issues/21",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-05-20T19:12:00+02:00",
        "teasertext": "When nonMatched body match from keyword i title, something strange happens with the autotagging",
        "tags": [
            "issues",
            "nonmatched",
            "autotagging"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3g83mE"
    },
    {
        "date": 1432144920000,
        "repository": "life-indexer",
        "title": "GitHub user image needs some regexp",
        "text": "<p>Need to change from \n<code> \n=IMAGE(&quot;https://avatars.githubusercontent.com/u/236656?v=3&quot;;1) \n</code> \nto \n<code> \nhttps://avatars.githubusercontent.com/u/236656?v=3 \n</code></p>",
        "issuetype": "bug",
        "url": "https://github.com/eklem/life-indexer/issues/22",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-05-20T20:02:00+02:00",
        "teasertext": "Need to change from \n \n=IMAGE(&quot;https://avatars.githubusercontent.com/u/236656?v=3&quot;;1) \n \nto \n \nhttps://avatars.githubusercontent.com/u/236656?v=3 \n",
        "tags": [
            "github",
            "user",
            "image",
            "regexp"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3AXWQS"
    },
    {
        "date": 1432207800000,
        "repository": "norch-bootstrap",
        "title": "Make norch-bootstrap work with newest search-index features",
        "text": "<p>Keep <code>norch-bootstrap</code>up to date with the latest <code>search-index</code> stuff to make it show-case what search-index can do. Then people only have to focus on getting the data in when testing search-index.</p>",
        "issuetype": "bug,enhancement",
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/30",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-21T13:30:00+02:00",
        "teasertext": "Keep norch-bootstrapup to date with the latest search-index stuff to make it show-case what search-index can do. Then people only have to focus on getting the data in when testing search-index.",
        "tags": [
            "newest",
            "features",
            "make",
            "search-index"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1ICVmI"
    },
    {
        "date": 1432287900000,
        "repository": "search-index",
        "title": "[Question] Searching in selected batches",
        "text": "<p>In my implementation of this awesome search plugin, I currently add two batches (with different names) of data to the index. When searching this index, I&#39;m only able to search in both &quot;datasets&quot;. </p>\n\n<p>Is there a possibility to specifiy a batchName to do all searching in? This would make it possible to fill the index once with all &quot;datasets&quot; I need, and then have the possibility to search trough all data, or trough 1 or more specified batches.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/106",
        "user": [
            "tonsmets"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-22T11:45:00+02:00",
        "teasertext": "In my implementation of this awesome search plugin, I currently add two batches (with different names) of data to the index. When searching this index, I'm only able to search in both &quot;datasets&quot;. \n\nIs there a possibility to specifiy a batchName to do all searching in? This would make it possible to fill the index once with all &quot;datasets&quot; I need, and then have the possibility to search trough all data, or trough 1 or more specified batches.",
        "tags": [
            "[question]",
            "selected",
            "batches",
            "searching"
        ],
        "type": [
            "GitHub"
        ],
        "id": "17kvvB"
    },
    {
        "date": 1432390560000,
        "repository": "norch",
        "title": "Move from express to restify",
        "text": "<p>http://mcavage.me/node-restify/</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/88",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-23T16:16:00+02:00",
        "teasertext": "http://mcavage.me/node-restify/",
        "tags": [
            "move",
            "express",
            "restify"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4yRGDU"
    },
    {
        "date": 1432412160000,
        "repository": "norch",
        "title": "Autocomplete / matcher from the browser with Opensearch",
        "text": "<p>So, gotten Opensearch.xml to work with the browser search box over at <code>[life-index](https://github.com/eklem/life-index/commit/18aad6ba776a7a9dec234c6e936a221b3d42eb24)</code>, but need a little more to get the autocomplete to work fully. </p>\n\n<p>Today the respons JSON is an array of suggested search words. \n<img alt=\"skjermbilde 2015-05-23 kl 21 52 30\" src=\"https://cloud.githubusercontent.com/assets/236656/7785613/026630aa-0198-11e5-9656-8dcef2d852fd.png\"/> </p>\n\n<p>From the <a href=\"http://www.opensearch.org/Specifications/OpenSearch/Extensions/Suggestions/1.1#Response_content\">Opensearch XML documentation</a> for suggestions it seems I need to alter the JSON a bit. I need the existing list \n<code>json \n[   \n   &quot;test&quot;, \n   &quot;testing&quot;, \n   &quot;tests&quot;, \n   &quot;tested&quot;, \n   &quot;test2&amp;quot;&quot;, \n   &quot;test2&quot;, \n   &quot;test\\\\tools\\\\bench&quot;, \n   &quot;testcase&quot;, \n   &quot;test1&amp;quot;&quot;, \n   &quot;testdata&quot; \n] \n</code> \nto look like \n<code>json \n[   \n   &quot;test&quot;, \n   [   \n      &quot;test&quot;, \n      &quot;testing&quot;, \n      &quot;tests&quot;, \n      &quot;tested&quot;, \n      &quot;test2&amp;quot;&quot;, \n      &quot;test2&quot;, \n      &quot;test\\\\tools\\\\bench&quot;, \n      &quot;testcase&quot;, \n      &quot;test1&amp;quot;&quot;, \n      &quot;testdata&quot; \n   ] \n] \n</code> \nWhere the first array consists of the query or beginsWith and then the array of suggestions. My question is if you have an idea on how easy it would be to make this a part of the existing Norch without breaking anything? </p>\n\n<p>Before you do anything, I can test with some dummy-JSON to be sure this is actually working for the browser.</p>",
        "issuetype": "enhancement,question",
        "url": "https://github.com/fergiemcdowall/norch/issues/89",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-23T22:16:00+02:00",
        "teasertext": "So, gotten Opensearch.xml to work with the browser search box over at [life-index](https://github.com/eklem/life-index/commit/18aad6ba776a7a9dec234c6e936a221b3d42eb24), but need a little more to get the autocomplete to work fully. \n\nToday the respons JSON is an array of suggested search words. \n \n\nFrom the Opensearch XML documentation for suggestions it seems I need to alter the JSON a bit. I need the existing list \njson \n[   \n   &quot;test&quot;, \n   &quot;testing&quot;, \n   &quot;tests&quot;, \n   &quot;tested&quot;, \n   &quot;test2&amp;quot;&quot;, \n   &quot;test2&quot;, \n   &quot;test\\\\tools\\\\bench&quot;, \n   &quot;testcase&quot;, \n   &quot;test1&amp;quot;&quot;, \n   &quot;testdata&quot; \n] \n \nto look like \njson \n[   \n   &quot;test&quot;, \n   [   \n      &quot;test&quot;, \n      &quot;testing&quot;, \n      &quot;tests&quot;, \n      &quot;tested&quot;, \n      &quot;test2&amp;quot;&quot;, \n      &quot;test2&quot;, \n      &quot;test\\\\tools\\\\bench&quot;, \n      &quot;testcase&quot;, \n      &quot;test1&amp;quot;&quot;, \n      &quot;testdata&quot; \n   ] \n] \n \nWhere the first array consists of the query or beginsWith and then the array of suggestions. My question is if you have an idea on how easy it would be to make this a part of the existing Norch without breaking anything? \n\nBefore you do anything, I can test with some dummy-JSON to be sure this is actually working for the browser.",
        "tags": [
            "matcher",
            "opensearch",
            "autocomplete",
            "browser"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2LrULM"
    },
    {
        "date": 1432474200000,
        "repository": "life-index",
        "title": "Gravatar for favicon?",
        "text": "<p>Define email address for the person the search is for and get a gravatar favicon returned to use in the code (both xml and html) \nhttp://premium.wpmudev.org/blog/how-to-use-your-gravatar-as-the-favicon-for-your-wordpress-site/?utm<em>expid=3606929-34.mZctMukzSv6Wvz3lKaD43w.0&amp;utm</em>referrer=http%3A%2F%2Fwww.google.no%2Furl%3Fsa%3Dt%26rct%3Dj%26q%3D%26esrc%3Ds%26source%3Dweb%26cd%3D1%26ved%3D0CB0QFjAA%26url%3Dhttp%253A%252F%252Fpremium.wpmudev.org%252Fblog%252Fhow-to-use-your-gravatar-as-the-favicon-for-your-wordpress-site%252F%26ei%3D9NFhVfm-HsuAU9j-gpgB%26usg%3DAFQjCNEKCgxJyqOgOlfVe4wcSrfasEuXJA%26sig2%3DgKl4f-OWrQwUHma__syc3Q%26bvm%3Dbv.93990622%2Cd.ZGU</p>",
        "issuetype": null,
        "url": "https://github.com/eklem/life-index/issues/11",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-24T15:30:00+02:00",
        "teasertext": "Define email address for the person the search is for and get a gravatar favicon returned to use in the code (both xml and html) \nhttp://premium.wpmudev.org/blog/how-to-use-your-gravatar-as-the-favicon-for-your-wordpress-site/?utmexpid=3606929-34.mZctMukzSv6Wvz3lKaD43w.0&amp;utmreferrer=http%3A%2F%2Fwww.google.no%2Furl%3Fsa%3Dt%26rct%3Dj%26q%3D%26esrc%3Ds%26source%3Dweb%26cd%3D1%26ved%3D0CB0QFjAA%26url%3Dhttp%253A%252F%252Fpremium.wpmudev.org%252Fblog%252Fhow-to-use-your-gravatar-as-the-favicon-for-your-wordpress-site%252F%26ei%3D9NFhVfm-HsuAU9j-gpgB%26usg%3DAFQjCNEKCgxJyqOgOlfVe4wcSrfasEuXJA%26sig2%3DgKl4f-OWrQwUHma__syc3Q%26bvm%3Dbv.93990622%2Cd.ZGU",
        "tags": [
            "gravatar",
            "favicon"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3dBngZ"
    },
    {
        "date": 1432474500000,
        "repository": "life-index",
        "title": "overflow hidden to prevent horisontal scrolling",
        "text": "<p>If words or single strings of text in search result items are longer than the width, the page will be able to scroll horisontal. Set \n<code>css \ndiv {overflow:hidden;} \n</code></p>",
        "issuetype": null,
        "url": "https://github.com/eklem/life-index/issues/12",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-24T15:35:00+02:00",
        "teasertext": "If words or single strings of text in search result items are longer than the width, the page will be able to scroll horisontal. Set \ncss \ndiv {overflow:hidden;} \n",
        "tags": [
            "overflow",
            "hidden",
            "prevent",
            "horisontal",
            "scrolling"
        ],
        "type": [
            "GitHub"
        ],
        "id": "ZDEod"
    },
    {
        "date": 1432482060000,
        "repository": "norch",
        "title": "Should we get rid of unneccesary use of this in norch.js?",
        "text": null,
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/90",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-24T17:41:00+02:00",
        "teasertext": "null",
        "tags": [
            "rid",
            "unneccesary",
            "norchjs"
        ],
        "type": [
            "GitHub"
        ],
        "id": "18Nyft"
    },
    {
        "date": 1432549680000,
        "repository": "search-index",
        "title": "The symbols `_` and `countDocuments` were leaking.",
        "text": "<p>Added a little <code>var</code> action to keep them out of the global namespace. Wrote a test that fails if they&#39;re leaking.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/107",
        "user": [
            "ceejbot"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-25T12:28:00+02:00",
        "teasertext": "Added a little var action to keep them out of the global namespace. Wrote a test that fails if they're leaking.",
        "tags": [
            "symbols",
            "`_`",
            "`countdocuments`",
            "leaking"
        ],
        "type": [
            "GitHub"
        ],
        "id": "hwzTB"
    },
    {
        "date": 1432574100000,
        "repository": "norch",
        "title": "Removed use of this in norch.js",
        "text": "<p>This version passes all tests on my machine. Addresses issue #90. Should I add additional tests to this PR?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/pull/91",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": "fergiemcdowall",
        "datehuman": "2015-05-25T19:15:00+02:00",
        "teasertext": "This version passes all tests on my machine. Addresses issue #90. Should I add additional tests to this PR?",
        "tags": [
            "removed",
            "norchjs"
        ],
        "type": [
            "GitHub"
        ],
        "id": "lJNVf"
    },
    {
        "date": 1432589700000,
        "repository": "life-index",
        "title": "Setup on Raspbian",
        "text": "<p>Setup Life-index on Raspbian again.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-index/issues/13",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-05-25T23:35:00+02:00",
        "teasertext": "Setup Life-index on Raspbian again.",
        "tags": [
            "setup",
            "raspbian"
        ],
        "type": [
            "GitHub"
        ],
        "id": "A1gr8"
    },
    {
        "date": 1432589940000,
        "repository": "life-index",
        "title": "Use module Forever to run indexing",
        "text": "<p>The Forever module is good for two reasons. \n<em> will keep process alive\n</em> can be stopped from crontab so indexing can be done peacefully</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-index/issues/14",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-05-25T23:39:00+02:00",
        "teasertext": "The Forever module is good for two reasons. \n will keep process alive\n can be stopped from crontab so indexing can be done peacefully",
        "tags": [
            "forever",
            "run",
            "module",
            "indexing"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2uXkjK"
    },
    {
        "date": 1432626480000,
        "repository": "search-index",
        "title": "Change matcher to also fit Opensearch XML suggests",
        "text": "<p>I suggest we make the matcher configurable, so you can specify what you want in return. Today we only return an array of autocomplete keywords, but Opensearch needs the acutal query as well, and it can also take hit amounts. <a href=\"https://github.com/fergiemcdowall/norch/issues/89\">Proof of concept documented over at Norch</a>, and <a href=\"https://github.com/fergiemcdowall/norch/issues/89\">Opensearch documentation on suggests</a> as they call it.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/search-index/issues/108",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-26T09:48:00+02:00",
        "teasertext": "I suggest we make the matcher configurable, so you can specify what you want in return. Today we only return an array of autocomplete keywords, but Opensearch needs the acutal query as well, and it can also take hit amounts. Proof of concept documented over at Norch, and Opensearch documentation on suggests as they call it.",
        "tags": [
            "opensearch",
            "xml",
            "matcher",
            "suggests"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2j2pHP"
    },
    {
        "date": 1432629240000,
        "repository": "norch",
        "title": "Allow norch and si to run in same process.",
        "text": "<p>By letting norch accept a &#39;si&#39; parameter in it&#39;s options. Closes #79.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/pull/92",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-26T10:34:00+02:00",
        "teasertext": "By letting norch accept a 'si' parameter in it's options. Closes #79.",
        "tags": [
            "si",
            "run",
            "process",
            "norch"
        ],
        "type": [
            "GitHub"
        ],
        "id": "48YmSJ"
    },
    {
        "date": 1432631400000,
        "repository": "search-index",
        "title": "[feature] Option: don't store field(s)",
        "text": "<p>Analyse the field, but don&#39;t store the content:<br/>In my case I have a field with large content that should be analysed, but<br/>it is  not necessary to store it with the indexed document.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/109",
        "user": [
            "larsvoigt"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-26T11:10:00+02:00",
        "teasertext": "Analyse the field, but don't store the content:In my case I have a field with large content that should be analysed, butit is  not necessary to store it with the indexed document.",
        "tags": [
            "[feature]",
            "option",
            "fields",
            "store"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1HeOId"
    },
    {
        "date": 1432640940000,
        "repository": "search-index",
        "title": "Clean up search-index.js as well?",
        "text": "<p>As in fergiemcdowall/norch#90?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/110",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-26T13:49:00+02:00",
        "teasertext": "As in fergiemcdowall/norch#90?",
        "tags": [
            "clean",
            "search-indexjs"
        ],
        "type": [
            "GitHub"
        ],
        "id": "CJyNK"
    },
    {
        "date": 1432675260000,
        "repository": "norch",
        "title": "Facets code for Norch and Search-index not in sync?",
        "text": "<p>Updated all <code>norch</code>and <code>search-index</code> stuff and now I can&#39;t get facets working any more. Is this due to some search-index API changes that is not reflected in <code>norch</code>? \nFrom URL \n<code> \nhttp://10.0.1.14:3030/search?q=personalsearchengine&amp;facets=user,type,tags \n</code> \nfacets was returned empty: \n<code></code>`JSON \n{ <br/>   &quot;totalHits&quot;:1, \n   &quot;query&quot;:{ <br/>      &quot;query&quot;:{ <br/>         &quot;*&quot;:[ <br/>            &quot;personalsearchengine&quot; \n         ] \n      }, \n      &quot;offset&quot;:0, \n      &quot;pageSize&quot;:10, \n      &quot;facetLength&quot;:10, \n      &quot;maxFacetLimit&quot;:100 \n   }, \n   &quot;facets&quot;:{   </p>\n\n<p>   }, \n   &quot;hits&quot;:[ <br/>      { <br/>         &quot;id&quot;:&quot;1B54U7&quot;, \n         &quot;relevance&quot;:[ <br/>            [ <br/>               &quot;*&quot;, \n               &quot;personalsearchengine&quot;, \n               &quot;0.0121951220&quot;, \n               1 \n            ] \n         ], \n         &quot;score&quot;:0.012195122, \n         &quot;document&quot;:{ <br/>            &quot;date&quot;:1432113060000, \n            &quot;dateuploaded&quot;:&quot;May 20, 2015 at 01:05PM&quot;, \n            &quot;title&quot;:&quot;Talking at Open Mic Night at Webrebels!&quot;, \n            &quot;text&quot;:&quot;It&#39;s all good. Here&#39;s the presentation &lt;a href=\\&quot;https://docs.google.com/presentation/d/11vYhf5AGM<em>PekpCMZ0IQijz7xSxWz3n-XDnl</em>K6LFDU/edit?usp=sharing\\&quot;&gt;Personal Search: Your digital life searchable?&lt;/a&gt;&quot;, \n            &quot;url&quot;:&quot;http://flic.kr/p/siT28J&quot;, \n            &quot;image&quot;:&quot;&quot;, \n            &quot;urlimage&quot;:&quot;https://farm8.staticflickr.com/7791/17267610924<em>7a5693e212</em>o.png&quot;, \n            &quot;tags&quot;:[ <br/>               &quot;search&quot;, \n               &quot;conference&quot;, \n               &quot;personalsearch&quot;, \n               &quot;webrebels&quot;, \n               &quot;personalsearchengine&quot;, \n               &quot;lifeindex&quot; \n            ], \n            &quot;datehuman&quot;:&quot;2015-05-20T11:11:00+02:00&quot;, \n            &quot;teasertext&quot;:&quot;It&#39;s all good. Here&#39;s the presentation Personal Search: Your digital life searchable?&quot;, \n            &quot;type&quot;:[ <br/>               &quot;Flickr&quot; \n            ], \n            &quot;user&quot;:[ <br/>               &quot;eklem&quot; \n            ], \n            &quot;id&quot;:&quot;1B54U7&quot; \n         } \n      } \n   ] \n} \n<code></code>`</p>",
        "issuetype": "question",
        "url": "https://github.com/fergiemcdowall/norch/issues/93",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-26T23:21:00+02:00",
        "teasertext": "Updated all norchand search-index stuff and now I can't get facets working any more. Is this due to some search-index API changes that is not reflected in norch? \nFrom URL \n \nhttp://10.0.1.14:3030/search?q=personalsearchengine&amp;facets=user,type,tags \n \nfacets was returned empty: \n`JSON \n{    &quot;totalHits&quot;:1, \n   &quot;query&quot;:{       &quot;query&quot;:{          &quot;*&quot;:[             &quot;personalsearchengine&quot; \n         ] \n      }, \n      &quot;offset&quot;:0, \n      &quot;pageSize&quot;:10, \n      &quot;facetLength&quot;:10, \n      &quot;maxFacetLimit&quot;:100 \n   }, \n   &quot;facets&quot;:{   \n\n   }, \n   &quot;hits&quot;:[       {          &quot;id&quot;:&quot;1B54U7&quot;, \n         &quot;relevance&quot;:[             [                &quot;*&quot;, \n               &quot;personalsearchengine&quot;, \n               &quot;0.0121951220&quot;, \n               1 \n            ] \n         ], \n         &quot;score&quot;:0.012195122, \n         &quot;document&quot;:{             &quot;date&quot;:1432113060000, \n            &quot;dateuploaded&quot;:&quot;May 20, 2015 at 01:05PM&quot;, \n            &quot;title&quot;:&quot;Talking at Open Mic Night at Webrebels!&quot;, \n            &quot;text&quot;:&quot;It's all good. Here's the presentation &lt;a href=\\&quot;https://docs.google.com/presentation/d/11vYhf5AGMPekpCMZ0IQijz7xSxWz3n-XDnlK6LFDU/edit?usp=sharing\\&quot;&gt;Personal Search: Your digital life searchable?&lt;/a&gt;&quot;, \n            &quot;url&quot;:&quot;http://flic.kr/p/siT28J&quot;, \n            &quot;image&quot;:&quot;&quot;, \n            &quot;urlimage&quot;:&quot;https://farm8.staticflickr.com/7791/172676109247a5693e212o.png&quot;, \n            &quot;tags&quot;:[                &quot;search&quot;, \n               &quot;conference&quot;, \n               &quot;personalsearch&quot;, \n               &quot;webrebels&quot;, \n               &quot;personalsearchengine&quot;, \n               &quot;lifeindex&quot; \n            ], \n            &quot;datehuman&quot;:&quot;2015-05-20T11:11:00+02:00&quot;, \n            &quot;teasertext&quot;:&quot;It's all good. Here's the presentation Personal Search: Your digital life searchable?&quot;, \n            &quot;type&quot;:[                &quot;Flickr&quot; \n            ], \n            &quot;user&quot;:[                &quot;eklem&quot; \n            ], \n            &quot;id&quot;:&quot;1B54U7&quot; \n         } \n      } \n   ] \n} \n`",
        "tags": [
            "norch",
            "sync",
            "facets",
            "search-index"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4DuSzv"
    },
    {
        "date": 1432808220000,
        "repository": "search-index",
        "title": "Option to ignore stop words",
        "text": "<p>Hey all, </p>\n\n<p>Currently, it&#39;s understanding that as soon as a stop word is present, the search is halted. So for example, the keywords <code>[&#39;fish&#39;, &#39;and&#39;, chips&#39;]</code> can return no results even though <code>[&#39;fish&#39;, &#39;chips&#39;]</code> do. An option to simply ignore the stop words instead of having them halt the search would be tremendous. </p>\n\n<p>Cheers</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/111",
        "user": [
            "alexturpin"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-28T12:17:00+02:00",
        "teasertext": "Hey all, \n\nCurrently, it's understanding that as soon as a stop word is present, the search is halted. So for example, the keywords ['fish', 'and', chips'] can return no results even though ['fish', 'chips'] do. An option to simply ignore the stop words instead of having them halt the search would be tremendous. \n\nCheers",
        "tags": [
            "option",
            "ignore",
            "words",
            "stop"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2VtZJ5"
    },
    {
        "date": 1432802220000,
        "repository": "norch",
        "title": "Full-text search, partial words and accents ?",
        "text": "<p>Hello </p>\n\n<ul><li><p>Could you give me a clue on full-text query search for misspelled words :<br/>http://localhost:3030/search?q=internt (instead of) http://localhost:3030/search?q=internet </p></li><li><p>Also for partial word, quite close to misspelled :<br/>http://localhost:3030/search?q=ternet </p></li><li><p>And for accents on words, example (hélicoptère for french translation of helicopter) if typed with and without accent.<br/>http://localhost:3030/search?q=hélicoptère and http://localhost:3030/search?q=helicoptere \nI would like to avoid stripping all accents before indexing and querying. </p></li></ul>\n\n<p>Thank you</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/94",
        "user": [
            "jmzoda"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-28T10:37:00+02:00",
        "teasertext": "Hello \n\nCould you give me a clue on full-text query search for misspelled words :http://localhost:3030/search?q=internt (instead of) http://localhost:3030/search?q=internet Also for partial word, quite close to misspelled :http://localhost:3030/search?q=ternet And for accents on words, example (hélicoptère for french translation of helicopter) if typed with and without accent.http://localhost:3030/search?q=hélicoptère and http://localhost:3030/search?q=helicoptere \nI would like to avoid stripping all accents before indexing and querying. \n\nThank you",
        "tags": [
            "search",
            "partial",
            "words",
            "accents"
        ],
        "type": [
            "GitHub"
        ],
        "id": "13XZrb"
    },
    {
        "date": 1432808340000,
        "repository": "search-index",
        "title": "Which features to implement - Processing over file size ?",
        "text": "<p>I was thinking. Search index file size is always an issue. High processing demands for a search solution has historically been an issue. But <code>Search-index</code> can now run in the browser. This means we should prioritize nice features that create higher processing demands over features that creates bigger search indexes. </p>\n\n<p>What do you think?</p>",
        "issuetype": "discussion",
        "url": "https://github.com/fergiemcdowall/search-index/issues/112",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-28T12:19:00+02:00",
        "teasertext": "I was thinking. Search index file size is always an issue. High processing demands for a search solution has historically been an issue. But Search-index can now run in the browser. This means we should prioritize nice features that create higher processing demands over features that creates bigger search indexes. \n\nWhat do you think?",
        "tags": [
            "file",
            "size",
            "features",
            "processing"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1NZ1OX"
    },
    {
        "date": 1432824660000,
        "repository": "search-index",
        "title": "[question] search query",
        "text": "<p>Hello, <br/>short question:<br/>Is it possible to &quot;say&quot; search-index that it should looking for all hits<br/>in <code>body &quot;logic or&quot; title</code>?<br/><code> \n var query = { \n            &quot;query&quot;: {&quot;body&quot;: &quot;apple&quot;, &quot;title&quot;: &quot;apple&quot;}, \n            &quot;offset&quot;: 0, \n            &quot;pageSize&quot;: 100 \n        }; \n</code> \nI think I get always a &quot;logic and&quot; result set.  More specific the result contains only hits that the engine found in <code> body ∧ title </code>.  </p>\n\n<p>Thanks Lars</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/113",
        "user": [
            "larsvoigt"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-28T16:51:00+02:00",
        "teasertext": "Hello, short question:Is it possible to &quot;say&quot; search-index that it should looking for all hitsin body &quot;logic or&quot; title? \n var query = { \n            &quot;query&quot;: {&quot;body&quot;: &quot;apple&quot;, &quot;title&quot;: &quot;apple&quot;}, \n            &quot;offset&quot;: 0, \n            &quot;pageSize&quot;: 100 \n        }; \n \nI think I get always a &quot;logic and&quot; result set.  More specific the result contains only hits that the engine found in  body ∧ title .  \n\nThanks Lars",
        "tags": [
            "[question]",
            "search",
            "query"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1MuXZ2"
    },
    {
        "date": 1432847340000,
        "repository": "life-index",
        "title": "URL field / search box",
        "text": "<p>The URL field/search box for Firefox in B2G should be an applet to have on your screen. Would be a goto-place for a lot of stuff.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-index/issues/15",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-28T23:09:00+02:00",
        "teasertext": "The URL field/search box for Firefox in B2G should be an applet to have on your screen. Would be a goto-place for a lot of stuff.",
        "tags": [
            "field",
            "/",
            "search",
            "box"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3BU8Iq"
    },
    {
        "date": 1432890180000,
        "repository": "search-index",
        "title": "[feature] Indexing options",
        "text": "<p>Many problems are solved and the world is a better place if <code>search-index</code> can implement indexing options. </p>\n\n<p>Off the top of my head: </p>\n\n<ul><li>Weighting(per doc) </li><li>Weighting(per field) </li><li>Stopwords(per doc) </li><li>Stopwords(per field) </li><li>Ngrams(per doc) </li><li>Ngrams(per field) </li><li>Searchable(per field) </li></ul>\n\n<p>Any more options that could be nice to have?</p>",
        "issuetype": "discussion,Feature",
        "url": "https://github.com/fergiemcdowall/search-index/issues/114",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-05-29T11:03:00+02:00",
        "teasertext": "Many problems are solved and the world is a better place if search-index can implement indexing options. \n\nOff the top of my head: \n\nWeighting(per doc) Weighting(per field) Stopwords(per doc) Stopwords(per field) Ngrams(per doc) Ngrams(per field) Searchable(per field) \n\nAny more options that could be nice to have?",
        "tags": [
            "[feature]",
            "indexing",
            "options"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2RoaRG"
    },
    {
        "date": 1432890480000,
        "repository": "life-index",
        "title": "Switch from norch-bootstrap to norch-angular-app to keep up with features",
        "text": "<p>Seems it&#39;s time to switch from <a href=\"https://github.com/fergiemcdowall/norch-bootstrap\">norch-bootstrap</a> to <a href=\"https://github.com/fergiemcdowall/norch-angular-app\">norch-angular-app</a>. <code>norch-bootstrap</code> is a bit limiting, and all the fun, new features and maintenance of old features is happening over at <code>norch-angular-app</code>. </p>\n\n<p>A little unsure if I should use norch-angular-app or something simpler. I need to get a single-page-app that will work with browserify in the end.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-index/issues/16",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-05-29T11:08:00+02:00",
        "teasertext": "Seems it's time to switch from norch-bootstrap to norch-angular-app. norch-bootstrap is a bit limiting, and all the fun, new features and maintenance of old features is happening over at norch-angular-app. \n\nA little unsure if I should use norch-angular-app or something simpler. I need to get a single-page-app that will work with browserify in the end.",
        "tags": [
            "switch",
            "norch-angular-app",
            "norch-bootstrap",
            "features"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2zCaWz"
    },
    {
        "date": 1432982340000,
        "repository": "life-indexer",
        "title": "Analysis - Calculate time spent on each document processing step",
        "text": "<p>I&#39;m curious on what the cost of each document processing step costs in terms of hardware. An analysis on a full crawl would be nice. Agregate Time start - time end for each processor and see if it could benefit some tuning. Maybe ifttt is the best place to implement?</p>",
        "issuetype": "enhancement,question",
        "url": "https://github.com/eklem/life-indexer/issues/23",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-05-30T12:39:00+02:00",
        "teasertext": "I'm curious on what the cost of each document processing step costs in terms of hardware. An analysis on a full crawl would be nice. Agregate Time start - time end for each processor and see if it could benefit some tuning. Maybe ifttt is the best place to implement?",
        "tags": [
            "time",
            "document",
            "processing",
            "step"
        ],
        "type": [
            "GitHub"
        ],
        "id": "iZZJ"
    },
    {
        "date": 1433236500000,
        "repository": "life-index",
        "title": "Show positions +/- 12 hours",
        "text": "<p>Use my <a href=\"https://maps.google.no/locationhistory/b/0/?hl=no\">Google location history</a> to show  geographical whereabouts on a specific result when hovering on that result. </p>\n\n<p>Could use something like <a href=\"https://github.com/jlord/sheetsee-maps\">sheetsee.map</a> to visualize ?</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-index/issues/17",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-06-02T11:15:00+02:00",
        "teasertext": "Use my Google location history to show  geographical whereabouts on a specific result when hovering on that result. \n\nCould use something like sheetsee.map to visualize ?",
        "tags": [
            "positions",
            "+/-",
            "hours",
            "show"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2Gel0S"
    },
    {
        "date": 1433236920000,
        "repository": "life-indexer",
        "title": "Add geographical postion to calendar event with mapbox",
        "text": "<p>Use mapbox to add geographical position on calendar events. Will need <a href=\"https://www.mapbox.com/developers/api/geocoding/\">Norwegian coverage</a> before it will work for me.  </p>\n\n<p>Could use a <a href=\"https://github.com/eklem/life-index/issues/17\">more specific version of this life-index issue</a> to display position?</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-indexer/issues/24",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-06-02T11:22:00+02:00",
        "teasertext": "Use mapbox to add geographical position on calendar events. Will need Norwegian coverage before it will work for me.  \n\nCould use a more specific version of this life-index issue to display position?",
        "tags": [
            "add",
            "geographical",
            "calendar",
            "mapbox"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2J1wGI"
    },
    {
        "date": 1433332620000,
        "repository": "norch-bootstrap",
        "title": "Add to documentation - Not actively developed",
        "text": "<p>Since norch-bootstrap may be ditched, maybe the documentation should reflect that?</p>",
        "issuetype": "question",
        "url": "https://github.com/fergiemcdowall/norch-bootstrap/issues/31",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-06-03T13:57:00+02:00",
        "teasertext": "Since norch-bootstrap may be ditched, maybe the documentation should reflect that?",
        "tags": [
            "add",
            "actively",
            "developed",
            "documentation"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4gKDQN"
    },
    {
        "date": 1433332920000,
        "repository": "life-indexer",
        "title": "Add indexer for Pocket - My list",
        "text": "<p>Bookmarks are not very helpfull. But Pocket seems like a nice service and you can also tag items you want to read later with keywords. Geting these things into search-index would be helpful as a part of the lurkings level: \n1. Actions \n2. Reactions \n3. Lurkings </p>\n\n<p>Actions are stuff aka. text, audio, video, pictures you initiate. Reactions are follow ups on actions. Lurkings are content you consume and like but don&#39;t react to other than likes, hearts etc.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-indexer/issues/25",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-06-03T14:02:00+02:00",
        "teasertext": "Bookmarks are not very helpfull. But Pocket seems like a nice service and you can also tag items you want to read later with keywords. Geting these things into search-index would be helpful as a part of the lurkings level: \n1. Actions \n2. Reactions \n3. Lurkings \n\nActions are stuff aka. text, audio, video, pictures you initiate. Reactions are follow ups on actions. Lurkings are content you consume and like but don't react to other than likes, hearts etc.",
        "tags": [
            "add",
            "indexer",
            "pocket",
            "list"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2fKBV4"
    },
    {
        "date": 1433339460000,
        "repository": "life-indexer",
        "title": "Create an index.js to run all indexers",
        "text": "<p>Instead of a mile long line in crontab to run the indexers, I should have one index.js to run all desired indexers.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-indexer/issues/26",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-06-03T15:51:00+02:00",
        "teasertext": "Instead of a mile long line in crontab to run the indexers, I should have one index.js to run all desired indexers.",
        "tags": [
            "create",
            "indexjs",
            "indexers",
            "run"
        ],
        "type": [
            "GitHub"
        ],
        "id": "jnFVU"
    },
    {
        "date": 1434363780000,
        "repository": "search-index",
        "title": "Move test framework to Mocha",
        "text": "<p>The Jasmine tests are begining to creak a bit, and are running into a lot of basic problems that dont seem to be easily resolvable </p>\n\n<p>Personally I prefer Mocha for testing npm modules, so I vote for moving the whole test suite over to mocha</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/116",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-06-15T12:23:00+02:00",
        "teasertext": "The Jasmine tests are begining to creak a bit, and are running into a lot of basic problems that dont seem to be easily resolvable \n\nPersonally I prefer Mocha for testing npm modules, so I vote for moving the whole test suite over to mocha",
        "tags": [
            "move",
            "framework",
            "test",
            "mocha"
        ],
        "type": [
            "GitHub"
        ],
        "id": "UJdpc"
    },
    {
        "date": 1434363960000,
        "repository": "search-index",
        "title": "V0.6.0",
        "text": null,
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/117",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-06-15T12:26:00+02:00",
        "teasertext": "null",
        "tags": [
            "v060"
        ],
        "type": [
            "GitHub"
        ],
        "id": "VQAW0"
    },
    {
        "date": 1434365700000,
        "repository": "search-index",
        "title": "[Question] Desktop File Indexing",
        "text": "<p>Hi, \n   <a href=\"https://github.com/adobe/brackets\">Brackets</a> is an open source editor and we are looking at improving the Find in Files search capabilities in brackets. I stumbled upon this repository which seems to be very good for our use case. The main purpose is to index all the files in a project and allow for more advanced search queries. I have the following queries about the functionality provided by this library- sorry if these questions seem introductory. </p>\n\n<ol><li>We have a list of open projects, can we switch the search index on the fly as projects are changed. </li><li>Does the search engine watch the filesystem for changes and automatically update the index (or is the index based out of abstract documents). </li><li>Does it have support for regex search? </li><li>I see that there have been no releases since 2013, is it safe to run master branch? Can you give an info on the release cycles? </li><li>Do you recommend this search library for desktop file indexing? </li></ol>\n\n<p>Thanks and regards, \nArun. \nBrackets.io</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/118",
        "user": [
            "abose"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-06-15T12:55:00+02:00",
        "teasertext": "Hi, \n   Brackets is an open source editor and we are looking at improving the Find in Files search capabilities in brackets. I stumbled upon this repository which seems to be very good for our use case. The main purpose is to index all the files in a project and allow for more advanced search queries. I have the following queries about the functionality provided by this library- sorry if these questions seem introductory. \n\nWe have a list of open projects, can we switch the search index on the fly as projects are changed. Does the search engine watch the filesystem for changes and automatically update the index (or is the index based out of abstract documents). Does it have support for regex search? I see that there have been no releases since 2013, is it safe to run master branch? Can you give an info on the release cycles? Do you recommend this search library for desktop file indexing? \n\nThanks and regards, \nArun. \nBrackets.io",
        "tags": [
            "[question]",
            "indexing",
            "desktop",
            "file"
        ],
        "type": [
            "GitHub"
        ],
        "id": "lcgK7"
    },
    {
        "date": 1435072440000,
        "repository": "search-index",
        "title": "Function chaining",
        "text": "<p>It would be really cool if you could chain functions. </p>\n\n<p>Appending <code>close</code> function would be particularly useful</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/119",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-06-23T17:14:00+02:00",
        "teasertext": "It would be really cool if you could chain functions. \n\nAppending close function would be particularly useful",
        "tags": [
            "chaining",
            "function"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2Zpo8Z"
    },
    {
        "date": 1435298160000,
        "repository": "search-index",
        "title": "save index in disk?",
        "text": "<p>Am i wondering if once you loaded and indexed the content in memory would be possible to store this &quot;cache&quot; on disk, so next time the application opens it wouldn&#39;t need to load it all in memory straight away? </p>\n\n<p>I believe sqlite kinda does that with it&#39;s indexes? </p>\n\n<p>or... </p>\n\n<p>did i understand something wrong?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/120",
        "user": [
            "hems"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-06-26T07:56:00+02:00",
        "teasertext": "Am i wondering if once you loaded and indexed the content in memory would be possible to store this &quot;cache&quot; on disk, so next time the application opens it wouldn't need to load it all in memory straight away? \n\nI believe sqlite kinda does that with it's indexes? \n\nor... \n\ndid i understand something wrong?",
        "tags": [
            "save",
            "index",
            "disk"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1AEVKu"
    },
    {
        "date": 1435656240000,
        "repository": "norch",
        "title": "Check out mikeal/spider?",
        "text": "<p>Maybe we should check out the <a href=\"https://github.com/mikeal/spider\">spider</a> that @mikeal has created? It seems more mature and feature rich than <a href=\"https://github.com/fergiemcdowall/norch-fetch\">norch-fetch</a>. If working well, it could be nice to document how to make it work with <a href=\"https://github.com/fergiemcdowall/norch\">norch</a> / <a href=\"https://github.com/fergiemcdowall/search-index\">search-index</a> in a best possible way.</p>",
        "issuetype": "question",
        "url": "https://github.com/fergiemcdowall/norch/issues/95",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-06-30T11:24:00+02:00",
        "teasertext": "Maybe we should check out the spider that @mikeal has created? It seems more mature and feature rich than norch-fetch. If working well, it could be nice to document how to make it work with norch / search-index in a best possible way.",
        "tags": [
            "mikeal/spider",
            "check"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4gTSbK"
    },
    {
        "date": 1435866720000,
        "repository": "search-index",
        "title": "Generating of the teaser field a bit buggy",
        "text": "<p>I thing the teaser field is a bit buggy. I&#39;ve experienced over time that it every now and then returns content even if no match to search query. </p>\n\n<p>If you need a sample dataset in JSON, let me know. </p>\n\n<p><img alt=\"Check the last result item\" src=\"https://cloud.githubusercontent.com/assets/236656/8486385/85264bca-2104-11e5-9aa5-92201dc83557.png\"/></p>",
        "issuetype": "bug",
        "url": "https://github.com/fergiemcdowall/search-index/issues/122",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-07-02T21:52:00+02:00",
        "teasertext": "I thing the teaser field is a bit buggy. I've experienced over time that it every now and then returns content even if no match to search query. \n\nIf you need a sample dataset in JSON, let me know. \n\n",
        "tags": [
            "buggy",
            "teaser",
            "field",
            "bit"
        ],
        "type": [
            "GitHub"
        ],
        "id": "34ADwA"
    },
    {
        "date": 1436094060000,
        "repository": "search-index",
        "title": "Enhanced logging, and module instantiation",
        "text": "<p>Most modules now exports a function that accepts a options object; \n<code> module.exports = function (options) {} </code> \nThis allows for sharing child loggers from bunyan. \nModules other than search-index.js also uses <code>bunyan-shadower</code> so that we don&#39;t have to require a logger or alter the logging code.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/123",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": "fergiemcdowall",
        "datehuman": "2015-07-05T13:01:00+02:00",
        "teasertext": "Most modules now exports a function that accepts a options object; \n module.exports = function (options) {}  \nThis allows for sharing child loggers from bunyan. \nModules other than search-index.js also uses bunyan-shadower so that we don't have to require a logger or alter the logging code.",
        "tags": [
            "enhanced",
            "module",
            "instantiation",
            "logging"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4zOdEZ"
    },
    {
        "date": 1436200140000,
        "repository": "search-index",
        "title": "Lodashify indexer.js",
        "text": "<p>Cleaned up a bit in indexer.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/124",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": "fergiemcdowall",
        "datehuman": "2015-07-06T18:29:00+02:00",
        "teasertext": "Cleaned up a bit in indexer.",
        "tags": [
            "lodashify",
            "indexerjs"
        ],
        "type": [
            "GitHub"
        ],
        "id": "24M4SQ"
    },
    {
        "date": 1436266140000,
        "repository": "search-index",
        "title": "Indexing option for \"non-deletable\"",
        "text": "<p>An option to make a document non-deleteable </p>\n\n<p>This saves a significant amount of space in the index</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/125",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-07-07T12:49:00+02:00",
        "teasertext": "An option to make a document non-deleteable \n\nThis saves a significant amount of space in the index",
        "tags": [
            "indexing",
            "non-deletable",
            "option"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3c3muL"
    },
    {
        "date": 1436266320000,
        "repository": "search-index",
        "title": "Indexing option for field weighting",
        "text": "<p>Possibility to weight fields at indexing time. </p>\n\n<p>This allows fields to have different weights, without actually having to store an index for each field and then work out weighting score at query time</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/126",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-07-07T12:52:00+02:00",
        "teasertext": "Possibility to weight fields at indexing time. \n\nThis allows fields to have different weights, without actually having to store an index for each field and then work out weighting score at query time",
        "tags": [
            "option",
            "indexing",
            "field",
            "weighting"
        ],
        "type": [
            "GitHub"
        ],
        "id": "Uc9IJ"
    },
    {
        "date": 1436266500000,
        "repository": "search-index",
        "title": "Ability to replicate index deltas",
        "text": "<p>Some kind of versioning that enables you to only update the delta of an index. </p>\n\n<p>When replicating an index, this will allow you to only update the changed part of the index</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/127",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-07-07T12:55:00+02:00",
        "teasertext": "Some kind of versioning that enables you to only update the delta of an index. \n\nWhen replicating an index, this will allow you to only update the changed part of the index",
        "tags": [
            "ability",
            "replicate",
            "deltas",
            "index"
        ],
        "type": [
            "GitHub"
        ],
        "id": "6FQpg"
    },
    {
        "date": 1436344380000,
        "repository": "search-index",
        "title": "Indexing options for \"searchable\" per field",
        "text": "<p>Specify whether a field is searchable or not. There should probably also be some kind of global default</p>",
        "issuetype": "Feature",
        "url": "https://github.com/fergiemcdowall/search-index/issues/128",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-07-08T10:33:00+02:00",
        "teasertext": "Specify whether a field is searchable or not. There should probably also be some kind of global default",
        "tags": [
            "indexing",
            "options",
            "searchable",
            "field"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2K3pvm"
    },
    {
        "date": 1436361120000,
        "repository": "norch",
        "title": "Deprecated modules when npm install",
        "text": "<p>Typing <code>npm install norch</code>gives me a couple of warnings: </p>\n\n<p><code> \nroot@life-index-demo:~# npm install norch \nnpm WARN deprecated CSSselect@0.7.0: the module is now available as &#39;css-select&#39; \nnpm WARN deprecated CSSwhat@0.4.7: the module is now available as &#39;css-what&#39; \n</code> \nNeeds a little dependency update?</p>",
        "issuetype": "bug",
        "url": "https://github.com/fergiemcdowall/norch/issues/97",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-07-08T15:12:00+02:00",
        "teasertext": "Typing npm install norchgives me a couple of warnings: \n\n \nroot@life-index-demo:~# npm install norch \nnpm WARN deprecated CSSselect@0.7.0: the module is now available as 'css-select' \nnpm WARN deprecated CSSwhat@0.4.7: the module is now available as 'css-what' \n \nNeeds a little dependency update?",
        "tags": [
            "modules",
            "deprecated",
            "npm",
            "install"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2u5qL8"
    },
    {
        "date": 1436361480000,
        "repository": "norch",
        "title": "Explaining build essentials - You need \"make\"",
        "text": "<p>I know this doesn&#39;t fully fit in the norch documentation, but it won&#39;t fit in any node and npm setup either, since it&#39;s not required. On Ubuntu I need to do <code>sudo apt-get install build-essential</code> for the <code>npm install norch</code> to succeed.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch/issues/98",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-07-08T15:18:00+02:00",
        "teasertext": "I know this doesn't fully fit in the norch documentation, but it won't fit in any node and npm setup either, since it's not required. On Ubuntu I need to do sudo apt-get install build-essential for the npm install norch to succeed.",
        "tags": [
            "explaining",
            "build",
            "essentials",
            "make"
        ],
        "type": [
            "GitHub"
        ],
        "id": "fllYe"
    },
    {
        "date": 1436431740000,
        "repository": "search-index",
        "title": "TellMeAboutMySearchIndex should give info on all initialization parameters",
        "text": "<p>TellMeAboutMySearchIndex should give info on all initialization parameters</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/129",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-07-09T10:49:00+02:00",
        "teasertext": "TellMeAboutMySearchIndex should give info on all initialization parameters",
        "tags": [
            "give",
            "info",
            "initialization",
            "parameters"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3WrGSL"
    },
    {
        "date": 1436605380000,
        "repository": "search-index",
        "title": "Define which document fields to store",
        "text": "<p>Sometimes it might be useful to only store a title and a link to a document for example</p>",
        "issuetype": "Feature",
        "url": "https://github.com/fergiemcdowall/search-index/issues/130",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-07-11T11:03:00+02:00",
        "teasertext": "Sometimes it might be useful to only store a title and a link to a document for example",
        "tags": [
            "define",
            "fields",
            "document",
            "store"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3K0oSx"
    },
    {
        "date": 1436605500000,
        "repository": "search-index",
        "title": "Indexing option to set Ngram length per field",
        "text": "<p>ngram length should be settable per field</p>",
        "issuetype": "Feature",
        "url": "https://github.com/fergiemcdowall/search-index/issues/131",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-07-11T11:05:00+02:00",
        "teasertext": "ngram length should be settable per field",
        "tags": [
            "set",
            "ngram",
            "length",
            "field"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4EF5Kc"
    },
    {
        "date": 1436878920000,
        "repository": "search-index",
        "title": "Include browserified build in repo.",
        "text": "<p>I&#39;m not entirely sure this is necessary. </p>\n\n<p>But by pointing browserify to the build by including: </p>\n\n<p><code> \n&quot;browser&quot;: &quot;my-build.js&quot; \n</code> </p>\n\n<p>we allow search-index to be required from other modules that runs in the browser.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/search-index/issues/132",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-07-14T15:02:00+02:00",
        "teasertext": "I'm not entirely sure this is necessary. \n\nBut by pointing browserify to the build by including: \n\n \n&quot;browser&quot;: &quot;my-build.js&quot; \n \n\nwe allow search-index to be required from other modules that runs in the browser.",
        "tags": [
            "include",
            "browserified",
            "repo",
            "build"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1FPetK"
    },
    {
        "date": 1436962860000,
        "repository": "search-index",
        "title": "Make examples use browserified build of search-index",
        "text": "<p>As in the example applications in the examples folder</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/133",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-07-15T14:21:00+02:00",
        "teasertext": "As in the example applications in the examples folder",
        "tags": [
            "browserified",
            "build",
            "search-index",
            "examples"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3HFttR"
    },
    {
        "date": 1437040980000,
        "repository": "search-index",
        "title": "Change in deps. and better logging and test for logging",
        "text": null,
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/search-index/pull/134",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": "mewwts",
        "datehuman": "2015-07-16T12:03:00+02:00",
        "teasertext": "null",
        "tags": [
            "change",
            "deps",
            "logging",
            "test",
            "logging"
        ],
        "type": [
            "GitHub"
        ],
        "id": "41gT19"
    },
    {
        "date": 1437060960000,
        "repository": "life-index-angular-app",
        "title": "Life-index specific documentation",
        "text": "<p>Add some Life-index documentation, and remove (just link to) the norch-angular-app documentation.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-index-angular-app/issues/1",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-07-16T17:36:00+02:00",
        "teasertext": "Add some Life-index documentation, and remove (just link to) the norch-angular-app documentation.",
        "tags": [
            "life-index",
            "specific",
            "documentation"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2KKYkk"
    },
    {
        "date": 1437061260000,
        "repository": "life-index-angular-app",
        "title": "Add PSY as dependency and document best practice for keep-alive and indexing",
        "text": "<p>Check out how to best use <code>psy</code> for <code>life-index-angular-app</code> and document what&#39;s best practice. Nice way to both have keep-alive and indexing working.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/life-index-angular-app/issues/2",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-07-16T17:41:00+02:00",
        "teasertext": "Check out how to best use psy for life-index-angular-app and document what's best practice. Nice way to both have keep-alive and indexing working.",
        "tags": [
            "psy",
            "document",
            "keep-alive",
            "indexing"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1Em1kT"
    },
    {
        "date": 1437118620000,
        "repository": "search-index",
        "title": "Testing search-index in the browser.",
        "text": "<p>See #132</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/136",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-07-17T09:37:00+02:00",
        "teasertext": "See #132",
        "tags": [
            "testing",
            "search-index",
            "browser"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3pY22i"
    },
    {
        "date": 1438577340000,
        "repository": "search-index",
        "title": "Indexing the same corpus twice will triple the storage",
        "text": "<p>I also tried to delete the doc before adding it back, but still getting the index file bigger and bigger. The search is working fine though, it&#39;s not returning duplicated entries, as I have manually assign the same doc IDs to those entries. </p>\n\n<p>Is that working as intended? In my case, I do quite a lot doc update, so I&#39;d have a cronjob updating the indices hourly/daily. How can I make sure it&#39;ll not quickly blow up the disk?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/139",
        "user": [
            "lannka"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-03T06:49:00+02:00",
        "teasertext": "I also tried to delete the doc before adding it back, but still getting the index file bigger and bigger. The search is working fine though, it's not returning duplicated entries, as I have manually assign the same doc IDs to those entries. \n\nIs that working as intended? In my case, I do quite a lot doc update, so I'd have a cronjob updating the indices hourly/daily. How can I make sure it'll not quickly blow up the disk?",
        "tags": [
            "indexing",
            "corpus",
            "triple",
            "storage"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2agqDB"
    },
    {
        "date": 1438610280000,
        "repository": "search-index",
        "title": "Update add.md",
        "text": "<p>Fixed Typos</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/141",
        "user": [
            "ehimah"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-03T15:58:00+02:00",
        "teasertext": "Fixed Typos",
        "tags": [
            "update",
            "addmd"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3s6duk"
    },
    {
        "date": 1438785780000,
        "repository": "search-index",
        "title": "Pre-requisite(s) exist but aren't mentioned in README",
        "text": "<p>I am new to this project, but it appears that underscore is pre-requisite to this tool. I didn&#39;t know until after I tried running it. Should pre-requisites be mentioned in the README?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/142",
        "user": [
            "bean5"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-05T16:43:00+02:00",
        "teasertext": "I am new to this project, but it appears that underscore is pre-requisite to this tool. I didn't know until after I tried running it. Should pre-requisites be mentioned in the README?",
        "tags": [
            "exist",
            "readme",
            "pre-requisites",
            "mentioned"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1T1282"
    },
    {
        "date": 1438940040000,
        "repository": "search-index",
        "title": "Little bit of highland to start with",
        "text": null,
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/145",
        "user": [
            "cshum"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-07T11:34:00+02:00",
        "teasertext": "null",
        "tags": [
            "bit",
            "highland",
            "start"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1yQBDj"
    },
    {
        "date": 1438957500000,
        "repository": "search-index",
        "title": "Transactional deleteBatch",
        "text": "<p>Added highland stuff for deleteBatch, and uses <a href=\"https://github.com/cshum/level-transactions\">level-transactions</a>, the deleteBatch operation becomes atomic (committed or no write at all). </p>\n\n<p>level-transactions also ensures sequential operations within the transaction, even they are asynchronous. Hence omit the needs of most callback functions</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/146",
        "user": [
            "cshum"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-07T16:25:00+02:00",
        "teasertext": "Added highland stuff for deleteBatch, and uses level-transactions, the deleteBatch operation becomes atomic (committed or no write at all). \n\nlevel-transactions also ensures sequential operations within the transaction, even they are asynchronous. Hence omit the needs of most callback functions",
        "tags": [
            "transactional",
            "deletebatch"
        ],
        "type": [
            "GitHub"
        ],
        "id": "wrsK6"
    },
    {
        "date": 1439321460000,
        "repository": "search-index",
        "title": "result highlighting",
        "text": "<p>It would be useful if search-index exposed an interface for highlighting search results. This is best done inside the search library because the search library knows which terms really match, including ngrams, stops, fields, etc. </p>\n\n<p>Different applications will want to highlight in different ways. The interface would probably take a query, options, and a callback function. Options might include limiting highlighting to a maximum size or duration, for acceptable performance on large documents. The callback would receive an object that describes the matches found: maybe structured something like <code>{fieldName: matchingTerm: [run1, run2, ...]}}</code>.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/147",
        "user": [
            "mblakele"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-11T21:31:00+02:00",
        "teasertext": "It would be useful if search-index exposed an interface for highlighting search results. This is best done inside the search library because the search library knows which terms really match, including ngrams, stops, fields, etc. \n\nDifferent applications will want to highlight in different ways. The interface would probably take a query, options, and a callback function. Options might include limiting highlighting to a maximum size or duration, for acceptable performance on large documents. The callback would receive an object that describes the matches found: maybe structured something like {fieldName: matchingTerm: [run1, run2, ...]}}.",
        "tags": [
            "result",
            "highlighting"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1cAmz4"
    },
    {
        "date": 1439466180000,
        "repository": "search-index",
        "title": "[question] matcher",
        "text": "<p>At first: I like  your api because it is very handy and very useful.  :+1:  </p>\n\n<p>I have a question: I don&#39;t understand the behaviour  of search-index: </p>\n\n<p><code> javascript \noptions.fieldOptions = [ \n            {fieldName: &#39;title&#39;, fieldedSearch: true}, \n            {fieldName: &#39;body&#39;, fieldedSearch: true}, \n            {fieldName: &#39;spineItemPath&#39;, fieldedSearch: false}, \n            ... \n] \n</code> \nI have set <code> {fieldName: &#39;spineItemPath&#39;, fieldedSearch: false}</code> because I do not want to get suggestions from the matcher. It not only finds texts but also meta data like value of field  <code>spineItemPath</code>. How can I switch it off? </p>\n\n<p>Thanks!</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/148",
        "user": [
            "larsvoigt"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-13T13:43:00+02:00",
        "teasertext": "At first: I like  your api because it is very handy and very useful.  :+1:  \n\nI have a question: I don't understand the behaviour  of search-index: \n\n javascript \noptions.fieldOptions = [ \n            {fieldName: 'title', fieldedSearch: true}, \n            {fieldName: 'body', fieldedSearch: true}, \n            {fieldName: 'spineItemPath', fieldedSearch: false}, \n            ... \n] \n \nI have set  {fieldName: 'spineItemPath', fieldedSearch: false} because I do not want to get suggestions from the matcher. It not only finds texts but also meta data like value of field  spineItemPath. How can I switch it off? \n\nThanks!",
        "tags": [
            "[question]",
            "matcher"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1MoIiw"
    },
    {
        "date": 1439659620000,
        "repository": "search-index",
        "title": "Add iojs for tests at travis.",
        "text": null,
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/149",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-15T19:27:00+02:00",
        "teasertext": "null",
        "tags": [
            "add",
            "iojs",
            "tests",
            "travis"
        ],
        "type": [
            "GitHub"
        ],
        "id": "20V7CC"
    },
    {
        "date": 1439674320000,
        "repository": "search-index",
        "title": "Matcher doesn't work in languages that use Unicode.",
        "text": "<p>The root cause is in matcher.js: \n    H(reverseIndex.createReadStream({ \n      start: &#39;TF~<em>~&#39; + beginsWith, \n      end: &#39;TF~</em>~&#39; + beginsWith + &#39;~~~&#39; \n    })) </p>\n\n<p>The above selector would basically only select prefix of pure ASCII strings. Since all Unicode are behind &#39;~&#39;. After changing &#39;~&#39; to the &#39;&#39;􏿿&quot; (U+10FFFF, the last UTF8), it worked for Chinese characters.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/150",
        "user": [
            "lannka"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-15T23:32:00+02:00",
        "teasertext": "The root cause is in matcher.js: \n    H(reverseIndex.createReadStream({ \n      start: 'TF~~' + beginsWith, \n      end: 'TF~~' + beginsWith + '~~~' \n    })) \n\nThe above selector would basically only select prefix of pure ASCII strings. Since all Unicode are behind '~'. After changing '~' to the ''􏿿&quot; (U+10FFFF, the last UTF8), it worked for Chinese characters.",
        "tags": [
            "matcher",
            "work",
            "languages",
            "unicode"
        ],
        "type": [
            "GitHub"
        ],
        "id": "WtVyz"
    },
    {
        "date": 1439680800000,
        "repository": "search-index",
        "title": "Fix the matcher for Unicode prefix matching.",
        "text": "<p>Output of the test case: </p>\n\n<p>16:18:26$ ./node_modules/.bin/mocha test/general-tests/matching-test.js \n  Matching epub: \n    ✓ should index test data into the index (428ms) \n[ &#39;epub&#39;, &#39;epubtastic&#39; ] \n    ✓ should search on all fields and get results \n[ &#39;中文的字符&#39;, &#39;中文的标题&#39; ] \n    ✓ should work for Unicode \n    ✓ handles match strings that are below threshold </p>\n\n<p>  4 passing (447ms)</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/151",
        "user": [
            "lannka"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-16T01:20:00+02:00",
        "teasertext": "Output of the test case: \n\n16:18:26$ ./node_modules/.bin/mocha test/general-tests/matching-test.js \n  Matching epub: \n    ✓ should index test data into the index (428ms) \n[ 'epub', 'epubtastic' ] \n    ✓ should search on all fields and get results \n[ '中文的字符', '中文的标题' ] \n    ✓ should work for Unicode \n    ✓ handles match strings that are below threshold \n\n  4 passing (447ms)",
        "tags": [
            "fix",
            "matcher",
            "unicode",
            "prefix",
            "matching"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1cLk3h"
    },
    {
        "date": 1439749740000,
        "repository": "search-index",
        "title": "Remove match string length validation. Clients should do their own va…",
        "text": "<p>…lidation, instead of replying on search-index to do so.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/152",
        "user": [
            "lannka"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-16T20:29:00+02:00",
        "teasertext": "…lidation, instead of replying on search-index to do so.",
        "tags": [
            "remove",
            "match",
            "string",
            "length",
            "validation",
            "clients",
            "va…"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1EGZNE"
    },
    {
        "date": 1439754720000,
        "repository": "search-index",
        "title": "How can I mark my doc ID field unsearchable?",
        "text": "<p>By default, the ID field is searchable. How can I turn it off? Otherwise the matcher will return those internal doc IDs to end users. </p>\n\n<p>I tried using the opt below, but it throws an exception. Seems the code treats &quot;id&quot; field differently than the others. </p>\n\n<p>var opt = { \n  fieldOptions: [{ \n    fieldName: &#39;id&#39;, \n    searchable: false \n  }] \n};</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/153",
        "user": [
            "lannka"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-16T21:52:00+02:00",
        "teasertext": "By default, the ID field is searchable. How can I turn it off? Otherwise the matcher will return those internal doc IDs to end users. \n\nI tried using the opt below, but it throws an exception. Seems the code treats &quot;id&quot; field differently than the others. \n\nvar opt = { \n  fieldOptions: [{ \n    fieldName: 'id', \n    searchable: false \n  }] \n};",
        "tags": [
            "id",
            "unsearchable",
            "doc",
            "field"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4uCtfy"
    },
    {
        "date": 1439760660000,
        "repository": "search-index",
        "title": "Add a test case for unsearchable doc ID.",
        "text": null,
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/154",
        "user": [
            "lannka"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-16T23:31:00+02:00",
        "teasertext": "null",
        "tags": [
            "add",
            "test",
            "case",
            "unsearchable",
            "doc",
            "id"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1kx8xB"
    },
    {
        "date": 1439820840000,
        "repository": "search-index",
        "title": "Extend test case",
        "text": "<p>Added new test case which fails.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/155",
        "user": [
            "larsvoigt"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-17T16:14:00+02:00",
        "teasertext": "Added new test case which fails.",
        "tags": [
            "extend",
            "test",
            "case"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1XPPcf"
    },
    {
        "date": 1440101640000,
        "repository": "search-index",
        "title": "so not really sure what I am doing wrong here",
        "text": null,
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/156",
        "user": [
            "leerlemoniii"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-20T22:14:00+02:00",
        "teasertext": "null",
        "tags": [
            "wrong"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3i7ZOV"
    },
    {
        "date": 1440103440000,
        "repository": "search-index",
        "title": "API Documentation typo",
        "text": "<p>(inner) add Adds a document to the index(batch, batchOptionsopt, callback) </p>\n\n<p>think this should be<br/>(inner) add Adds a document to the index(batchOptionsopt, batch, callback)</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/157",
        "user": [
            "leerlemoniii"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-20T22:44:00+02:00",
        "teasertext": "(inner) add Adds a document to the index(batch, batchOptionsopt, callback) \n\nthink this should be(inner) add Adds a document to the index(batchOptionsopt, batch, callback)",
        "tags": [
            "api",
            "documentation",
            "typo"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1lYKyu"
    },
    {
        "date": 1440134520000,
        "repository": "search-index",
        "title": "Fix the exception when marking ID field as unsearchable.",
        "text": null,
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/158",
        "user": [
            "lannka"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-21T07:22:00+02:00",
        "teasertext": "null",
        "tags": [
            "fix",
            "exception",
            "marking",
            "id",
            "field",
            "unsearchable"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3EfBAG"
    },
    {
        "date": 1440143040000,
        "repository": "norch",
        "title": "\"Try it now\" Heroku button",
        "text": "<p><a href=\"https://github.com/beeman/loopback-angular-admin\">as seen here</a>: \n<img alt=\"tryitnow\" src=\"https://cloud.githubusercontent.com/assets/1122333/9403628/0cde940e-47e9-11e5-9949-89f8819534ad.png\"/></p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/99",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-21T09:44:00+02:00",
        "teasertext": "as seen here: \n",
        "tags": [
            "heroku",
            "button"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4CMo7L"
    },
    {
        "date": 1440331860000,
        "repository": "search-index",
        "title": "logging in calibrater.js doesnt seem to be working",
        "text": "<p>Logging in calibrater.js doesnt seem to work. This seems to be related to the <code>skeleton</code> approach. Any ideas @mewwts ? (We should also set up some tests)</p>",
        "issuetype": "bug",
        "url": "https://github.com/fergiemcdowall/search-index/issues/159",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-23T14:11:00+02:00",
        "teasertext": "Logging in calibrater.js doesnt seem to work. This seems to be related to the skeleton approach. Any ideas @mewwts ? (We should also set up some tests)",
        "tags": [
            "logging",
            "calibraterjs",
            "working",
            "doesnt"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4yHQo1"
    },
    {
        "date": 1440353640000,
        "repository": "search-index",
        "title": "Fix #159 by bumping log-skeleton",
        "text": null,
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/160",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-23T20:14:00+02:00",
        "teasertext": "null",
        "tags": [
            "fix",
            "#159",
            "bumping",
            "log-skeleton"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4Eu6jP"
    },
    {
        "date": 1440356760000,
        "repository": "search-index",
        "title": "Can I connect it directly to mongo database?",
        "text": null,
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/161",
        "user": [
            "AlexanderKozhevin"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-23T21:06:00+02:00",
        "teasertext": "null",
        "tags": [
            "connect",
            "directly",
            "mongo",
            "database"
        ],
        "type": [
            "GitHub"
        ],
        "id": "45zM4R"
    },
    {
        "date": 1440402840000,
        "repository": "search-index",
        "title": "Add iojs for tests.",
        "text": "<p>Trying again.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/162",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-24T09:54:00+02:00",
        "teasertext": "Trying again.",
        "tags": [
            "add",
            "iojs",
            "tests"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2phj3P"
    },
    {
        "date": 1440442980000,
        "repository": "search-index",
        "title": "running 2 node services on for search and one for index",
        "text": "<p>I am trying to create a couchdb change feed search config.... Have the index working great, and the search running great, but can not run both at the same time because of leveldb database locks staying open.   </p>\n\n<p>Is there a way to close those locks when the service is sitting in wait mode? or ???</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/163",
        "user": [
            "leerlemoniii"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-24T21:03:00+02:00",
        "teasertext": "I am trying to create a couchdb change feed search config.... Have the index working great, and the search running great, but can not run both at the same time because of leveldb database locks staying open.   \n\nIs there a way to close those locks when the service is sitting in wait mode? or ???",
        "tags": [
            "services",
            "running",
            "index",
            "search"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2gL1xs"
    },
    {
        "date": 1440572340000,
        "repository": "norch",
        "title": "Make better docs",
        "text": "<p>Docs should be shorter and better</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/100",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-26T08:59:00+02:00",
        "teasertext": "Docs should be shorter and better",
        "tags": [
            "make",
            "docs"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2QCkxR"
    },
    {
        "date": 1440617520000,
        "repository": "search-index",
        "title": "TypeError: Cannot read property 'filter' of undefined",
        "text": "<p>I see this error intermittently with 0.6.3 and 0.6.6. I think it&#39;s related to node restarting while indexing is in progress. I have a callback on my calls to <code>search-index.add</code>, but when this error appears the callback isn&#39;t called. </p>\n\n<p>Workaround: I&#39;ve added hooks to my code to call <code>search-index.close</code> on <code>[&#39;SIGINT&#39;, &#39;SIGHUP&#39;, &#39;SIGTERM&#39;, &#39;SIGQUIT&#39;]</code>. However I still seem to see this error occasionally even with graceful shutdown. </p>\n\n<p><code> \nTypeError: Cannot read property &#39;filter&#39; of undefined \n    at Transaction.&lt;anonymous&gt; (/Users/mblakele/Source/fubar/node_modules/search-index/lib/indexing/deleter.js:51:29) \n    at next (/Users/mblakele/Source/fubar/node_modules/search-index/node_modules/level-transactions/node_modules/ginga/index.js:122:24) \n    at /Users/mblakele/Source/fubar/node_modules/search-index/node_modules/level-transactions/index.js:125:5 \n    at dispatchError (/Users/mblakele/Source/fubar/node_modules/search-index/node_modules/levelup/lib/util.js:64:35) \n    at /Users/mblakele/Source/fubar/node_modules/search-index/node_modules/levelup/lib/levelup.js:222:14 \n</code></p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/164",
        "user": [
            "mblakele"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-26T21:32:00+02:00",
        "teasertext": "I see this error intermittently with 0.6.3 and 0.6.6. I think it's related to node restarting while indexing is in progress. I have a callback on my calls to search-index.add, but when this error appears the callback isn't called. \n\nWorkaround: I've added hooks to my code to call search-index.close on ['SIGINT', 'SIGHUP', 'SIGTERM', 'SIGQUIT']. However I still seem to see this error occasionally even with graceful shutdown. \n\n \nTypeError: Cannot read property 'filter' of undefined \n    at Transaction.&lt;anonymous&gt; (/Users/mblakele/Source/fubar/node_modules/search-index/lib/indexing/deleter.js:51:29) \n    at next (/Users/mblakele/Source/fubar/node_modules/search-index/node_modules/level-transactions/node_modules/ginga/index.js:122:24) \n    at /Users/mblakele/Source/fubar/node_modules/search-index/node_modules/level-transactions/index.js:125:5 \n    at dispatchError (/Users/mblakele/Source/fubar/node_modules/search-index/node_modules/levelup/lib/util.js:64:35) \n    at /Users/mblakele/Source/fubar/node_modules/search-index/node_modules/levelup/lib/levelup.js:222:14 \n",
        "tags": [
            "filter",
            "read",
            "property",
            "undefined"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4vQ15M"
    },
    {
        "date": 1440656040000,
        "repository": "search-index",
        "title": "Fix line that browserify didn't like.",
        "text": null,
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/165",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-27T08:14:00+02:00",
        "teasertext": "null",
        "tags": [
            "fix",
            "line",
            "browserify"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1y3oPJ"
    },
    {
        "date": 1440656940000,
        "repository": "search-index",
        "title": "Examples are now working with new directory structure.",
        "text": null,
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/166",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": "mewwts",
        "datehuman": "2015-08-27T08:29:00+02:00",
        "teasertext": "null",
        "tags": [
            "examples",
            "working",
            "directory",
            "structure"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3DSXdW"
    },
    {
        "date": 1440741060000,
        "repository": "search-index",
        "title": "Browser, examples and change in package.json",
        "text": "<p>The change in <code>package.json</code> is OK. All the other examples run without it, but you can&#39;t switch out level-js when it is present. I think it is better this way. The example makes search-index&#39;s index run in local-storage.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/167",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": "fergiemcdowall",
        "datehuman": "2015-08-28T07:51:00+02:00",
        "teasertext": "The change in package.json is OK. All the other examples run without it, but you can't switch out level-js when it is present. I think it is better this way. The example makes search-index's index run in local-storage.",
        "tags": [
            "browser",
            "packagejson",
            "examples",
            "change"
        ],
        "type": [
            "GitHub"
        ],
        "id": "GCEjU"
    },
    {
        "date": 1440751260000,
        "repository": "norch",
        "title": "Make test coverage for every startup option",
        "text": "<p>Every startup option in Norch should be testable. Stuff like CORS (-c). Make tests available for these options</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/norch/issues/101",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-28T10:41:00+02:00",
        "teasertext": "Every startup option in Norch should be testable. Stuff like CORS (-c). Make tests available for these options",
        "tags": [
            "test",
            "coverage",
            "startup",
            "option"
        ],
        "type": [
            "GitHub"
        ],
        "id": "Wlmwc"
    },
    {
        "date": 1440889320000,
        "repository": "search-index",
        "title": "Search breaks on 'some' keyword",
        "text": "<p>To elaborate, if the query object only provides the term &#39;some&#39;, it becomes empty. </p>\n\n<p>To reproduce: </p>\n\n<pre><code>si.add({ batchName: &#39;testBatch&#39; }, [{ id: 1234, &#39;name&#39;: &quot;some title&quot; }]) </code></pre>\n\n<p>Query that breaks: </p>\n\n<pre><code>var query =  \n{  \n &quot;query&quot;: {  \n   &#39;*&#39;: [&#39;some&#39;]  \n } \n} </code></pre>\n\n<p>Failed Result: </p>\n\n<pre><code>{ query: { &#39;*&#39;: [ &#39;&#39; ] }, \n  hits: [], \n  totalHits: 0, \n  facets: undefined } \ntotal hits: 0 </code></pre>\n\n<p>Success result for &#39;title&#39; </p>\n\n<pre><code>{ totalHits: 1, \n  query:  \n   { query: { &#39;*&#39;: [ &#39;title&#39; ] }, \n     maxFacetLimit: 100, \n     offset: 0, \n     pageSize: 100 }, \n  facets: {}, \n  facetRanges: undefined, \n  hits:  \n   [ { id: &#39;1234&#39;, \n       relevance: [Object], \n       score: 10.5, \n       document: [Object] } ] }</code></pre>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/168",
        "user": [
            "bugs181"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-30T01:02:00+02:00",
        "teasertext": "To elaborate, if the query object only provides the term 'some', it becomes empty. \n\nTo reproduce: \n\nsi.add({ batchName: 'testBatch' }, [{ id: 1234, 'name': &quot;some title&quot; }]) \n\nQuery that breaks: \n\nvar query =  \n{  \n &quot;query&quot;: {  \n   '*': ['some']  \n } \n} \n\nFailed Result: \n\n{ query: { '*': [ '' ] }, \n  hits: [], \n  totalHits: 0, \n  facets: undefined } \ntotal hits: 0 \n\nSuccess result for 'title' \n\n{ totalHits: 1, \n  query:  \n   { query: { '*': [ 'title' ] }, \n     maxFacetLimit: 100, \n     offset: 0, \n     pageSize: 100 }, \n  facets: {}, \n  facetRanges: undefined, \n  hits:  \n   [ { id: '1234', \n       relevance: [Object], \n       score: 10.5, \n       document: [Object] } ] }",
        "tags": [
            "search",
            "breaks",
            "keyword"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1DSxzX"
    },
    {
        "date": 1441018860000,
        "repository": "search-index",
        "title": "Geohashing demo",
        "text": "<p>Make a demo with Geohashes: https://en.wikipedia.org/wiki/Geohash</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/169",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-31T13:01:00+02:00",
        "teasertext": "Make a demo with Geohashes: https://en.wikipedia.org/wiki/Geohash",
        "tags": [
            "geohashing",
            "demo"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4yWiPa"
    },
    {
        "date": 1441028400000,
        "repository": "norch",
        "title": "Accept batches as streams",
        "text": "<p>There should be a way to start indexing before an entire batch is loaded by using streams</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/102",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-31T15:40:00+02:00",
        "teasertext": "There should be a way to start indexing before an entire batch is loaded by using streams",
        "tags": [
            "accept",
            "batches",
            "streams"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3mkgc7"
    },
    {
        "date": 1441028460000,
        "repository": "norch",
        "title": "Emit events as documents are indexed",
        "text": "<p>It would be good to see the progress of indexing from the HTTP client. Implement this.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/norch/issues/103",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-08-31T15:41:00+02:00",
        "teasertext": "It would be good to see the progress of indexing from the HTTP client. Implement this.",
        "tags": [
            "emit",
            "events",
            "documents",
            "indexed"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4hyKMW"
    },
    {
        "date": 1441097100000,
        "repository": "search-index",
        "title": "Changed add function to be a bit more flexible",
        "text": "<p><code>si.add</code> can now be called without options object.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/170",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": "mewwts",
        "datehuman": "2015-09-01T10:45:00+02:00",
        "teasertext": "si.add can now be called without options object.",
        "tags": [
            "changed",
            "add",
            "function",
            "bit",
            "flexible"
        ],
        "type": [
            "GitHub"
        ],
        "id": "JBGSB"
    },
    {
        "date": 1441097460000,
        "repository": "search-index",
        "title": "Shamelessly added myself to maintainers + Removing lint and doc from test.",
        "text": "<p>With this merged one should run <code>npm all</code> if you wanted the whole lint, doc and test-stuff. <code>npm test</code> just tests. It became a bit annoying tbh.</p>",
        "issuetype": "discussion",
        "url": "https://github.com/fergiemcdowall/search-index/pull/171",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-01T10:51:00+02:00",
        "teasertext": "With this merged one should run npm all if you wanted the whole lint, doc and test-stuff. npm test just tests. It became a bit annoying tbh.",
        "tags": [
            "removing",
            "lint",
            "doc",
            "test"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4zYmJm"
    },
    {
        "date": 1441192200000,
        "repository": "eklem-headline-parser",
        "title": "Chain language files",
        "text": "<p>Make it possible to make a superset of language files, using i.e. Norwegian and English stop words.</p>",
        "issuetype": null,
        "url": "https://github.com/eklem/eklem-headline-parser/issues/1",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-02T13:10:00+02:00",
        "teasertext": "Make it possible to make a superset of language files, using i.e. Norwegian and English stop words.",
        "tags": [
            "chain",
            "files",
            "language"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2ENuNU"
    },
    {
        "date": 1441192920000,
        "repository": "search-index",
        "title": "Browserify-example with replicating needs JSON content installed",
        "text": "<p>Testing the browserify-example <a href=\"https://github.com/fergiemcdowall/search-index/tree/master/doc/examples/browserify-replicate-full-index-to-browser\">browserify-replicate-full-index-to-browser</a> </p>\n\n<p>The indexgenerator.js, I&#39;m guessing, fails because of missing <a href=\"https://github.com/fergiemcdowall/reuters-21578-json\">reuters-21578-json</a>. Should be added as prerequisit? \n<code> \nEspens-MacBook-Pro:browserify-test eklem$ node indexgenerator.js \nmodule.js:338 \n    throw err; \n          ^ \nError: Cannot find module &#39;../../../node_modules/reuters-21578-json/data/justTen/justTen.json&#39; \n    at Function.Module._resolveFilename (module.js:336:15) \n    at Function.Module._load (module.js:278:25) \n    at Module.require (module.js:365:17) \n    at require (module.js:384:17) \n    at Object.&lt;anonymous&gt; (/Users/eklem/node_modules/search-index/doc/examples/browserify-test/indexgenerator.js:1:77) \n    at Module._compile (module.js:460:26) \n    at Object.Module._extensions..js (module.js:478:10) \n    at Module.load (module.js:355:32) \n    at Function.Module._load (module.js:310:12) \n    at Function.Module.runMain (module.js:501:10) \n</code></p>",
        "issuetype": "bug,documentation",
        "url": "https://github.com/fergiemcdowall/search-index/issues/172",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-02T13:22:00+02:00",
        "teasertext": "Testing the browserify-example browserify-replicate-full-index-to-browser \n\nThe indexgenerator.js, I'm guessing, fails because of missing reuters-21578-json. Should be added as prerequisit? \n \nEspens-MacBook-Pro:browserify-test eklem$ node indexgenerator.js \nmodule.js:338 \n    throw err; \n          ^ \nError: Cannot find module '../../../node_modules/reuters-21578-json/data/justTen/justTen.json' \n    at Function.Module._resolveFilename (module.js:336:15) \n    at Function.Module._load (module.js:278:25) \n    at Module.require (module.js:365:17) \n    at require (module.js:384:17) \n    at Object.&lt;anonymous&gt; (/Users/eklem/node_modules/search-index/doc/examples/browserify-test/indexgenerator.js:1:77) \n    at Module._compile (module.js:460:26) \n    at Object.Module._extensions..js (module.js:478:10) \n    at Module.load (module.js:355:32) \n    at Function.Module._load (module.js:310:12) \n    at Function.Module.runMain (module.js:501:10) \n",
        "tags": [
            "json",
            "content",
            "installed",
            "browserify-example"
        ],
        "type": [
            "GitHub"
        ],
        "id": "43i1p"
    },
    {
        "date": 1441193460000,
        "repository": "search-index",
        "title": "Wrong path to reuters-21578-json",
        "text": "<p>Needs an additional \n<code> \n../../ \n</code></p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/173",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-02T13:31:00+02:00",
        "teasertext": "Needs an additional \n \n../../ \n",
        "tags": [
            "wrong",
            "path",
            "reuters-21578-json"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1olpVD"
    },
    {
        "date": 1441195320000,
        "repository": "search-index",
        "title": "Browserify-example replicating index  fails on brfs",
        "text": "<p><a href=\"https://github.com/fergiemcdowall/search-index/tree/master/doc/examples/browserify-replicate-full-index-to-browser\">browserify-replicate-full-index-to-browser</a> needs to have <code>brfs</code> installed, in addition to browserify. I&#39;ve checked that I&#39;ve got it installed, but still I get this error message: </p>\n\n<p><code> \neklem$ browserify -t brfs main.js &gt; bundle.js \nError: Cannot find module &#39;brfs&#39; from &#39;/Users/eklem/node_modules/search-index/doc/examples/browserify-test&#39; \n    at /usr/local/lib/node_modules/browserify/node_modules/resolve/lib/async.js:46:17 \n    at process (/usr/local/lib/node_modules/browserify/node_modules/resolve/lib/async.js:173:43) \n    at ondir (/usr/local/lib/node_modules/browserify/node_modules/resolve/lib/async.js:188:17) \n    at load (/usr/local/lib/node_modules/browserify/node_modules/resolve/lib/async.js:69:43) \n    at onex (/usr/local/lib/node_modules/browserify/node_modules/resolve/lib/async.js:92:31) \n    at /usr/local/lib/node_modules/browserify/node_modules/resolve/lib/async.js:22:47 \n    at FSReqWrap.oncomplete (fs.js:95:15) \n</code></p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/174",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-02T14:02:00+02:00",
        "teasertext": "browserify-replicate-full-index-to-browser needs to have brfs installed, in addition to browserify. I've checked that I've got it installed, but still I get this error message: \n\n \neklem$ browserify -t brfs main.js &gt; bundle.js \nError: Cannot find module 'brfs' from '/Users/eklem/node_modules/search-index/doc/examples/browserify-test' \n    at /usr/local/lib/node_modules/browserify/node_modules/resolve/lib/async.js:46:17 \n    at process (/usr/local/lib/node_modules/browserify/node_modules/resolve/lib/async.js:173:43) \n    at ondir (/usr/local/lib/node_modules/browserify/node_modules/resolve/lib/async.js:188:17) \n    at load (/usr/local/lib/node_modules/browserify/node_modules/resolve/lib/async.js:69:43) \n    at onex (/usr/local/lib/node_modules/browserify/node_modules/resolve/lib/async.js:92:31) \n    at /usr/local/lib/node_modules/browserify/node_modules/resolve/lib/async.js:22:47 \n    at FSReqWrap.oncomplete (fs.js:95:15) \n",
        "tags": [
            "replicating",
            "index",
            "fails",
            "brfs"
        ],
        "type": [
            "GitHub"
        ],
        "id": "wLoty"
    },
    {
        "date": 1441196400000,
        "repository": "search-index",
        "title": "Empty backup.gz on running indexgenerator",
        "text": "<p>I get an empty backup.gz (just the header line) when running <a href=\"https://github.com/fergiemcdowall/search-index/blob/master/doc/examples/browserify-replicate-full-index-to-browser/indexgenerator.js\">indexgenerator</a>. My guess it&#39;s the changed si.add API that&#39;s causing some problems.</p>",
        "issuetype": "bug",
        "url": "https://github.com/fergiemcdowall/search-index/issues/175",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-02T14:20:00+02:00",
        "teasertext": "I get an empty backup.gz (just the header line) when running indexgenerator. My guess it's the changed si.add API that's causing some problems.",
        "tags": [
            "backupgz",
            "indexgenerator",
            "empty",
            "running"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2LFN1l"
    },
    {
        "date": 1441224360000,
        "repository": "search-index",
        "title": "Bump bunyan to 1.4.0 to support electron",
        "text": "<p>Version 1.3.5 of bunyan was using an old version of dtrace-provider which was being compiled with an older version of Nan which broke using this package in electron (and maybe even iojs). This bump of bunyan fixes the whole dependency chain which should allow search index to be built and used in electron.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/176",
        "user": [
            "johnhaley81"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-02T22:06:00+02:00",
        "teasertext": "Version 1.3.5 of bunyan was using an old version of dtrace-provider which was being compiled with an older version of Nan which broke using this package in electron (and maybe even iojs). This bump of bunyan fixes the whole dependency chain which should allow search index to be built and used in electron.",
        "tags": [
            "support",
            "bump",
            "electron",
            "bunyan"
        ],
        "type": [
            "GitHub"
        ],
        "id": "oOcdz"
    },
    {
        "date": 1441559940000,
        "repository": "search-index",
        "title": "License.",
        "text": "<p>Where did the license info go?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/177",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": "fergiemcdowall",
        "datehuman": "2015-09-06T19:19:00+02:00",
        "teasertext": "Where did the license info go?",
        "tags": [
            "license"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3nyn0I"
    },
    {
        "date": 1441816440000,
        "repository": "search-index",
        "title": "Suggestion for indexing a website",
        "text": "<p>I&#39;m doing the indexing of my website with <code>simplecrawler</code>. Which would be your suggested way to <em>update</em> the index after first indexing occurs? </p>\n\n<p>I mean, should i maintain the documents? There is some way to <em>update</em> those, or simply would it delete and re-add with the refreshed webpages data? </p>\n\n<p>The other option i can think of, is building a new index on an alternative directory, and after it finishes, replace the previous one (so i dont have lo leave the website without search capability at all while crawling it) </p>\n\n<p>Btw, great and useful project!</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/178",
        "user": [
            "jacargentina"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-09T18:34:00+02:00",
        "teasertext": "I'm doing the indexing of my website with simplecrawler. Which would be your suggested way to update the index after first indexing occurs? \n\nI mean, should i maintain the documents? There is some way to update those, or simply would it delete and re-add with the refreshed webpages data? \n\nThe other option i can think of, is building a new index on an alternative directory, and after it finishes, replace the previous one (so i dont have lo leave the website without search capability at all while crawling it) \n\nBtw, great and useful project!",
        "tags": [
            "suggestion",
            "indexing",
            "website"
        ],
        "type": [
            "GitHub"
        ],
        "id": "bJvqF"
    },
    {
        "date": 1441822440000,
        "repository": "search-index",
        "title": "Fix index => english (en)",
        "text": null,
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/179",
        "user": [
            "jacargentina"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-09T20:14:00+02:00",
        "teasertext": "null",
        "tags": [
            "fix",
            "index",
            "=>",
            "english",
            "en"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2kweCL"
    },
    {
        "date": 1441851960000,
        "repository": "search-index",
        "title": "Query not returning results when looking for a version number",
        "text": "<p>On the following code: </p>\n\n<p><code></code>javascript \nvar searchIndex = require(&#39;search-index&#39;); </p>\n\n<p>var si = searchIndex({ \n  indexPath: &#39;search_index&#39;, \n  logLevel: &#39;debug&#39; \n}); </p>\n\n<p>var example = [{ \n  id: &#39;testing&#39;, \n  content: &#39;Nexion Smart ERP 14.2.1.0\\n\\nRelease de ejemplo&#39; \n}]; </p>\n\n<p>si.add(example, {}, function(err) { \n  if (err) { \n    console.log(&#39;ERROR:&#39;, err); \n  } </p>\n\n<p>  si.search({ \n    query: { \n      &#39;*&#39;: [&#39;ERP&#39;] \n    }, \n    teaser: &#39;content&#39; \n  }, function(err, results) { \n    if (err) { \n      console.log(&#39;ERROR:&#39;, err); \n    } else { \n      console.log(&#39;RESULTS ERP:&#39;, results); \n    } </p>\n\n<pre><code>si.search({ \n  query: { \n    &#39;*&#39;: [&#39;14.2.1.0&#39;] \n  }, \n  teaser: &#39;content&#39; \n}, function(err, results) { \n  if (err) { \n    console.log(&#39;ERROR:&#39;, err); \n  } else { \n    console.log(&#39;RESULTS 14.2.1.0:&#39;, results); \n  } \n}); </code></pre>\n\n<p>  }); \n}); \n<code></code> </p>\n\n<p>Why the search (2nd one) for <code>14.2.1.0</code> is not returning results? May be there is some important i&#39;m missing (i&#39;ve looked on docs, issues, etc. but no luck. Last resource: post here!) </p>\n\n<p>Cheers!</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/180",
        "user": [
            "jacargentina"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-10T04:26:00+02:00",
        "teasertext": "On the following code: \n\njavascript \nvar searchIndex = require('search-index'); \n\nvar si = searchIndex({ \n  indexPath: 'search_index', \n  logLevel: 'debug' \n}); \n\nvar example = [{ \n  id: 'testing', \n  content: 'Nexion Smart ERP 14.2.1.0\\n\\nRelease de ejemplo' \n}]; \n\nsi.add(example, {}, function(err) { \n  if (err) { \n    console.log('ERROR:', err); \n  } \n\n  si.search({ \n    query: { \n      '*': ['ERP'] \n    }, \n    teaser: 'content' \n  }, function(err, results) { \n    if (err) { \n      console.log('ERROR:', err); \n    } else { \n      console.log('RESULTS ERP:', results); \n    } \n\nsi.search({ \n  query: { \n    '*': ['14.2.1.0'] \n  }, \n  teaser: 'content' \n}, function(err, results) { \n  if (err) { \n    console.log('ERROR:', err); \n  } else { \n    console.log('RESULTS 14.2.1.0:', results); \n  } \n}); \n\n  }); \n}); \n \n\nWhy the search (2nd one) for 14.2.1.0 is not returning results? May be there is some important i'm missing (i've looked on docs, issues, etc. but no luck. Last resource: post here!) \n\nCheers!",
        "tags": [
            "results",
            "version",
            "number",
            "returning"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1XqVo1"
    },
    {
        "date": 1441896060000,
        "repository": "search-index",
        "title": "Query - Indexing pipeline demo",
        "text": "<p>Show how this would be done</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/182",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-10T16:41:00+02:00",
        "teasertext": "Show how this would be done",
        "tags": [
            "query",
            "indexing",
            "pipeline",
            "demo"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3Wj30F"
    },
    {
        "date": 1442470560000,
        "repository": "recipes-indexer",
        "title": "Add logging framework",
        "text": "<p>Check out <a href=\"https://github.com/mewwts/log-skeleton\">log-skeleton</a>?</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/recipes-indexer/issues/1",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-09-17T08:16:00+02:00",
        "teasertext": "Check out log-skeleton?",
        "tags": [
            "add",
            "logging",
            "framework"
        ],
        "type": [
            "GitHub"
        ],
        "id": "29x72Q"
    },
    {
        "date": 1442470620000,
        "repository": "recipes-indexer",
        "title": "Simple error handling",
        "text": "<p>Check for http response and create a simple error handling. Only log the errors for now, and log which batch (offset) that went wrong.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/recipes-indexer/issues/2",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-09-17T08:17:00+02:00",
        "teasertext": "Check for http response and create a simple error handling. Only log the errors for now, and log which batch (offset) that went wrong.",
        "tags": [
            "handling",
            "simple",
            "error"
        ],
        "type": [
            "GitHub"
        ],
        "id": "ISfV1"
    },
    {
        "date": 1442470800000,
        "repository": "recipes-indexer",
        "title": "Document processing for recipes",
        "text": "<p>Add document processing for recipes first. Ingredients will come later. ID can be made from URL with JHASH. Image URL and photographer should be non-searchable. Needs and index so ingredients can look up recipe and add ingredient. Maybe the ID could be the index also?</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/recipes-indexer/issues/3",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-09-17T08:20:00+02:00",
        "teasertext": "Add document processing for recipes first. Ingredients will come later. ID can be made from URL with JHASH. Image URL and photographer should be non-searchable. Needs and index so ingredients can look up recipe and add ingredient. Maybe the ID could be the index also?",
        "tags": [
            "document",
            "processing",
            "recipes"
        ],
        "type": [
            "GitHub"
        ],
        "id": "6gndS"
    },
    {
        "date": 1442470920000,
        "repository": "recipes-indexer",
        "title": "Add package.json with dependencies",
        "text": "<p>Add package.json with module dependencies: \n<em> sync-request \n</em> jhash \n* log-skeleton</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/recipes-indexer/issues/4",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-09-17T08:22:00+02:00",
        "teasertext": "Add package.json with module dependencies: \n sync-request \n jhash \n* log-skeleton",
        "tags": [
            "add",
            "packagejson",
            "dependencies"
        ],
        "type": [
            "GitHub"
        ],
        "id": "33v431"
    },
    {
        "date": 1442635440000,
        "repository": "search-index",
        "title": "Inconsistent callback argument order",
        "text": "<p>In of the the library&#39;s callbacks the argument order is the node standard <code>(err, result)</code> order. Except for 3 methods: <code>snapShot</code>, <code>snapShotBatch</code>, and <code>tellMeAboutMySearchIndex</code>. </p>\n\n<p>Having those methods also conform to this standard I think will help keep the API consistent.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/185",
        "user": [
            "johnhaley81"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-19T06:04:00+02:00",
        "teasertext": "In of the the library's callbacks the argument order is the node standard (err, result) order. Except for 3 methods: snapShot, snapShotBatch, and tellMeAboutMySearchIndex. \n\nHaving those methods also conform to this standard I think will help keep the API consistent.",
        "tags": [
            "inconsistent",
            "callback",
            "argument",
            "order"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4qAZzd"
    },
    {
        "date": 1442820420000,
        "repository": "search-index",
        "title": "Make it possible to index from URLs",
        "text": "<p>It would be cool if you could simply send search-index a url to index, and then index directly from the URL</p>",
        "issuetype": "enhancement,Feature",
        "url": "https://github.com/fergiemcdowall/search-index/issues/187",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-21T09:27:00+02:00",
        "teasertext": "It would be cool if you could simply send search-index a url to index, and then index directly from the URL",
        "tags": [
            "make",
            "urls",
            "index"
        ],
        "type": [
            "GitHub"
        ],
        "id": "31vZ8s"
    },
    {
        "date": 1442926680000,
        "repository": "search-index",
        "title": "A little unclear and segmented documentation?",
        "text": "<p>I&#39;m trying to index an array of JSON items and set the filter possibility on one field, but not really sure what I really need since the documentation seems a bit segmented or a bit complex to read. </p>\n\n<p>I have &quot;<a href=\"https://github.com/fergiemcdowall/search-index/blob/master/doc/create.md\">Creating search indexes</a>&quot; where I see that I can define <code>options</code>. I have &quot;<a href=\"https://github.com/fergiemcdowall/search-index/blob/master/doc/add.md\">Adding documents to search indexes</a> where I have <code>batchOptions </code>and <code>batchOptions.fieldOptions</code>. Are <code>options</code> and <code>batchOptions</code> the same? And is it the <a href=\"https://cdn.rawgit.com/fergiemcdowall/search-index/better_docs/doc/api/module-search-index.html\">API-documentation</a> or the readme-file that is correct when it comes to the order of data and options?</p>",
        "issuetype": "discussion,question",
        "url": "https://github.com/fergiemcdowall/search-index/issues/188",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-22T14:58:00+02:00",
        "teasertext": "I'm trying to index an array of JSON items and set the filter possibility on one field, but not really sure what I really need since the documentation seems a bit segmented or a bit complex to read. \n\nI have &quot;Creating search indexes&quot; where I see that I can define options. I have &quot;Adding documents to search indexes where I have batchOptions and batchOptions.fieldOptions. Are options and batchOptions the same? And is it the API-documentation or the readme-file that is correct when it comes to the order of data and options?",
        "tags": [
            "unclear",
            "segmented",
            "documentation"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2QLjyK"
    },
    {
        "date": 1443103920000,
        "repository": "search-index",
        "title": "Stop working when updating from 0.5.0 to 0.6.11",
        "text": "<p>Hi, I&#39;ve recently updated the module from 0.5.0 to last version (0.6.11) and the search functionality of my site has stopped working. I guess that the API has changed, but, what changed exactly to provoke stop working when searching?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/189",
        "user": [
            "gomezbl"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-24T16:12:00+02:00",
        "teasertext": "Hi, I've recently updated the module from 0.5.0 to last version (0.6.11) and the search functionality of my site has stopped working. I guess that the API has changed, but, what changed exactly to provoke stop working when searching?",
        "tags": [
            "updating",
            "stop",
            "working"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2FCQNo"
    },
    {
        "date": 1443431700000,
        "repository": "search-index",
        "title": "Pinned all dependencies",
        "text": "<p>:wave: Hello!</p>\n\n<p>We’re all trying to keep our software up to date, yet stable at the same time.</p>\n\n<p>This is the first in a series of automatic PRs to help you achieve this goal. It pins all of the dependencies in your <code>package.json</code>, so you have complete control over the exact state of your software.</p>\n\n<p>From now on you’ll receive PRs whenever one of your dependencies updates – in real time. This way you get all the benefits of up-to-date dependencies, while having them pinned at the same time. This means:</p>\n\n<ul><li>No more surprises because some of your dependencies didn’t follow <a href=\"http://semver.org/\">SemVer</a>. Your software is always in a state you know about, regardless of <em>when</em> someone does <code>$ npm install</code>.</li><li>If you have continuous integration set up for this repo, it’ll run automatically. Ideally, it will pass and you&#39;ll stay up to date with the press of a button. If the updated dependency <em>does</em> break your software, it won’t affect your users, because their dependencies are still pinned to the working state.</li><li>You can immediately identify which dependency updates break your software, because each one is tested in isolation. You’ll also have a branch ready to work on, so adapting to new APIs is way faster.</li></ul>\n\n<p>Merge this PR and you’ll have up-to-date software without the headaches :sparkles:</p>\n\n<hr/>\n\n<p>This pull request was created by <a href=\"http://greenkeeper.io/\">greenkeeper.io</a>.\nIt keeps your software, up to date, all the time.</p>\n\n<p>&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou&#39;ll also get your pull requests faster :zap:\n&lt;/sub&gt;</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/190",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-28T11:15:00+02:00",
        "teasertext": ":wave: Hello!\n\nWe’re all trying to keep our software up to date, yet stable at the same time.\n\nThis is the first in a series of automatic PRs to help you achieve this goal. It pins all of the dependencies in your package.json, so you have complete control over the exact state of your software.\n\nFrom now on you’ll receive PRs whenever one of your dependencies updates – in real time. This way you get all the benefits of up-to-date dependencies, while having them pinned at the same time. This means:\n\nNo more surprises because some of your dependencies didn’t follow SemVer. Your software is always in a state you know about, regardless of when someone does $ npm install.If you have continuous integration set up for this repo, it’ll run automatically. Ideally, it will pass and you'll stay up to date with the press of a button. If the updated dependency does break your software, it won’t affect your users, because their dependencies are still pinned to the working state.You can immediately identify which dependency updates break your software, because each one is tested in isolation. You’ll also have a branch ready to work on, so adapting to new APIs is way faster.\n\nMerge this PR and you’ll have up-to-date software without the headaches :sparkles:\n\n\n\nThis pull request was created by greenkeeper.io.\nIt keeps your software, up to date, all the time.\n\n&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou'll also get your pull requests faster :zap:\n&lt;/sub&gt;",
        "tags": [
            "pinned",
            "dependencies"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1wKXfi"
    },
    {
        "date": 1443456360000,
        "repository": "search-index",
        "title": "Updated jscs to version 2.2.0",
        "text": "<p>:rocket:</p>\n\n<p>One of your dependencies has just updated, so this PR bumps the corresponding version number in your <code>package.json</code>.</p>\n\n<p>You can now check that the dependency update doesn&#39;t break your code, and then release the new version of your software safe in the knowledge that it will stay in this working state, regardless of <em>when</em> your users do <code>$ npm install</code>.</p>\n\n<p>Have a good day!</p>\n\n<hr/>\n\n<p>This pull request was created by <a href=\"http://greenkeeper.io/\">greenkeeper.io</a>.\nIt keeps your software, up to date, all the time.</p>\n\n<p>&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou&#39;ll also get your pull requests faster :zap:\n&lt;/sub&gt;</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/191",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-28T18:06:00+02:00",
        "teasertext": ":rocket:\n\nOne of your dependencies has just updated, so this PR bumps the corresponding version number in your package.json.\n\nYou can now check that the dependency update doesn't break your code, and then release the new version of your software safe in the knowledge that it will stay in this working state, regardless of when your users do $ npm install.\n\nHave a good day!\n\n\n\nThis pull request was created by greenkeeper.io.\nIt keeps your software, up to date, all the time.\n\n&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou'll also get your pull requests faster :zap:\n&lt;/sub&gt;",
        "tags": [
            "updated",
            "jscs",
            "version"
        ],
        "type": [
            "GitHub"
        ],
        "id": "19G0ez"
    },
    {
        "date": 1443461400000,
        "repository": "search-index",
        "title": "Updated lodash to version 3.10.1",
        "text": "<p>:rocket:</p>\n\n<p>One of your dependencies has just updated, so this PR bumps the corresponding version number in your <code>package.json</code>.</p>\n\n<p>You can now check that the dependency update doesn&#39;t break your code, and then release the new version of your software safe in the knowledge that it will stay in this working state, regardless of <em>when</em> your users do <code>$ npm install</code>.</p>\n\n<p>Have a good day!</p>\n\n<hr/>\n\n<p>This pull request was created by <a href=\"http://greenkeeper.io/\">greenkeeper.io</a>.\nIt keeps your software, up to date, all the time.</p>\n\n<p>&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou&#39;ll also get your pull requests faster :zap:\n&lt;/sub&gt;</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/192",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-28T19:30:00+02:00",
        "teasertext": ":rocket:\n\nOne of your dependencies has just updated, so this PR bumps the corresponding version number in your package.json.\n\nYou can now check that the dependency update doesn't break your code, and then release the new version of your software safe in the knowledge that it will stay in this working state, regardless of when your users do $ npm install.\n\nHave a good day!\n\n\n\nThis pull request was created by greenkeeper.io.\nIt keeps your software, up to date, all the time.\n\n&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou'll also get your pull requests faster :zap:\n&lt;/sub&gt;",
        "tags": [
            "updated",
            "lodash",
            "version"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1Tbm8i"
    },
    {
        "date": 1443542460000,
        "repository": "search-index",
        "title": "Updated async to version 1.4.2",
        "text": "<p>:rocket:</p>\n\n<p>One of your dependencies has just updated, so this PR bumps the corresponding version number in your <code>package.json</code>.</p>\n\n<p>You can now check that the dependency update doesn&#39;t break your code, and then release the new version of your software safe in the knowledge that it will stay in this working state, regardless of <em>when</em> your users do <code>$ npm install</code>.</p>\n\n<p>Have a good day!</p>\n\n<hr/>\n\n<p>This pull request was created by <a href=\"http://greenkeeper.io/\">greenkeeper.io</a>.\nIt keeps your software, up to date, all the time.</p>\n\n<p>&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou&#39;ll also get your pull requests faster :zap:\n&lt;/sub&gt;</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/193",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-29T18:01:00+02:00",
        "teasertext": ":rocket:\n\nOne of your dependencies has just updated, so this PR bumps the corresponding version number in your package.json.\n\nYou can now check that the dependency update doesn't break your code, and then release the new version of your software safe in the knowledge that it will stay in this working state, regardless of when your users do $ npm install.\n\nHave a good day!\n\n\n\nThis pull request was created by greenkeeper.io.\nIt keeps your software, up to date, all the time.\n\n&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou'll also get your pull requests faster :zap:\n&lt;/sub&gt;",
        "tags": [
            "updated",
            "async",
            "version"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1Rxzsa"
    },
    {
        "date": 1443542460000,
        "repository": "search-index",
        "title": "Updated jscs to version 2.1.1",
        "text": "<p>:rocket:</p>\n\n<p>One of your dependencies has just updated, so this PR bumps the corresponding version number in your <code>package.json</code>.</p>\n\n<p>You can now check that the dependency update doesn&#39;t break your code, and then release the new version of your software safe in the knowledge that it will stay in this working state, regardless of <em>when</em> your users do <code>$ npm install</code>.</p>\n\n<p>Have a good day!</p>\n\n<hr/>\n\n<p>This pull request was created by <a href=\"http://greenkeeper.io/\">greenkeeper.io</a>.\nIt keeps your software, up to date, all the time.</p>\n\n<p>&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou&#39;ll also get your pull requests faster :zap:\n&lt;/sub&gt;</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/194",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-29T18:01:00+02:00",
        "teasertext": ":rocket:\n\nOne of your dependencies has just updated, so this PR bumps the corresponding version number in your package.json.\n\nYou can now check that the dependency update doesn't break your code, and then release the new version of your software safe in the knowledge that it will stay in this working state, regardless of when your users do $ npm install.\n\nHave a good day!\n\n\n\nThis pull request was created by greenkeeper.io.\nIt keeps your software, up to date, all the time.\n\n&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou'll also get your pull requests faster :zap:\n&lt;/sub&gt;",
        "tags": [
            "updated",
            "jscs",
            "version"
        ],
        "type": [
            "GitHub"
        ],
        "id": "19G3gP"
    },
    {
        "date": 1443542520000,
        "repository": "search-index",
        "title": "Updated browserify to version 11.2.0",
        "text": "<p>:rocket:</p>\n\n<p>One of your dependencies has just updated, so this PR bumps the corresponding version number in your <code>package.json</code>.</p>\n\n<p>You can now check that the dependency update doesn&#39;t break your code, and then release the new version of your software safe in the knowledge that it will stay in this working state, regardless of <em>when</em> your users do <code>$ npm install</code>.</p>\n\n<p>Have a good day!</p>\n\n<hr/>\n\n<p>This pull request was created by <a href=\"http://greenkeeper.io/\">greenkeeper.io</a>.\nIt keeps your software, up to date, all the time.</p>\n\n<p>&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou&#39;ll also get your pull requests faster :zap:\n&lt;/sub&gt;</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/195",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-29T18:02:00+02:00",
        "teasertext": ":rocket:\n\nOne of your dependencies has just updated, so this PR bumps the corresponding version number in your package.json.\n\nYou can now check that the dependency update doesn't break your code, and then release the new version of your software safe in the knowledge that it will stay in this working state, regardless of when your users do $ npm install.\n\nHave a good day!\n\n\n\nThis pull request was created by greenkeeper.io.\nIt keeps your software, up to date, all the time.\n\n&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou'll also get your pull requests faster :zap:\n&lt;/sub&gt;",
        "tags": [
            "updated",
            "browserify",
            "version"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3IqCfZ"
    },
    {
        "date": 1443542580000,
        "repository": "search-index",
        "title": "Updated mocha to version 2.3.3",
        "text": "<p>:rocket:</p>\n\n<p>One of your dependencies has just updated, so this PR bumps the corresponding version number in your <code>package.json</code>.</p>\n\n<p>You can now check that the dependency update doesn&#39;t break your code, and then release the new version of your software safe in the knowledge that it will stay in this working state, regardless of <em>when</em> your users do <code>$ npm install</code>.</p>\n\n<p>Have a good day!</p>\n\n<hr/>\n\n<p>This pull request was created by <a href=\"http://greenkeeper.io/\">greenkeeper.io</a>.\nIt keeps your software, up to date, all the time.</p>\n\n<p>&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou&#39;ll also get your pull requests faster :zap:\n&lt;/sub&gt;</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/196",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-29T18:03:00+02:00",
        "teasertext": ":rocket:\n\nOne of your dependencies has just updated, so this PR bumps the corresponding version number in your package.json.\n\nYou can now check that the dependency update doesn't break your code, and then release the new version of your software safe in the knowledge that it will stay in this working state, regardless of when your users do $ npm install.\n\nHave a good day!\n\n\n\nThis pull request was created by greenkeeper.io.\nIt keeps your software, up to date, all the time.\n\n&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou'll also get your pull requests faster :zap:\n&lt;/sub&gt;",
        "tags": [
            "updated",
            "mocha",
            "version"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1znqO8"
    },
    {
        "date": 1443558180000,
        "repository": "search-index",
        "title": "unwanted reformatting in teasers",
        "text": "<p>With 0.6.11 I&#39;m seeing unwanted formatting in teasers. With the search term <code>fubarBaz</code>: </p>\n\n<pre><code>&lt;span class=&quot;sc-em&quot;&gt;fubarbaz&lt;/span&gt; </code></pre>\n\n<p>This creates two problems for me. First, the original content is markdown and I don&#39;t want HTML inline. Second the original search term was camel-case fubarBaz, but the teaser shows it downcased. </p>\n\n<p>Are either or both of these behaviors configurable? I took a look at https://github.com/fergiemcdowall/search-index/blob/56043708b4b51ce1df120e4ec99125068b13bc8e/lib/search/searcher.js#L408 where the span is rendered. Seems like passing in a <code>function(string)</code> would be a good solution there. But I haven&#39;t yet figured out where the term is lower-cased.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/197",
        "user": [
            "mblakele"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-29T22:23:00+02:00",
        "teasertext": "With 0.6.11 I'm seeing unwanted formatting in teasers. With the search term fubarBaz: \n\n&lt;span class=&quot;sc-em&quot;&gt;fubarbaz&lt;/span&gt; \n\nThis creates two problems for me. First, the original content is markdown and I don't want HTML inline. Second the original search term was camel-case fubarBaz, but the teaser shows it downcased. \n\nAre either or both of these behaviors configurable? I took a look at https://github.com/fergiemcdowall/search-index/blob/56043708b4b51ce1df120e4ec99125068b13bc8e/lib/search/searcher.js#L408 where the span is rendered. Seems like passing in a function(string) would be a good solution there. But I haven't yet figured out where the term is lower-cased.",
        "tags": [
            "reformatting",
            "teasers",
            "unwanted"
        ],
        "type": [
            "GitHub"
        ],
        "id": "xATRI"
    },
    {
        "date": 1443609120000,
        "repository": "search-index",
        "title": "Updated jscs to version 2.2.1",
        "text": "<p>:rocket:</p>\n\n<p>One of your dependencies has just updated, so this PR bumps the corresponding version number in your <code>package.json</code>.</p>\n\n<p>You can now check that the dependency update doesn&#39;t break your code, and then release the new version of your software safe in the knowledge that it will stay in this working state, regardless of <em>when</em> your users do <code>$ npm install</code>.</p>\n\n<p>Have a good day!</p>\n\n<hr/>\n\n<p>This pull request was created by <a href=\"http://greenkeeper.io/\">greenkeeper.io</a>.\nIt keeps your software, up to date, all the time.</p>\n\n<p>&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou&#39;ll also get your pull requests faster :zap:\n&lt;/sub&gt;</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/198",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-30T12:32:00+02:00",
        "teasertext": ":rocket:\n\nOne of your dependencies has just updated, so this PR bumps the corresponding version number in your package.json.\n\nYou can now check that the dependency update doesn't break your code, and then release the new version of your software safe in the knowledge that it will stay in this working state, regardless of when your users do $ npm install.\n\nHave a good day!\n\n\n\nThis pull request was created by greenkeeper.io.\nIt keeps your software, up to date, all the time.\n\n&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou'll also get your pull requests faster :zap:\n&lt;/sub&gt;",
        "tags": [
            "updated",
            "jscs",
            "version"
        ],
        "type": [
            "GitHub"
        ],
        "id": "19G0fR"
    },
    {
        "date": 1443629160000,
        "repository": "search-index",
        "title": "Updated colors to version 1.1.2",
        "text": "<p>:rocket:</p>\n\n<p>One of your dependencies has just updated, so this PR bumps the corresponding version number in your <code>package.json</code>.</p>\n\n<p>You can now check that the dependency update doesn&#39;t break your code, and then release the new version of your software safe in the knowledge that it will stay in this working state, regardless of <em>when</em> your users do <code>$ npm install</code>.</p>\n\n<p>Have a good day!</p>\n\n<hr/>\n\n<p>This pull request was created by <a href=\"http://greenkeeper.io/\">greenkeeper.io</a>.\nIt keeps your software, up to date, all the time.</p>\n\n<p>&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou&#39;ll also get your pull requests faster :zap:\n&lt;/sub&gt;</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/199",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-09-30T18:06:00+02:00",
        "teasertext": ":rocket:\n\nOne of your dependencies has just updated, so this PR bumps the corresponding version number in your package.json.\n\nYou can now check that the dependency update doesn't break your code, and then release the new version of your software safe in the knowledge that it will stay in this working state, regardless of when your users do $ npm install.\n\nHave a good day!\n\n\n\nThis pull request was created by greenkeeper.io.\nIt keeps your software, up to date, all the time.\n\n&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou'll also get your pull requests faster :zap:\n&lt;/sub&gt;",
        "tags": [
            "updated",
            "colors",
            "version"
        ],
        "type": [
            "GitHub"
        ],
        "id": "SwDvt"
    },
    {
        "date": 1443700920000,
        "repository": "search-index",
        "title": "Updated should to version 7.1.0",
        "text": "<p>:rocket:</p>\n\n<p>One of your dependencies has just updated, so this PR bumps the corresponding version number in your <code>package.json</code>.</p>\n\n<p>You can now check that the dependency update doesn&#39;t break your code, and then release the new version of your software safe in the knowledge that it will stay in this working state, regardless of <em>when</em> your users do <code>$ npm install</code>.</p>\n\n<p>Have a good day!</p>\n\n<hr/>\n\n<p>This pull request was created by <a href=\"http://greenkeeper.io/\">greenkeeper.io</a>.\nIt keeps your software, up to date, all the time.</p>\n\n<p>&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou&#39;ll also get your pull requests faster :zap:\n&lt;/sub&gt;</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/200",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-10-01T14:02:00+02:00",
        "teasertext": ":rocket:\n\nOne of your dependencies has just updated, so this PR bumps the corresponding version number in your package.json.\n\nYou can now check that the dependency update doesn't break your code, and then release the new version of your software safe in the knowledge that it will stay in this working state, regardless of when your users do $ npm install.\n\nHave a good day!\n\n\n\nThis pull request was created by greenkeeper.io.\nIt keeps your software, up to date, all the time.\n\n&lt;sub&gt;\nTired of seeing this sponsor message? Upgrade to the supporter plan!\nYou'll also get your pull requests faster :zap:\n&lt;/sub&gt;",
        "tags": [
            "updated",
            "version"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1U7exI"
    },
    {
        "date": 1443770640000,
        "repository": "search-index",
        "title": "Inconsistent documentation for arguments to add() function",
        "text": "<p><code>doc/quickstart.md</code> has options first and data second: \n<code> \nsi.add(opt, data, function (err) { \n  if (err) console.log(&#39;oops! &#39; + err); \n  else console.log(&#39;success!&#39;); \n}); \n</code> </p>\n\n<p><code>doc/add.md</code> also has options first and data second: \n<code> \n//add \nsi.add(batchOptions, data, function (err) { \n  if (!err) console.log(&#39;success!&#39;); \n}); \n</code> </p>\n\n<p>But <code>doc/api/module-search-index.html</code> suggests that data be passed in first and options second:<br/><code>(inner) add Adds a document to the index(batch, batchOptionsopt, callback)</code> </p>\n\n<p>And <code>README.md</code> has data first and options second: \n<code> \nsi.add(data, opt, function (err) { \n  //add stuff to index \n}); \n</code> </p>\n\n<p>I tried adding multiple files to the index like below and wasn&#39;t actually populating it. I had to reverse the order of the first two arguments. \n<code> \n      si.add({}, data, function(err) { // broken code \n          if (!err) console.log(&#39;success!&#39;); \n      }); \n      si.add(data, {}, function(err) { // working code \n          if (!err) console.log(&#39;success!&#39;); \n      }); \n</code></p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/201",
        "user": [
            "kdumovic"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-10-02T09:24:00+02:00",
        "teasertext": "doc/quickstart.md has options first and data second: \n \nsi.add(opt, data, function (err) { \n  if (err) console.log('oops! ' + err); \n  else console.log('success!'); \n}); \n \n\ndoc/add.md also has options first and data second: \n \n//add \nsi.add(batchOptions, data, function (err) { \n  if (!err) console.log('success!'); \n}); \n \n\nBut doc/api/module-search-index.html suggests that data be passed in first and options second:(inner) add Adds a document to the index(batch, batchOptionsopt, callback) \n\nAnd README.md has data first and options second: \n \nsi.add(data, opt, function (err) { \n  //add stuff to index \n}); \n \n\nI tried adding multiple files to the index like below and wasn't actually populating it. I had to reverse the order of the first two arguments. \n \n      si.add({}, data, function(err) { // broken code \n          if (!err) console.log('success!'); \n      }); \n      si.add(data, {}, function(err) { // working code \n          if (!err) console.log('success!'); \n      }); \n",
        "tags": [
            "documentation",
            "arguments",
            "add",
            "function"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2s6xhm"
    },
    {
        "date": 1444087380000,
        "repository": "search-index",
        "title": "Indexing json files only one level deep",
        "text": "<p>More of a question than an issue... \nI&#39;m using search-index to index and query a bunch of json files. However, I&#39;ve noticed that when each json file is added to the index, it is treated like a file in the batch format and only indexed one level deep. Take for instance this json file: </p>\n\n<p><code>(json) \n{ \n    &quot;CPID&quot;: &quot;CP002&quot;, \n    &quot;id&quot;: &quot;CP002&quot;, \n    &quot;name&quot;: &quot;My Magnificent Element&quot;, \n    &quot;version&quot;: &quot;0.1&quot;, \n    &quot;description&quot;: &quot;This is a magnificent element. This is a generic description.&quot;, \n    &quot;blergh&quot;: &quot;A search term here like myFirstSearchTerm will be found.&quot;, \n    &quot;sources&quot;: [ \n        { \n            &quot;name&quot;: &quot;A search term here like mySecondSearchTerm will NOT be found.&quot;, \n            &quot;url&quot;: &quot;Non-indexed stuff&quot;, \n            &quot;id&quot;: 9000 \n        }, \n        { \n            &quot;name&quot;: &quot;bleh bleh&quot;, \n            &quot;url&quot;: &quot;Lorem ipsum bleh bleh.&quot;, \n            &quot;id&quot;: 9001 \n        }, \n        { \n            &quot;name&quot;: &quot;blah blah&quot;, \n            &quot;url&quot;: &quot;Lorem ipsum blah blah.&quot;, \n            &quot;id&quot;: 9002 \n        } \n    ], \n    &quot;components&quot;: [ \n        { \n            &quot;attr1&quot;: &quot;myThirdSearchTerm isn&#39;t going to work out well either.&quot;, \n            &quot;attr2&quot;: &quot;sadface&quot; \n        } \n    ] \n} \n</code> </p>\n\n<p>In this example, queries (in the form of <code>q.query = {&#39;*&#39;: [searchTerm]};</code> for <code>myFirstSearchTerm</code> are successful, but queries for <code>mySecondSearchTerm</code> and <code>myThirdSearchTerm</code> are not. \nWith your api is there a way to enable this recursive behavior for json files? Some go a few levels deep. Or could you suggest a better way to index these files? </p>\n\n<p>Thank you!</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/204",
        "user": [
            "kdumovic"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-10-06T01:23:00+02:00",
        "teasertext": "More of a question than an issue... \nI'm using search-index to index and query a bunch of json files. However, I've noticed that when each json file is added to the index, it is treated like a file in the batch format and only indexed one level deep. Take for instance this json file: \n\n(json) \n{ \n    &quot;CPID&quot;: &quot;CP002&quot;, \n    &quot;id&quot;: &quot;CP002&quot;, \n    &quot;name&quot;: &quot;My Magnificent Element&quot;, \n    &quot;version&quot;: &quot;0.1&quot;, \n    &quot;description&quot;: &quot;This is a magnificent element. This is a generic description.&quot;, \n    &quot;blergh&quot;: &quot;A search term here like myFirstSearchTerm will be found.&quot;, \n    &quot;sources&quot;: [ \n        { \n            &quot;name&quot;: &quot;A search term here like mySecondSearchTerm will NOT be found.&quot;, \n            &quot;url&quot;: &quot;Non-indexed stuff&quot;, \n            &quot;id&quot;: 9000 \n        }, \n        { \n            &quot;name&quot;: &quot;bleh bleh&quot;, \n            &quot;url&quot;: &quot;Lorem ipsum bleh bleh.&quot;, \n            &quot;id&quot;: 9001 \n        }, \n        { \n            &quot;name&quot;: &quot;blah blah&quot;, \n            &quot;url&quot;: &quot;Lorem ipsum blah blah.&quot;, \n            &quot;id&quot;: 9002 \n        } \n    ], \n    &quot;components&quot;: [ \n        { \n            &quot;attr1&quot;: &quot;myThirdSearchTerm isn't going to work out well either.&quot;, \n            &quot;attr2&quot;: &quot;sadface&quot; \n        } \n    ] \n} \n \n\nIn this example, queries (in the form of q.query = {'*': [searchTerm]}; for myFirstSearchTerm are successful, but queries for mySecondSearchTerm and myThirdSearchTerm are not. \nWith your api is there a way to enable this recursive behavior for json files? Some go a few levels deep. Or could you suggest a better way to index these files? \n\nThank you!",
        "tags": [
            "files",
            "deep",
            "level",
            "json"
        ],
        "type": [
            "GitHub"
        ],
        "id": "br2tK"
    },
    {
        "date": 1444108200000,
        "repository": "search-index",
        "title": "Filter by distance using some kind of geo search",
        "text": "<p>Is it possible?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/205",
        "user": [
            "fmmsilva"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-10-06T07:10:00+02:00",
        "teasertext": "Is it possible?",
        "tags": [
            "filter",
            "distance",
            "kind",
            "geo",
            "search"
        ],
        "type": [
            "GitHub"
        ],
        "id": "OScax"
    },
    {
        "date": 1444394460000,
        "repository": "search-index",
        "title": "Diff in \"bundle\" and \"bundle install\" in rails..",
        "text": "<p>Hi , </p>\n\n<p>As you&#39;ll be knowing the we use two command to install gem in a rails application. \none is bundle, \nanother is bundle install so,<br/>Can you tell what is the difference between &quot;bundle&quot; and &quot;bundle install&quot;. </p>\n\n<p>Regards<br/>Sanjay</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/206",
        "user": [
            "SanjayYadav90"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-10-09T14:41:00+02:00",
        "teasertext": "Hi , \n\nAs you'll be knowing the we use two command to install gem in a rails application. \none is bundle, \nanother is bundle install so,Can you tell what is the difference between &quot;bundle&quot; and &quot;bundle install&quot;. \n\nRegardsSanjay",
        "tags": [
            "diff",
            "bundle",
            "rails",
            "install"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1eA7U7"
    },
    {
        "date": 1444411080000,
        "repository": "search-index",
        "title": "API docs 404",
        "text": "<p>https://cdn.rawgit.com/fergiemcdowall/search-index/better_docs/doc/api/module-search-index.html is throwing 404 right now. </p>\n\n<p><code> \n$ wget -SO - &#39;https://cdn.rawgit.com/fergiemcdowall/search-index/better_docs/doc/api/module-search-index.html&#39; \n--2015-10-09 10:17:45--  https://cdn.rawgit.com/fergiemcdowall/search-index/better_docs/doc/api/module-search-index.html \nResolving cdn.rawgit.com... 198.232.124.74 \nConnecting to cdn.rawgit.com|198.232.124.74|:443... connected. \nHTTP request sent, awaiting response...  \n  HTTP/1.1 404 Not Found \n  Date: Fri, 09 Oct 2015 17:17:45 GMT \n  Content-Type: text/html; charset=UTF-8 \n  Content-Length: 162 \n  Connection: keep-alive \n  X-Content-Type-Options: nosniff \n  X-Robots-Tag: none \n  Access-Control-Allow-Origin: * \n  Cache-Control: max-age=300 \n  Last-Modified: Wed, 20 May 2015 18:35:01 GMT \n  ETag: W/&quot;a2-14d729b7b76&quot; \n  Server: NetDNA-cache/2.2 \n2015-10-09 10:17:46 ERROR 404: Not Found. \n</code></p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/207",
        "user": [
            "mblakele"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-10-09T19:18:00+02:00",
        "teasertext": "https://cdn.rawgit.com/fergiemcdowall/search-index/better_docs/doc/api/module-search-index.html is throwing 404 right now. \n\n \n$ wget -SO - 'https://cdn.rawgit.com/fergiemcdowall/search-index/better_docs/doc/api/module-search-index.html' \n--2015-10-09 10:17:45--  https://cdn.rawgit.com/fergiemcdowall/search-index/better_docs/doc/api/module-search-index.html \nResolving cdn.rawgit.com... 198.232.124.74 \nConnecting to cdn.rawgit.com|198.232.124.74|:443... connected. \nHTTP request sent, awaiting response...  \n  HTTP/1.1 404 Not Found \n  Date: Fri, 09 Oct 2015 17:17:45 GMT \n  Content-Type: text/html; charset=UTF-8 \n  Content-Length: 162 \n  Connection: keep-alive \n  X-Content-Type-Options: nosniff \n  X-Robots-Tag: none \n  Access-Control-Allow-Origin: * \n  Cache-Control: max-age=300 \n  Last-Modified: Wed, 20 May 2015 18:35:01 GMT \n  ETag: W/&quot;a2-14d729b7b76&quot; \n  Server: NetDNA-cache/2.2 \n2015-10-09 10:17:46 ERROR 404: Not Found. \n",
        "tags": [
            "api",
            "docs"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3SUwFQ"
    },
    {
        "date": 1444413600000,
        "repository": "search-index",
        "title": "Memory leaks with large json files",
        "text": "<p>To preface, the json files I&#39;m using aren&#39;t really that large. I have 100 of them, ranging in size from 20-300kb, with one or two outliers ~800kb. The entire folder is ~9mb. </p>\n\n<p>Unflattened, each json file has 15 keys. My script takes 7 seconds to process them, uses up to 100mb of memory and outputs an si folder of size ~4mb. If I run my script again without deleting the si folder, it takes 20 seconds, uses up to 300mb of memory and outputs an si folder of size ~13mb. My search-index still only has 100 documents but the index on disk tripled in size. Why is this? Are there not any checks against duplicates? </p>\n\n<p><a href=\"http://stackoverflow.com/questions/19098797/fastest-way-to-flatten-un-flatten-nested-json-objects\">Flattened</a>, my json files have between 300-3000 keys. My script takes ~100 seconds to process them (the time spent actually flattening is negligible), it starts using ~200mb of memory and increases to around ~1.1gb(!!) before the scripts exits, and outputs an si folder of size ~28mb. If I run my script again without deleting the si folder, it hangs indefinitely, using more and more memory (1.5gb+) until I manually exit. </p>\n\n<p>Could you please shed some light on why this behavior is the way it is? And what is expected? Thank you!</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/208",
        "user": [
            "kdumovic"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-10-09T20:00:00+02:00",
        "teasertext": "To preface, the json files I'm using aren't really that large. I have 100 of them, ranging in size from 20-300kb, with one or two outliers ~800kb. The entire folder is ~9mb. \n\nUnflattened, each json file has 15 keys. My script takes 7 seconds to process them, uses up to 100mb of memory and outputs an si folder of size ~4mb. If I run my script again without deleting the si folder, it takes 20 seconds, uses up to 300mb of memory and outputs an si folder of size ~13mb. My search-index still only has 100 documents but the index on disk tripled in size. Why is this? Are there not any checks against duplicates? \n\nFlattened, my json files have between 300-3000 keys. My script takes ~100 seconds to process them (the time spent actually flattening is negligible), it starts using ~200mb of memory and increases to around ~1.1gb(!!) before the scripts exits, and outputs an si folder of size ~28mb. If I run my script again without deleting the si folder, it hangs indefinitely, using more and more memory (1.5gb+) until I manually exit. \n\nCould you please shed some light on why this behavior is the way it is? And what is expected? Thank you!",
        "tags": [
            "large",
            "files",
            "json",
            "memory"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4rbBF8"
    },
    {
        "date": 1444856280000,
        "repository": "search-index",
        "title": "Doesn't work with github electron",
        "text": "<p>Uncaught LevelUPError: Failed to require LevelDOWN (Module version mismatch. Expected 46, got 14.). Try <code>npm install leveldown</code> if it&#39;s missing </p>\n\n<p>This looks like it might be helpful: \nhttp://electron.atom.io/docs/v0.32.0/tutorial/using-native-node-modules/ </p>\n\n<p>Haven&#39;t got it working yet but will post more if I do.</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/209",
        "user": [
            "scott-cornwell"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-10-14T22:58:00+02:00",
        "teasertext": "Uncaught LevelUPError: Failed to require LevelDOWN (Module version mismatch. Expected 46, got 14.). Try npm install leveldown if it's missing \n\nThis looks like it might be helpful: \nhttp://electron.atom.io/docs/v0.32.0/tutorial/using-native-node-modules/ \n\nHaven't got it working yet but will post more if I do.",
        "tags": [
            "work",
            "github",
            "electron"
        ],
        "type": [
            "GitHub"
        ],
        "id": "46ZwLE"
    },
    {
        "date": 1445356200000,
        "repository": "search-index",
        "title": "Should work with Tonic",
        "text": "<p>It would be great if this worked: https://tonicdev.com/npm/search-index</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/search-index/issues/210",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-10-20T17:50:00+02:00",
        "teasertext": "It would be great if this worked: https://tonicdev.com/npm/search-index",
        "tags": [
            "work",
            "tonic"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2AZXED"
    },
    {
        "date": 1445356320000,
        "repository": "search-index",
        "title": "Should be able to initialise in all of these ways",
        "text": "<p><code>javascript \nvar si1 = require(&#39;search-index&#39;); \nvar si2 = require(&#39;search-index&#39;)(); \nvar si2 = require(&#39;search-index&#39;)({}); \n</code> \n...should all work synonymously and uncomplainingly</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/fergiemcdowall/search-index/issues/211",
        "user": [
            "fergiemcdowall"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-10-20T17:52:00+02:00",
        "teasertext": "javascript \nvar si1 = require('search-index'); \nvar si2 = require('search-index')(); \nvar si2 = require('search-index')({}); \n \n...should all work synonymously and uncomplainingly",
        "tags": [
            "initialise",
            "ways"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1aamHJ"
    },
    {
        "date": 1445613240000,
        "repository": "search-index",
        "title": "Boolean search and advanced search",
        "text": "<p>Is it possible to do boolean search or any other type of advanced search? </p>\n\n<p>Example: &#39;car and bike&#39;, &#39;car -bike&#39;, &#39;truck or airplane&#39;</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/212",
        "user": [
            "fmmsilva"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-10-23T17:14:00+02:00",
        "teasertext": "Is it possible to do boolean search or any other type of advanced search? \n\nExample: 'car and bike', 'car -bike', 'truck or airplane'",
        "tags": [
            "boolean",
            "search",
            "advanced"
        ],
        "type": [
            "GitHub"
        ],
        "id": "tWwqv"
    },
    {
        "date": 1445708520000,
        "repository": "search-index",
        "title": "What am I doing wrong?",
        "text": "<p>This is my code: </p>\n\n<p><code> \nvar q = { \n    query : { \n        &#39;*&#39;: [&#39;dor&#39;] \n    } \n} \nsi.search(q, function (err, searchResults) { \n    console.log(searchResults) \n}); \n</code> </p>\n\n<p>I have 53589 docs in my index and some of them contains the word &#39;dor&#39;. \nI got the following result (no document found): </p>\n\n<p><code> \n{ totalHits: 0, \n  totalDocsInIndex: 53589, \n  documentFrequencies: { &#39;*￮dor&#39;: 0 }, \n  fieldWeight: { &#39;*￮dor&#39;: 1 }, \n  query:  \n   { query: { &#39;*&#39;: [Object] }, \n     maxFacetLimit: 100, \n     offset: 0, \n     pageSize: 100 }, \n  facets: {}, \n  facetRanges: undefined, \n  hits: [] } \n</code></p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/213",
        "user": [
            "fmmsilva"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-10-24T19:42:00+02:00",
        "teasertext": "This is my code: \n\n \nvar q = { \n    query : { \n        '*': ['dor'] \n    } \n} \nsi.search(q, function (err, searchResults) { \n    console.log(searchResults) \n}); \n \n\nI have 53589 docs in my index and some of them contains the word 'dor'. \nI got the following result (no document found): \n\n \n{ totalHits: 0, \n  totalDocsInIndex: 53589, \n  documentFrequencies: { '*￮dor': 0 }, \n  fieldWeight: { '*￮dor': 1 }, \n  query:  \n   { query: { '*': [Object] }, \n     maxFacetLimit: 100, \n     offset: 0, \n     pageSize: 100 }, \n  facets: {}, \n  facetRanges: undefined, \n  hits: [] } \n",
        "tags": [
            "wrong"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2WHGk2"
    },
    {
        "date": 1445871600000,
        "repository": "search-index",
        "title": "API-reference link gives a 404",
        "text": "<p>In the <code>README.md</code> the last link points no where: \nhttps://cdn.rawgit.com/fergiemcdowall/search-index/better_docs/doc/api/module-search-index.html</p>",
        "issuetype": "bug",
        "url": "https://github.com/fergiemcdowall/search-index/issues/214",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-10-26T16:00:00+01:00",
        "teasertext": "In the README.md the last link points no where: \nhttps://cdn.rawgit.com/fergiemcdowall/search-index/better_docs/doc/api/module-search-index.html",
        "tags": [
            "api-reference",
            "link"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1MsYj8"
    },
    {
        "date": 1445871780000,
        "repository": "search-index",
        "title": "Filter overview in the documentation?",
        "text": "<p>I&#39;m not quite understanding how to define facets/filters anymore. It&#39;s good that every small part has it&#39;s own documentation, but I&#39;m not able to see the big picture. So I have 4 fields that I want to filter on, can I set that up in the options-line at the top of my code, or do I add that at the si.add-part?</p>",
        "issuetype": "discussion,enhancement",
        "url": "https://github.com/fergiemcdowall/search-index/issues/215",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-10-26T16:03:00+01:00",
        "teasertext": "I'm not quite understanding how to define facets/filters anymore. It's good that every small part has it's own documentation, but I'm not able to see the big picture. So I have 4 fields that I want to filter on, can I set that up in the options-line at the top of my code, or do I add that at the si.add-part?",
        "tags": [
            "overview",
            "documentation",
            "filter"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2m0D1g"
    },
    {
        "date": 1445955420000,
        "repository": "search-index",
        "title": "levelup raised error",
        "text": "<p>Search index works fine and all my test cases pass.<br/>But new is levelup raised this error \n<code> \n  { \n    &quot;name&quot;: &quot;search-index&quot;, \n    &quot;hostname&quot;: &quot;ubuntu&quot;, \n    &quot;pid&quot;: 11913, \n    &quot;component&quot;: &quot;indexer&quot;, \n    &quot;level&quot;: 40, \n    &quot;err&quot;: { \n      &quot;message&quot;: &quot;Key not found in database [DOCUMENT-COUNT]&quot;, \n      &quot;name&quot;: &quot;NotFoundError&quot;, \n      &quot;stack&quot;: &quot;NotFoundError: Key not found in database [DOCUMENT-COUNT] \n     **/node_modules/search-index/node_modules/levelup/lib/levelup.js:217:15&quot; \n    }, \n    &quot;msg&quot;: &quot;Key not found in database [DOCUMENT-COUNT]&quot;, \n    &quot;time&quot;: &quot;2015-10-27T13:45:37.642Z&quot;, \n    &quot;v&quot;: 0 \n  } \n</code> </p>\n\n<p>Can this be ignored?  How can I switch off this error ? \nThanks</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/216",
        "user": [
            "larsvoigt"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-10-27T15:17:00+01:00",
        "teasertext": "Search index works fine and all my test cases pass.But new is levelup raised this error \n \n  { \n    &quot;name&quot;: &quot;search-index&quot;, \n    &quot;hostname&quot;: &quot;ubuntu&quot;, \n    &quot;pid&quot;: 11913, \n    &quot;component&quot;: &quot;indexer&quot;, \n    &quot;level&quot;: 40, \n    &quot;err&quot;: { \n      &quot;message&quot;: &quot;Key not found in database [DOCUMENT-COUNT]&quot;, \n      &quot;name&quot;: &quot;NotFoundError&quot;, \n      &quot;stack&quot;: &quot;NotFoundError: Key not found in database [DOCUMENT-COUNT] \n     **/node_modules/search-index/node_modules/levelup/lib/levelup.js:217:15&quot; \n    }, \n    &quot;msg&quot;: &quot;Key not found in database [DOCUMENT-COUNT]&quot;, \n    &quot;time&quot;: &quot;2015-10-27T13:45:37.642Z&quot;, \n    &quot;v&quot;: 0 \n  } \n \n\nCan this be ignored?  How can I switch off this error ? \nThanks",
        "tags": [
            "levelup",
            "raised",
            "error"
        ],
        "type": [
            "GitHub"
        ],
        "id": "37uCsK"
    },
    {
        "date": 1445957760000,
        "repository": "search-index",
        "title": "Fixed API-reference",
        "text": "<p>think it&#39;s because the original link pointed to a branch that doesn&#39;t exist any more (better-doc)</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/217",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-10-27T15:56:00+01:00",
        "teasertext": "think it's because the original link pointed to a branch that doesn't exist any more (better-doc)",
        "tags": [
            "fixed",
            "api-reference"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1pM7OT"
    },
    {
        "date": 1446117060000,
        "repository": "search-index",
        "title": "Node 3 and 4",
        "text": null,
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/pull/218",
        "user": [
            "mewwts"
        ],
        "userimage": "",
        "userassigned": "mewwts",
        "datehuman": "2015-10-29T12:11:00+01:00",
        "teasertext": "null",
        "tags": [
            "node"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3spWbO"
    },
    {
        "date": 1446569640000,
        "repository": "resume-index",
        "title": "Filtered result shows too muc",
        "text": "<p>When filtered on &quot;me&quot; also shows &quot;method&quot;. May be because search-index API has changed, or I&#39;m using bucket filter in wrong place.</p>",
        "issuetype": "bug",
        "url": "https://github.com/eklem/resume-index/issues/1",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-11-03T17:54:00+01:00",
        "teasertext": "When filtered on &quot;me&quot; also shows &quot;method&quot;. May be because search-index API has changed, or I'm using bucket filter in wrong place.",
        "tags": [
            "result",
            "muc",
            "filtered",
            "shows"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4FzExB"
    },
    {
        "date": 1446587820000,
        "repository": "search-index",
        "title": "Filters not precise enough",
        "text": "<p>I have a facet called <code>type</code> that contain, among others, the filters <code>me</code> and <code>method</code>. If I filter on <code>me</code> I also get the results of the <code>method</code> filter. I guess this is the range-stuff that kicks in. The filter-part of the URL looks like this: </p>\n\n<p><code> \n&quot;filter&quot;:{&quot;types&quot;:[[&quot;me&quot;,&quot;me&quot;]]} \n</code> \nI guess I&#39;ve found a glitch. I would like to only filter on the filter exactly equal to <code>me</code>. Do we have a solution for this now, or do we need to figure out how to solve it?</p>",
        "issuetype": "bug,discussion",
        "url": "https://github.com/fergiemcdowall/search-index/issues/219",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-11-03T22:57:00+01:00",
        "teasertext": "I have a facet called type that contain, among others, the filters me and method. If I filter on me I also get the results of the method filter. I guess this is the range-stuff that kicks in. The filter-part of the URL looks like this: \n\n \n&quot;filter&quot;:{&quot;types&quot;:[[&quot;me&quot;,&quot;me&quot;]]} \n \nI guess I've found a glitch. I would like to only filter on the filter exactly equal to me. Do we have a solution for this now, or do we need to figure out how to solve it?",
        "tags": [
            "precise",
            "filters"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1rs5Dp"
    },
    {
        "date": 1446636660000,
        "repository": "search-index",
        "title": "searcher doesn't seem to work with nGramLength 2 or more",
        "text": "<p>I&#39;m testing nGramLenght 2, and the matcher works quite well, giving me autocomplete on phrases, but I get no search results. Do we have tests for this or is it a bug? </p>\n\n<p>Anyway: matcher works, searcher not.</p>",
        "issuetype": "question",
        "url": "https://github.com/fergiemcdowall/search-index/issues/220",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-11-04T12:31:00+01:00",
        "teasertext": "I'm testing nGramLenght 2, and the matcher works quite well, giving me autocomplete on phrases, but I get no search results. Do we have tests for this or is it a bug? \n\nAnyway: matcher works, searcher not.",
        "tags": [
            "work",
            "ngramlength",
            "searcher"
        ],
        "type": [
            "GitHub"
        ],
        "id": "4oJ1qC"
    },
    {
        "date": 1446913200000,
        "repository": "search-index",
        "title": "Searching a phrase",
        "text": "<p>I try ti search a phrase and i use  </p>\n\n<blockquote><p>q.query = { \n  &#39;title&#39;: [&#39;Test Michel&#39;] \n} </p></blockquote>\n\n<p>But the searchResults return 0 hit. \nWhen i search  </p>\n\n<blockquote><p>q.query = { \n  &#39;title&#39;: [&#39;Test&#39;, &#39;Michel&#39;] \n} </p></blockquote>\n\n<p>it find one hit. \nThe title of the founded document is &quot;Test Michel (fête)&quot;. \nI don&#39;t understand why my first search doesn&#39;t work. Is there a error un my syntax ? \nPS : the results are the same when i use &#39;*&#39; instead of &quot;title&quot;, to search across all fields </p>\n\n<p>Question : can we use a wildcard (like *) in the word to search ?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/221",
        "user": [
            "jbayard64"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-11-07T17:20:00+01:00",
        "teasertext": "I try ti search a phrase and i use  \n\nq.query = { \n  'title': ['Test Michel'] \n} \n\nBut the searchResults return 0 hit. \nWhen i search  \n\nq.query = { \n  'title': ['Test', 'Michel'] \n} \n\nit find one hit. \nThe title of the founded document is &quot;Test Michel (fête)&quot;. \nI don't understand why my first search doesn't work. Is there a error un my syntax ? \nPS : the results are the same when i use '*' instead of &quot;title&quot;, to search across all fields \n\nQuestion : can we use a wildcard (like *) in the word to search ?",
        "tags": [
            "searching",
            "phrase"
        ],
        "type": [
            "GitHub"
        ],
        "id": "CL9mN"
    },
    {
        "date": 1446931620000,
        "repository": "search-index",
        "title": "Setting field weight only at batch level?",
        "text": "<p>Is the <a href=\"https://github.com/fergiemcdowall/search-index/blob/master/doc/add.md#default-field-options\">field weight</a> only possible to set at a batch level when indexing? I wanted to weight fields a bit more for some documents, but not others. Same batch, same type of docs. Should I then create different batches, or is there a smoother, more elegant way?</p>",
        "issuetype": "question",
        "url": "https://github.com/fergiemcdowall/search-index/issues/222",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-11-07T22:27:00+01:00",
        "teasertext": "Is the field weight only possible to set at a batch level when indexing? I wanted to weight fields a bit more for some documents, but not others. Same batch, same type of docs. Should I then create different batches, or is there a smoother, more elegant way?",
        "tags": [
            "field",
            "batch",
            "level",
            "weight"
        ],
        "type": [
            "GitHub"
        ],
        "id": "PN8gz"
    },
    {
        "date": 1447761180000,
        "repository": "search-index",
        "title": "Delete operations extremely slow. level-transactions times out",
        "text": "<p>Hi, </p>\n\n<p>I&#39;m  running SI within my ecommerce integration express app.  </p>\n\n<p>I created a deletable index to quickly search on 300 product docs, 3k per doc. </p>\n\n<p>The ecommerce platform calls webhooks to inform my app that the product changed. When it&#39;s deleted or set invisible, I want to remove it from the index.  </p>\n\n<p>The se.del() method takes up to 2 minutes to complete and I only managed to see it finish because I modified this https://github.com/cshum/level-transactions/blob/master/index.js (line 26) multiplying the TTL by 10.... that is, in production the deletion fails and invisible/deleted products appear in search results. </p>\n\n<p>Any clue? \nNico</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/223",
        "user": [
            "cleverplatypus"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-11-17T12:53:00+01:00",
        "teasertext": "Hi, \n\nI'm  running SI within my ecommerce integration express app.  \n\nI created a deletable index to quickly search on 300 product docs, 3k per doc. \n\nThe ecommerce platform calls webhooks to inform my app that the product changed. When it's deleted or set invisible, I want to remove it from the index.  \n\nThe se.del() method takes up to 2 minutes to complete and I only managed to see it finish because I modified this https://github.com/cshum/level-transactions/blob/master/index.js (line 26) multiplying the TTL by 10.... that is, in production the deletion fails and invisible/deleted products appear in search results. \n\nAny clue? \nNico",
        "tags": [
            "delete",
            "operations",
            "extremely",
            "slow",
            "level-transactions",
            "times"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1WJOBi"
    },
    {
        "date": 1447766640000,
        "repository": "search-index",
        "title": "If field is missing from first item in batch, field will not get indexed at all",
        "text": "<p>I have a Google spreadsheet with some columns. I generate JSON from this, and index a sheet as a batch. </p>\n\n<p>Some of the fields for an item are mandatory, but if first item doesn&#39;t have all fields, the missing fields doesn&#39;t seem to be indexed at all. Is it supposed to work like this?</p>",
        "issuetype": "discussion,question",
        "url": "https://github.com/fergiemcdowall/search-index/issues/224",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-11-17T14:24:00+01:00",
        "teasertext": "I have a Google spreadsheet with some columns. I generate JSON from this, and index a sheet as a batch. \n\nSome of the fields for an item are mandatory, but if first item doesn't have all fields, the missing fields doesn't seem to be indexed at all. Is it supposed to work like this?",
        "tags": [
            "batch",
            "missing",
            "indexed",
            "item"
        ],
        "type": [
            "GitHub"
        ],
        "id": "45o1wW"
    },
    {
        "date": 1448983980000,
        "repository": "search-index",
        "title": "FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - process out of memory",
        "text": "<p>Calling the indexer with a batch of 300 items, and it errors after a while. Memory leak? Uses 1,5 GB approximately, before crashing. The machine has plenty more. </p>\n\n<p><code></code>` \n&lt;--- Last few GCs ---&gt; </p>\n\n<p>   18347 ms: Scavenge 1398.2 (1456.8) -&gt; 1398.2 (1456.8) MB, 2.7 / 0 ms (+ 2.1 ms in 1 steps since last GC) [allocation failure] [incremental marking delaying mark-sweep]. \n   19185 ms: Mark-sweep 1398.2 (1456.8) -&gt; 1397.9 (1456.8) MB, 838.5 / 0 ms (+ 3.1 ms in 2 steps since start of marking, biggest step 2.1 ms) [last resort gc]. \n   20019 ms: Mark-sweep 1397.9 (1456.8) -&gt; 1397.5 (1456.8) MB, 833.6 / 0 ms [last resort gc]. </p>\n\n<p>&lt;--- JS stacktrace ---&gt; </p>\n\n<p>==== JS stack trace ========================================= </p>\n\n<p>Security context: 0x1f38d1844a49 &lt;JS Object&gt; \n    1: /<em> anonymous </em>/(aka /<em> anonymous </em>/) [/Users/eklem/node_modules/search-index/lib/indexing/indexer.js:125] [pc=0xec03b7afde3] (this=0x1f38d1804139 &lt;undefined&gt;,filterKey=0x1f38d183cd31 &lt;String[1]: m&gt;) \n    2: arguments adaptor frame: 3-&gt;1 \n    3: /<em> anonymous </em>/(aka /<em> anonymous </em>/) [/Users/eklem/node_modules/lodash/index.js:3049] [pc=0xec03b79b55d] (this=0x1f38d1804139 &lt;undefined&gt;,collectio... </p>\n\n<p>FATAL ERROR: CALL<em>AND</em>RETRY_LAST Allocation failed - process out of memory \nAbort trap: 6 \n<code></code>`</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/225",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-12-01T16:33:00+01:00",
        "teasertext": "Calling the indexer with a batch of 300 items, and it errors after a while. Memory leak? Uses 1,5 GB approximately, before crashing. The machine has plenty more. \n\n` \n&lt;--- Last few GCs ---&gt; \n\n   18347 ms: Scavenge 1398.2 (1456.8) -&gt; 1398.2 (1456.8) MB, 2.7 / 0 ms (+ 2.1 ms in 1 steps since last GC) [allocation failure] [incremental marking delaying mark-sweep]. \n   19185 ms: Mark-sweep 1398.2 (1456.8) -&gt; 1397.9 (1456.8) MB, 838.5 / 0 ms (+ 3.1 ms in 2 steps since start of marking, biggest step 2.1 ms) [last resort gc]. \n   20019 ms: Mark-sweep 1397.9 (1456.8) -&gt; 1397.5 (1456.8) MB, 833.6 / 0 ms [last resort gc]. \n\n&lt;--- JS stacktrace ---&gt; \n\n==== JS stack trace ========================================= \n\nSecurity context: 0x1f38d1844a49 &lt;JS Object&gt; \n    1: / anonymous /(aka / anonymous /) [/Users/eklem/node_modules/search-index/lib/indexing/indexer.js:125] [pc=0xec03b7afde3] (this=0x1f38d1804139 &lt;undefined&gt;,filterKey=0x1f38d183cd31 &lt;String[1]: m&gt;) \n    2: arguments adaptor frame: 3-&gt;1 \n    3: / anonymous /(aka / anonymous /) [/Users/eklem/node_modules/lodash/index.js:3049] [pc=0xec03b79b55d] (this=0x1f38d1804139 &lt;undefined&gt;,collectio... \n\nFATAL ERROR: CALLANDRETRY_LAST Allocation failed - process out of memory \nAbort trap: 6 \n`",
        "tags": [
            "allocation",
            "failed",
            "process",
            "memory"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2zsWRP"
    },
    {
        "date": 1448986800000,
        "repository": "search-index",
        "title": "[question / bug] Adding documents to the index without recreating index",
        "text": "<p>Hey, </p>\n\n<p>I was having a play around with this to see if it would fit a use case on a project i am working on. I want to be able to add, update and delete documents in the index without having to recreate the whole index each time. I have the following code: </p>\n\n<p><code></code>`js \nvar si = require(&#39;search-index&#39;)({ \n    indexPath: &#39;./test&#39;, \n    logLevel: &#39;debug&#39; \n}); </p>\n\n<p>function addDoc(doc) { \n    return new Promise(function (resolve, reject) { \n       si.add(doc, function (err) { \n           if (err) return reject(err); </p>\n\n<pre><code>       resolve(doc); \n   }); \n}); </code></pre>\n\n<p>} </p>\n\n<p>var doc1 = { title: &#39;doc 1&#39;, id: &#39;doc-1&#39; }; \nvar doc2 = { title: &#39;doc 2&#39;, id: &#39;doc-2&#39; }; \nvar doc3 = { title: &#39;doc 3&#39;, id: &#39;doc-3&#39; }; </p>\n\n<p>Promise.all([ \n    addDoc(doc1), \n    addDoc(doc2), \n    addDoc(doc3) \n]).then(function () { \n    si.search({ query: { &#39;*&#39;: [&#39;doc&#39;] }}, function (err, results) { \n        console.log(results); \n    }); \n}).catch(function (err) { \n    console.log(err) \n}); \n<code></code>` </p>\n\n<p>I would expect <code>search</code> to find 3 matching documents and report that there are 3 documents in the index. It actually reports that there is 1 document in the index and returns this as a match. This is the last document that was added (<code>doc-3</code>). It almost like each <code>add</code> is truncating the contents of the index. This was the log output on a fresh run with no pre-existing db: </p>\n\n<p><code> \n[2015-12-01T16:08:16.692Z]  WARN: search-index/indexer/25573 on mikes-mbp: Key not found in database [DOCUMENT-COUNT] \n    NotFoundError: Key not found in database [DOCUMENT-COUNT] \n        at /Users/mike/code/search-index-test/node_modules/search-index/node_modules/levelup/lib/levelup.js:217:15 \n[2015-12-01T16:08:16.695Z]  INFO: search-index/indexer/25573 on mikes-mbp: indexing doc-1 \n[2015-12-01T16:08:16.703Z]  WARN: search-index/indexer/25573 on mikes-mbp: Key not found in database [DOCUMENT-COUNT] \n    NotFoundError: Key not found in database [DOCUMENT-COUNT] \n        at /Users/mike/code/search-index-test/node_modules/search-index/node_modules/levelup/lib/levelup.js:217:15 \n[2015-12-01T16:08:16.703Z]  INFO: search-index/indexer/25573 on mikes-mbp: indexing doc-2 \n[2015-12-01T16:08:16.706Z]  WARN: search-index/indexer/25573 on mikes-mbp: Key not found in database [DOCUMENT-COUNT] \n    NotFoundError: Key not found in database [DOCUMENT-COUNT] \n        at /Users/mike/code/search-index-test/node_modules/search-index/node_modules/levelup/lib/levelup.js:217:15 \n[2015-12-01T16:08:16.706Z]  INFO: search-index/indexer/25573 on mikes-mbp: indexing doc-3 \n[2015-12-01T16:08:16.713Z]  INFO: search-index/indexer/25573 on mikes-mbp: batch indexed! \n[2015-12-01T16:08:16.714Z]  INFO: search-index/indexer/25573 on mikes-mbp: batch indexed! \n[2015-12-01T16:08:16.714Z]  INFO: search-index/indexer/25573 on mikes-mbp: batch indexed! \n[2015-12-01T16:08:16.715Z]  INFO: search-index/searcher/25573 on mikes-mbp: {&quot;query&quot;:{&quot;*&quot;:[&quot;doc&quot;]},&quot;maxFacetLimit&quot;:100,&quot;offset&quot;:0,&quot;pageSize&quot;:100} \n</code> </p>\n\n<p>and this was the result of the <code>console.log(results)</code>: </p>\n\n<p><code> \n{ totalHits: 1, \n  totalDocsInIndex: 1, \n  documentFrequencies: { &#39;*￮doc&#39;: 1 }, \n  fieldWeight: { &#39;*￮doc&#39;: 1 }, \n  query: \n   { query: { &#39;*&#39;: [Object] }, \n     maxFacetLimit: 100, \n     offset: 0, \n     pageSize: 100 }, \n  facets: {}, \n  facetRanges: undefined, \n  hits: \n   [ { id: &#39;doc-3&#39;, \n       tf: [Object], \n       score: 0.545144315135374, \n       document: [Object] } ] } \n</code> </p>\n\n<p>As a test, i ran the script 3 times, each time adding just 1 document at a time, and this had the desired behaviour of appending documents to the index. </p>\n\n<p>So i guess my question is, have i misunderstood how this works?</p>",
        "issuetype": null,
        "url": "https://github.com/fergiemcdowall/search-index/issues/226",
        "user": [
            "mike182uk"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-12-01T17:20:00+01:00",
        "teasertext": "Hey, \n\nI was having a play around with this to see if it would fit a use case on a project i am working on. I want to be able to add, update and delete documents in the index without having to recreate the whole index each time. I have the following code: \n\n`js \nvar si = require('search-index')({ \n    indexPath: './test', \n    logLevel: 'debug' \n}); \n\nfunction addDoc(doc) { \n    return new Promise(function (resolve, reject) { \n       si.add(doc, function (err) { \n           if (err) return reject(err); \n\n       resolve(doc); \n   }); \n}); \n\n} \n\nvar doc1 = { title: 'doc 1', id: 'doc-1' }; \nvar doc2 = { title: 'doc 2', id: 'doc-2' }; \nvar doc3 = { title: 'doc 3', id: 'doc-3' }; \n\nPromise.all([ \n    addDoc(doc1), \n    addDoc(doc2), \n    addDoc(doc3) \n]).then(function () { \n    si.search({ query: { '*': ['doc'] }}, function (err, results) { \n        console.log(results); \n    }); \n}).catch(function (err) { \n    console.log(err) \n}); \n` \n\nI would expect search to find 3 matching documents and report that there are 3 documents in the index. It actually reports that there is 1 document in the index and returns this as a match. This is the last document that was added (doc-3). It almost like each add is truncating the contents of the index. This was the log output on a fresh run with no pre-existing db: \n\n \n[2015-12-01T16:08:16.692Z]  WARN: search-index/indexer/25573 on mikes-mbp: Key not found in database [DOCUMENT-COUNT] \n    NotFoundError: Key not found in database [DOCUMENT-COUNT] \n        at /Users/mike/code/search-index-test/node_modules/search-index/node_modules/levelup/lib/levelup.js:217:15 \n[2015-12-01T16:08:16.695Z]  INFO: search-index/indexer/25573 on mikes-mbp: indexing doc-1 \n[2015-12-01T16:08:16.703Z]  WARN: search-index/indexer/25573 on mikes-mbp: Key not found in database [DOCUMENT-COUNT] \n    NotFoundError: Key not found in database [DOCUMENT-COUNT] \n        at /Users/mike/code/search-index-test/node_modules/search-index/node_modules/levelup/lib/levelup.js:217:15 \n[2015-12-01T16:08:16.703Z]  INFO: search-index/indexer/25573 on mikes-mbp: indexing doc-2 \n[2015-12-01T16:08:16.706Z]  WARN: search-index/indexer/25573 on mikes-mbp: Key not found in database [DOCUMENT-COUNT] \n    NotFoundError: Key not found in database [DOCUMENT-COUNT] \n        at /Users/mike/code/search-index-test/node_modules/search-index/node_modules/levelup/lib/levelup.js:217:15 \n[2015-12-01T16:08:16.706Z]  INFO: search-index/indexer/25573 on mikes-mbp: indexing doc-3 \n[2015-12-01T16:08:16.713Z]  INFO: search-index/indexer/25573 on mikes-mbp: batch indexed! \n[2015-12-01T16:08:16.714Z]  INFO: search-index/indexer/25573 on mikes-mbp: batch indexed! \n[2015-12-01T16:08:16.714Z]  INFO: search-index/indexer/25573 on mikes-mbp: batch indexed! \n[2015-12-01T16:08:16.715Z]  INFO: search-index/searcher/25573 on mikes-mbp: {&quot;query&quot;:{&quot;*&quot;:[&quot;doc&quot;]},&quot;maxFacetLimit&quot;:100,&quot;offset&quot;:0,&quot;pageSize&quot;:100} \n \n\nand this was the result of the console.log(results): \n\n \n{ totalHits: 1, \n  totalDocsInIndex: 1, \n  documentFrequencies: { '*￮doc': 1 }, \n  fieldWeight: { '*￮doc': 1 }, \n  query: \n   { query: { '*': [Object] }, \n     maxFacetLimit: 100, \n     offset: 0, \n     pageSize: 100 }, \n  facets: {}, \n  facetRanges: undefined, \n  hits: \n   [ { id: 'doc-3', \n       tf: [Object], \n       score: 0.545144315135374, \n       document: [Object] } ] } \n \n\nAs a test, i ran the script 3 times, each time adding just 1 document at a time, and this had the desired behaviour of appending documents to the index. \n\nSo i guess my question is, have i misunderstood how this works?",
        "tags": [
            "recreating",
            "adding",
            "index",
            "documents"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2kUR02"
    },
    {
        "date": 1449316680000,
        "repository": "search-index-indexer",
        "title": "Tests!",
        "text": "<p>Need some form of tests. Good way to teach my self. Try Travis CI?</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/search-index-indexer/issues/1",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-12-05T12:58:00+01:00",
        "teasertext": "Need some form of tests. Good way to teach my self. Try Travis CI?",
        "tags": [
            "tests"
        ],
        "type": [
            "GitHub"
        ],
        "id": "1SHe50"
    },
    {
        "date": 1449316740000,
        "repository": "search-index-indexer",
        "title": "relative paths",
        "text": "<p>Get relative paths working.</p>",
        "issuetype": "bug,enhancement",
        "url": "https://github.com/eklem/search-index-indexer/issues/2",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-12-05T12:59:00+01:00",
        "teasertext": "Get relative paths working.",
        "tags": [
            "relative",
            "paths"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3phxcV"
    },
    {
        "date": 1449316740000,
        "repository": "search-index-indexer",
        "title": "Create npmjs package",
        "text": "<p>Need a npmjs package to make it easier available</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/search-index-indexer/issues/3",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-12-05T12:59:00+01:00",
        "teasertext": "Need a npmjs package to make it easier available",
        "tags": [
            "create",
            "npmjs",
            "package"
        ],
        "type": [
            "GitHub"
        ],
        "id": "2kFmm3"
    },
    {
        "date": 1449349560000,
        "repository": "search-index-indexer",
        "title": "Dummy data",
        "text": "<p>Dummy data. Something that is not just plain vanilla, to show most of the si.add functionality. nGramLength, filters, stopwords, searchable, fieldedsearch and weight.</p>",
        "issuetype": null,
        "url": "https://github.com/eklem/search-index-indexer/issues/4",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": null,
        "datehuman": "2015-12-05T22:06:00+01:00",
        "teasertext": "Dummy data. Something that is not just plain vanilla, to show most of the si.add functionality. nGramLength, filters, stopwords, searchable, fieldedsearch and weight.",
        "tags": [
            "dummy",
            "data"
        ],
        "type": [
            "GitHub"
        ],
        "id": "3UJrMR"
    },
    {
        "date": 1449349680000,
        "repository": "search-index-indexer",
        "title": "Also add a vanilla config.json + data.json",
        "text": "<p>In adition to the ones showing the functionality, also add a vanilla config.json and data.json. This is what you wan&#39;t people to use them self.</p>",
        "issuetype": "enhancement",
        "url": "https://github.com/eklem/search-index-indexer/issues/5",
        "user": [
            "eklem"
        ],
        "userimage": "",
        "userassigned": "eklem",
        "datehuman": "2015-12-05T22:08:00+01:00",
        "teasertext": "In adition to the ones showing the functionality, also add a vanilla config.json and data.json. This is what you wan't people to use them self.",
        "tags": [
            "+",
            "datajson",
            "add",
            "vanilla"
        ],
        "type": [
            "GitHub"
        ],
        "id": "pWbOI"
    }
]
